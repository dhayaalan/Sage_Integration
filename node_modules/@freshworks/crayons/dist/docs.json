{
  "timestamp": "2023-02-06T03:52:50",
  "compiler": {
    "name": "@stencil/core",
    "version": "2.17.4",
    "typescriptVersion": "4.5.4"
  },
  "components": [
    {
      "filePath": "./src/components/accordion/accordion.tsx",
      "encapsulation": "shadow",
      "tag": "fw-accordion",
      "readme": "# Accordion (fw-accordion)\n\nfw-accordion displays a collapsible accordion component, which expands/collapses on clicking the accordion header.\n\n## Demo\n\n### Default Accordion\n\n```html live\n<fw-accordion expanded>\n  <fw-accordion-title>Header Text</fw-accordion-title>\n  <fw-accordion-body>\n    Lorem Ipsum is simply dummy text of the printing and typesetting industry.\n    Lorem Ipsum has been the industry's standard dummy text ever since the\n    1500s, when an unknown printer took a galley of type and scrambled it to\n    make a type specimen book. It has survived not only five centuries, but also\n    the leap into electronic typesetting, remaining essentially unchanged. It\n    was popularised in the 1960s with the release of Letraset sheets containing\n    Lorem Ipsum passages, and more recently with desktop publishing software\n    like Aldus PageMaker including versions of Lorem Ipsum\n  </fw-accordion-body>\n</fw-accordion>\n```\n\n### Accordion Title icon size\n\n```html live\n<fw-accordion>\n  <fw-accordion-title icon-size=\"small\">Header Text</fw-accordion-title>\n  <fw-accordion-body>\n    Lorem Ipsum is simply dummy text of the printing and typesetting industry.\n    Lorem Ipsum has been the industry's standard dummy text ever since the\n    1500s, when an unknown printer took a galley of type and scrambled it to\n    make a type specimen book. It has survived not only five centuries, but also\n    the leap into electronic typesetting, remaining essentially unchanged. It\n    was popularised in the 1960s with the release of Letraset sheets containing\n    Lorem Ipsum passages, and more recently with desktop publishing software\n    like Aldus PageMaker including versions of Lorem Ipsum\n  </fw-accordion-body>\n</fw-accordion>\n<br />\n<fw-accordion>\n  <fw-accordion-title>Header Text</fw-accordion-title>\n  <fw-accordion-body>\n    Lorem Ipsum is simply dummy text of the printing and typesetting industry.\n    Lorem Ipsum has been the industry's standard dummy text ever since the\n    1500s, when an unknown printer took a galley of type and scrambled it to\n    make a type specimen book. It has survived not only five centuries, but also\n    the leap into electronic typesetting, remaining essentially unchanged. It\n    was popularised in the 1960s with the release of Letraset sheets containing\n    Lorem Ipsum passages, and more recently with desktop publishing software\n    like Aldus PageMaker including versions of Lorem Ipsum\n  </fw-accordion-body>\n</fw-accordion>\n<br />\n<fw-accordion>\n  <fw-accordion-title icon-size=\"large\">Header Text</fw-accordion-title>\n  <fw-accordion-body>\n    Lorem Ipsum is simply dummy text of the printing and typesetting industry.\n    Lorem Ipsum has been the industry's standard dummy text ever since the\n    1500s, when an unknown printer took a galley of type and scrambled it to\n    make a type specimen book. It has survived not only five centuries, but also\n    the leap into electronic typesetting, remaining essentially unchanged. It\n    was popularised in the 1960s with the release of Letraset sheets containing\n    Lorem Ipsum passages, and more recently with desktop publishing software\n    like Aldus PageMaker including versions of Lorem Ipsum\n  </fw-accordion-body>\n</fw-accordion>\n```\n\n### Accordion with custom toggle icons\n\n```html live\n<fw-accordion>\n  <fw-accordion-title>\n    <fw-icon name=\"minus\" size=\"14\" slot=\"expanded-icon\"></fw-icon>\n    <fw-icon name=\"plus\" size=\"14\" slot=\"collapsed-icon\"></fw-icon>\n    Header Text\n  </fw-accordion-title>\n  <fw-accordion-body>\n    Lorem Ipsum is simply dummy text of the printing and typesetting industry.\n    Lorem Ipsum has been the industry's standard dummy text ever since the\n    1500s, when an unknown printer took a galley of type and scrambled it to\n    make a type specimen book. It has survived not only five centuries, but also\n    the leap into electronic typesetting, remaining essentially unchanged. It\n    was popularised in the 1960s with the release of Letraset sheets containing\n    Lorem Ipsum passages, and more recently with desktop publishing software\n    like Aldus PageMaker including versions of Lorem Ipsum\n  </fw-accordion-body>\n</fw-accordion>\n```\n\nToggle icons can be customized using named slots.\n\n| Icon           | Slot Name      |\n| -------------- | -------------- |\n| Expanded Icon  | expanded-icon  |\n| Collapsed Icon | collapsed-icon |\n\n### No Bounding Box Accordion (Borders at top and bottom only)\n\n```html live\n<fw-accordion type=\"no_bounding_box\">\n  <fw-accordion-title>Header Text</fw-accordion-title>\n  <fw-accordion-body>\n    Lorem Ipsum is simply dummy text of the printing and typesetting industry.\n    Lorem Ipsum has been the industry's standard dummy text ever since the\n    1500s, when an unknown printer took a galley of type and scrambled it to\n    make a type specimen book. It has survived not only five centuries, but also\n    the leap into electronic typesetting, remaining essentially unchanged. It\n    was popularised in the 1960s with the release of Letraset sheets containing\n    Lorem Ipsum passages, and more recently with desktop publishing software\n    like Aldus PageMaker including versions of Lorem Ipsum\n  </fw-accordion-body>\n</fw-accordion>\n```\n\n### Accordion with custom CSS properties\n\n```html live\n<fw-accordion\n  style=\"--fw-accordion-border: 1px solid #F5F7F9; --fw-accordion-box-shadow: 0px 1px 8px rgba(152, 152, 152, 0.13); --fw-accordion-border-radius: 4px;\"\n  expanded\n>\n  <fw-accordion-title\n    truncate-on-overflow=\"true\"\n    style=\"--fw-accordion-title-background-color: #F5F7F9; --fw-accordion-title-expanded-icon-color: #2C5CC5; --fw-accordion-title-collapsed-icon-color: #264966;\"\n  >\n    <fw-icon name=\"rewards\"></fw-icon>\n    <span style=\"padding-left: 5px;\">Header Text</span>\n  </fw-accordion-title>\n  <fw-accordion-body style=\"--fw-accordion-body-background-color: #FFFFFF\">\n    Lorem Ipsum is simply dummy text of the printing and typesetting industry.\n    Lorem Ipsum has been the industry's standard dummy text ever since the\n    1500s, when an unknown printer took a galley of type and scrambled it to\n    make a type specimen book. It has survived not only five centuries, but also\n    the leap into electronic typesetting, remaining essentially unchanged. It\n    was popularised in the 1960s with the release of Letraset sheets containing\n    Lorem Ipsum passages, and more recently with desktop publishing software\n    like Aldus PageMaker including versions of Lorem Ipsum\n  </fw-accordion-body>\n</fw-accordion>\n```\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html\n<fw-accordion>\n  <fw-accordion-title>Header Text</fw-accordion-title>\n  <fw-accordion-body>\n    Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum\n  </fw-accordion-body>\n</fw-accordion>\n<br>\n<fw-accordion type=\"no_bounding_box\">\n  <fw-accordion-title>Header Text</fw-accordion-title>\n  <fw-accordion-body>\n    Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum\n  </fw-accordion-body>\n</fw-accordion>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwCheckbox } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n    <FwAccordion>\n      <FwAccordionTitle>Header Text</FwAccordionTitle>\n      <FwAccordionBody>\n        Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum\n      </FwAccordionBody>\n    </FwAccordion>\n  </div>)\n}\n```\n</code-block>\n</code-group>\n",
      "docs": "fw-accordion displays a collapsible accordion component, which expands/collapses on clicking the accordion header.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "expanded",
          "type": "boolean",
          "mutable": true,
          "attr": "expanded",
          "reflectToAttr": true,
          "docs": "To manage accordion expanded or collapsed state",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"default\" | \"no_bounding_box\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "The type of accordion to be displayed.\ndefault => Accordion with all borders\nno_bounding_box => Accordion with top and bottom borders only",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "no_bounding_box",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "toggle",
          "returns": {
            "type": "Promise<boolean>",
            "docs": "promise that resolves to true"
          },
          "signature": "toggle() => Promise<boolean>",
          "parameters": [],
          "docs": "Method available from the component to toggle expanded or collapsed state of accordion",
          "docsTags": [
            {
              "name": "returns",
              "text": "promise that resolves to true"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "fwAccordionToggle",
          "detail": "AccordionToggleEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the accordion is expanded or collapsed",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--fw-accordion-border",
          "annotation": "prop",
          "docs": "Accordion border"
        },
        {
          "name": "--fw-accordion-border-radius",
          "annotation": "prop",
          "docs": "Accordion border radius"
        },
        {
          "name": "--fw-accordion-box-shadow",
          "annotation": "prop",
          "docs": "Accordion box shadow"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/accordion-body/accordion-body.tsx",
      "encapsulation": "shadow",
      "tag": "fw-accordion-body",
      "readme": "# Accordion Body (fw-accordion-body)\n\nDisplays the content inside the component.\n\n",
      "docs": "Displays the content inside the component.",
      "docsTags": [
        {
          "name": "parent",
          "text": "accordion"
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--fw-accordion-body-background-color",
          "annotation": "prop",
          "docs": "Accordion body background color"
        },
        {
          "name": "--fw-accordion-body-font-size",
          "annotation": "prop",
          "docs": "Accordion body font size"
        },
        {
          "name": "--fw-accordion-body-line-height",
          "annotation": "prop",
          "docs": "Accordion body line height"
        },
        {
          "name": "--fw-accordion-body-padding",
          "annotation": "prop",
          "docs": "Accordion body padding"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/accordion-title/accordion-title.tsx",
      "encapsulation": "shadow",
      "tag": "fw-accordion-title",
      "readme": "# Accordion Title (fw-accordion-title)\n\nDisplays the content inside the component.\n",
      "docs": "Displays the content inside the component.",
      "docsTags": [
        {
          "name": "parent",
          "text": "accordion"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "iconSize",
          "type": "\"large\" | \"medium\" | \"small\"",
          "mutable": false,
          "attr": "icon-size",
          "reflectToAttr": false,
          "docs": "The size of the default icon",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "truncateOnOverflow",
          "type": "boolean",
          "mutable": false,
          "attr": "truncate-on-overflow",
          "reflectToAttr": false,
          "docs": "Truncate title on text overflow",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--fw-accordion-title-background-color",
          "annotation": "prop",
          "docs": "Accordion title background color"
        },
        {
          "name": "--fw-accordion-title-border",
          "annotation": "prop",
          "docs": "Accordion title border"
        },
        {
          "name": "--fw-accordion-title-collapsed-icon-color",
          "annotation": "prop",
          "docs": "Accordion title collapsed icon color"
        },
        {
          "name": "--fw-accordion-title-expanded-icon-color",
          "annotation": "prop",
          "docs": "Accordion title expanded icon color"
        },
        {
          "name": "--fw-accordion-title-font-size",
          "annotation": "prop",
          "docs": "Accordion title font size"
        },
        {
          "name": "--fw-accordion-title-font-weight",
          "annotation": "prop",
          "docs": "Accordion title font weight"
        },
        {
          "name": "--fw-accordion-title-line-height",
          "annotation": "prop",
          "docs": "Accordion title line height"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "fw-icon"
      ],
      "dependencyGraph": {
        "fw-accordion-title": [
          "fw-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/avatar/avatar.tsx",
      "encapsulation": "shadow",
      "tag": "fw-avatar",
      "readme": "# Avatar (fw-avatar)\n\nAvatars are used to represent a person or object.\n\n## Demo\n\n```html live\n<section>\n  <fw-avatar\n    size=\"medium\"\n    image=\"https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80\"\n  ></fw-avatar>\n  <fw-avatar initials=\"PT\"></fw-avatar>\n  <fw-avatar name=\"Patrick Goodwin\"></fw-avatar>\n</section>\n```\n\nAvatar of different sizes\n\n```html live\n<section>\n  <fw-avatar\n    size=\"medium\"\n    image=\"https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80\"\n  ></fw-avatar>\n  <fw-avatar\n    size=\"small\"\n    image=\"https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80\"\n  ></fw-avatar>\n</section>\n```\n\nAvatar with different modes\n\n```html live\n<section>\n  <fw-avatar mode=\"dark\" initials=\"PT\"></fw-avatar>\n  <fw-avatar mode=\"light\" initials=\"PT\"></fw-avatar>\n  <fw-avatar mode=\"error\" initials=\"PT\"></fw-avatar>\n</section>\n```\n\nAvatar with default avatar icons \n\n```html live\n<section>\n  <fw-avatar size=\"xsmall\"></fw-avatar>\n  <fw-avatar mode=\"error\" size=\"xsmall\"></fw-avatar>\n</section>\n```\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n``` html\n<section>\n  <fw-avatar\n    size=\"medium\"\n    image=\"https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80\"></fw-avatar>\n  <fw-avatar\n    size=\"small\"\n    image=\"https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80\"></fw-avatar>\n</section>\n<section>\n<fw-avatar size=\"medium\" image=\"https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80\"> </fw-avatar>\n<fw-avatar size=\"small\" image=\"https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80\"> </fw-avatar>\n</section>\n<section>\n  <fw-avatar mode=\"dark\" initials=\"PT\"></fw-avatar>\n  <fw-avatar mode=\"light\" initials=\"PT\"></fw-avatar>\n  <fw-avatar mode=\"error\" initials=\"PT\"></fw-avatar>\n</section>\n<section>\n  <fw-avatar size=\"xsmall\"></fw-avatar>\n  <fw-avatar mode=\"error\" size=\"xsmall\"></fw-avatar>\n</section>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwAvatar } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n    <FwAvatar  image=\"https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80\"></FwAvatar>\n\n    <FwAvatar  mode=\"dark\" initials=\"PT\" ></FwAvatar>\n    <FwAvatar  mode=\"light\" initials=\"PT\" ></FwAvatar>\n    <FwAvatar  mode=\"error\" initials=\"PT\" ></FwAvatar>\n\n    <FwAvatar size=\"xsmall\"></FwAvatar>\n    <FwAvatar  mode=\"error\" size=\"xsmall\"></FwAvatar>\n\n    <FwAvatar  size=\"medium\" image=\"https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300 q=80\"></FwAvatar>\n    <FwAvatar  size=\"small\"  image=\"https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80\"></FwAvatar>\n\n  </div>)\n}\n```\n</code-block>\n</code-group>",
      "docs": "Avatars are used to represent a person or object.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "alt",
          "type": "string",
          "mutable": false,
          "attr": "alt",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "image",
          "type": "string",
          "mutable": false,
          "attr": "image",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "initials",
          "type": "string",
          "mutable": false,
          "attr": "initials",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"dark\" | \"error\" | \"light\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'dark'",
          "values": [
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "shape",
          "type": "\"circle\" | \"rounded\" | \"square\"",
          "mutable": false,
          "attr": "shape",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'circle'",
          "values": [
            {
              "value": "circle",
              "type": "string"
            },
            {
              "value": "rounded",
              "type": "string"
            },
            {
              "value": "square",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\" | \"xlarge\" | \"xsmall\" | \"xxlarge\" | \"xxsmall\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'large'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            },
            {
              "value": "xlarge",
              "type": "string"
            },
            {
              "value": "xsmall",
              "type": "string"
            },
            {
              "value": "xxlarge",
              "type": "string"
            },
            {
              "value": "xxsmall",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [
        {
          "name": "image",
          "docs": ""
        },
        {
          "name": "initials",
          "docs": ""
        }
      ],
      "dependents": [
        "fw-custom-cell-user",
        "fw-select-option",
        "fw-tag"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "fw-custom-cell-user": [
          "fw-avatar"
        ],
        "fw-select-option": [
          "fw-avatar"
        ],
        "fw-tag": [
          "fw-avatar"
        ]
      }
    },
    {
      "filePath": "./src/components/button/button.tsx",
      "encapsulation": "shadow",
      "tag": "fw-button",
      "readme": "# Button (fw-button)\n\nfw-button displays a button on the user interface and enables performing specific actions based on the button type. The button’s label can be a text, icon, or both.\n\n## Demo\n\n```html live\n<section>\n  <fw-label value=\"Try themes\"></fw-label>\n  <fw-button color=\"primary\"> OK </fw-button>\n  <fw-button color=\"secondary\"> Secondary </fw-button>\n  <fw-button color=\"danger\"> Don't Click </fw-button>\n  <fw-button color=\"link\"> Link Button </fw-button>\n  <fw-button color=\"text\"> Plain Text Button </fw-button>\n</section>\n\n<br />\n\n<section>\n  <fw-label value=\"Try sizes\"></fw-label>\n  <fw-button size=\"small\"> Small </fw-button>\n  <fw-button> Default </fw-button>\n</section>\n<br />\n\n<section>\n  <fw-label value=\"Try icon buttons\"></fw-label>\n  <fw-button size=\"icon\"\n    ><fw-icon name=\"agent\" size=\"20\" color=\"white\"></fw-icon>\n  </fw-button>\n  <fw-button size=\"icon\" color=\"secondary\"\n    ><fw-icon name=\"phone\" size=\"20\"></fw-icon>\n  </fw-button>\n</section>\n<br />\n\n<section>\n  <fw-label value=\"Caret with icon\"></fw-label>\n  <fw-button show-caret-icon>\n    <fw-icon name=\"calendar-time\" size=\"16\" slot=\"before-label\"></fw-icon>\n    Select date\n  </fw-button>\n\n  <fw-button color=\"link\" show-caret-icon>\n    <fw-icon name=\"calendar-time\" size=\"16\" slot=\"before-label\"></fw-icon>\n    Select date\n  </fw-button>\n</section>\n<br />\n\n<section>\n  <fw-label value=\"Loading state\"></fw-label>\n  <fw-button loading> Loading </fw-button>\n  <fw-button loading color=\"secondary\"> OK </fw-button>\n  <fw-button loading color=\"danger\"> Don't Click </fw-button>\n</section>\n<br />\n\n<section>\n  <fw-label value=\"Disabled\"></fw-label>\n  <fw-button disabled color=\"primary\"> OK </fw-button>\n  <fw-button disabled color=\"secondary\"> OK </fw-button>\n  <fw-button disabled color=\"danger\"> Don't Click </fw-button>\n</section>\n\n<section>\n  <fw-label\n    value=\"Try icon + text buttons Buttons with before-label and after-label\"\n  ></fw-label>\n  <fw-button color=\"secondary\">\n    <fw-icon slot=\"before-label\" size=\"16\" name=\"delete\"></fw-icon>\n    <span>Delete</span>\n  </fw-button>\n  <fw-button color=\"primary\">\n    <span>Copy</span>\n    <fw-icon name=\"code\" size=\"16\" slot=\"after-label\"></fw-icon>\n  </fw-button>\n</section>\n<br />\n```\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n``` html\n<section>\n  <fw-label value=\"Try themes\"></fw-label>\n  <fw-button color=\"primary\"> OK </fw-button>\n  <fw-button color=\"secondary\"> Secondary </fw-button>\n  <fw-button color=\"danger\"> Don't Click </fw-button>\n  <fw-button color=\"link\"> Link Button </fw-button>\n  <fw-button color=\"text\"> Plain Text Button </fw-button>\n</section>\n\n<br />\n\n<section>\n  <fw-label value=\"Try sizes\"></fw-label>\n  <fw-button size=\"small\"> Small </fw-button>\n  <fw-button> Default </fw-button>\n</section>\n<br />\n\n<section>\n  <fw-label value=\"Try icon buttons\"></fw-label>\n  <fw-button size=\"icon\"\n    ><fw-icon name=\"agent\" size=\"20\" color=\"white\"></fw-icon>\n  </fw-button>\n  <fw-button size=\"icon\" color=\"secondary\"\n    ><fw-icon name=\"phone\" size=\"20\"></fw-icon>\n  </fw-button>\n</section>\n<br />\n\n<section>\n  <fw-label value=\"Caret with icon\"></fw-label>\n  <fw-button show-caret-icon>\n    <fw-icon name=\"calendar-time\" size=\"16\" slot=\"before-label\"></fw-icon>\n    Select date\n  </fw-button>\n\n  <fw-button color=\"link\" show-caret-icon>\n    <fw-icon name=\"calendar-time\" size=\"16\" slot=\"before-label\"></fw-icon>\n    Select date\n  </fw-button>\n</section>\n<br />\n\n<section>\n  <fw-label value=\"Loading state\"></fw-label>\n  <fw-button loading> Loading </fw-button>\n  <fw-button loading color=\"secondary\"> OK </fw-button>\n  <fw-button loading color=\"danger\"> Don't Click </fw-button>\n</section>\n<br />\n\n<section>\n  <fw-label value=\"Disabled\"></fw-label>\n  <fw-button disabled color=\"primary\"> OK </fw-button>\n  <fw-button disabled color=\"secondary\"> OK </fw-button>\n  <fw-button disabled color=\"danger\"> Don't Click </fw-button>\n</section>\n\n<section>\n  <fw-label\n    value=\"Try icon + text buttons Buttons with before-label and after-label\"\n  ></fw-label>\n  <fw-button color=\"secondary\">\n    <fw-icon slot=\"before-label\" size=\"16\" name=\"delete\"></fw-icon>\n    <span>Delete</span>\n  </fw-button>\n  <fw-button color=\"primary\">\n    <span>Copy</span>\n    <fw-icon name=\"code\" size=\"16\" slot=\"after-label\"></fw-icon>\n  </fw-button>\n</section>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwButton, FwIcon } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n  <section>\n  <label>Try themes</label>\n  <FwButton color=\"primary\" onFwClick={()=>console.log(\"fwClick event emitted from button\")}> OK </FwButton>\n  <FwButton color=\"secondary\"> Secondary </FwButton>\n  <FwButton color=\"danger\"> Don't Click </FwButton>\n  <FwButton color=\"link\"> Link Button </FwButton>\n  <FwButton color=\"text\"> Plain Text Button </FwButton>\n</section>\n\n<br />\n\n<section>\n  <label>Try sizes</label>\n  <FwButton size=\"mini\" color=\"secondary\"> Mini </FwButton>\n  <FwButton size=\"small\"> Small </FwButton>\n  <FwButton> Default </FwButton>\n</section>\n<br />\n\n<section>\n  <label>Try icon buttons</label>\n  <FwButton size=\"icon\"\n    ><FwIcon name=\"agent\" color=\"white\"></FwIcon>\n  </FwButton>\n  <FwButton size=\"icon\" color=\"secondary\"\n    ><FwIcon name=\"phone\"></FwIcon>\n  </FwButton>\n</section>\n<br />\n<section>\n  <label value=\"Caret with icon\"></label>\n  <FwButton show-caret-icon>\n    <FwIcon name=\"calendar-time\" slot=\"before-label\"></FwIcon>\n    Select date\n  </FwButton>\n\n  <FwButton color=\"link\" show-caret-icon>\n    <fw-icon name=\"calendar-time\" slot=\"before-label\" ></fw-icon>\n    Select date\n  </FwButton>\n</section>\n<br />\n\n<section>\n  <label>Loading state</label>\n  <FwButton loading> Loading </FwButton>\n  <FwButton loading color=\"secondary\"> OK </FwButton>\n  <FwButton loading color=\"danger\"> Don't Click </FwButton>\n</section>\n<br />\n\n<section>\n  <label>Disabled</label>\n  <FwButton disabled color=\"primary\"> OK </FwButton>\n  <FwButton disabled color=\"secondary\"> OK </FwButton>\n  <FwButton disabled color=\"danger\"> Don't Click </FwButton>\n</section>\n<br />\n<section>\n  <label value=\"Try icon + text buttons Buttons with before-label and after-label\"></label>\n  <FwButton color=\"secondary\">\n    <FwIcon slot=\"before-label\" name=\"delete\"></FwIcon>\n    <span>Delete</span>\n  </FwButton>\n  <FwButton color=\"primary\">\n    <span>Copy</span>\n    <FwIcon name=\"code\" slot=\"after-label\"></FwIcon>\n  </FwButton>\n</section>\n<br />\n\n<section>\n  <FwButton value=\"Try full length\"></FwButton>\n  <FwButton color=\"secondary\" size=\"small\" style=\"display: block;\">Span full-width</FwButton>\n</section>\n  </div>)\n```\n</code-block>\n</code-group>\n",
      "docs": "fw-button displays a button on the user interface and enables performing specific actions based on the button type. The button’s label can be a text, icon, or both.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"danger\" | \"link\" | \"primary\" | \"secondary\" | \"text\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Identifier of  the theme based on which the button is styled.",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Disables the button on the interface. Default value is false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fileUploaderId",
          "type": "string",
          "mutable": false,
          "attr": "file-uploader-id",
          "reflectToAttr": false,
          "docs": "Accepts the id of the fw-file-uploader component to upload the file.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "Loading state for the button, Default value is false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "modalTriggerId",
          "type": "string",
          "mutable": false,
          "attr": "modal-trigger-id",
          "reflectToAttr": false,
          "docs": "Accepts the id of the fw-modal component to open it on click.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showCaretIcon",
          "type": "boolean",
          "mutable": false,
          "attr": "show-caret-icon",
          "reflectToAttr": false,
          "docs": "Caret indicator for the button, Default value is false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"icon\" | \"icon-small\" | \"normal\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Size of the button.",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "icon",
              "type": "string"
            },
            {
              "value": "icon-small",
              "type": "string"
            },
            {
              "value": "normal",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "throttleDelay",
          "type": "number",
          "mutable": false,
          "attr": "throttle-delay",
          "reflectToAttr": false,
          "docs": "Sets the delay for throttle in milliseconds. Defaults to 200 milliseconds.",
          "docsTags": [],
          "default": "200",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"button\" | \"submit\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Button type based on which actions are performed when the button is clicked.",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<any>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<any>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "fwBlur",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the button loses focus.",
          "docsTags": []
        },
        {
          "event": "fwClick",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the button is clicked.",
          "docsTags": []
        },
        {
          "event": "fwFocus",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the button comes into focus.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--fw-button-label-vertical-padding",
          "annotation": "prop",
          "docs": "vertical padding for the button label"
        },
        {
          "name": "--fw-button-min-width",
          "annotation": "prop",
          "docs": "minimum width for the button"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-data-table",
        "fw-datepicker",
        "fw-modal-footer",
        "fw-pagination",
        "fw-select"
      ],
      "dependencies": [
        "fw-spinner",
        "fw-icon"
      ],
      "dependencyGraph": {
        "fw-button": [
          "fw-spinner",
          "fw-icon"
        ],
        "fw-data-table": [
          "fw-button"
        ],
        "fw-datepicker": [
          "fw-button"
        ],
        "fw-modal-footer": [
          "fw-button"
        ],
        "fw-pagination": [
          "fw-button"
        ],
        "fw-select": [
          "fw-button"
        ]
      }
    },
    {
      "filePath": "./src/components/button-group/button-group.tsx",
      "encapsulation": "shadow",
      "tag": "fw-button-group",
      "readme": "# Button Group (fw-button-group)\n\nButton groups can be used to group related buttons into sections.\n\n## Demo\n\n```html live\n<section>\n  <fw-button-group label=\"Test\">\n    <fw-button color=\"secondary\">Replace</fw-button>\n    <fw-button color=\"secondary\">Modify</fw-button>\n    <fw-button color=\"secondary\">Cancel</fw-button>\n  </fw-button-group>\n</section>\n<br />\n\n<section>\n  <fw-button-group label=\"Test\">\n    <fw-button id=\"b1\" size=\"icon\" color=\"secondary\"\n      ><fw-icon name=\"reply\" color=\"black\"></fw-icon>\n    </fw-button>\n    <fw-button id=\"b2\" size=\"icon\" color=\"secondary\"\n      ><fw-icon name=\"chat-online\" color=\"black\"></fw-icon>\n    </fw-button>\n    <fw-button id=\"b3\" size=\"icon\" color=\"secondary\"\n      ><fw-icon name=\"more-horizontal\" color=\"black\"></fw-icon>\n    </fw-button>\n  </fw-button-group>\n</section>\n```\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html\n<section>\n<fw-button-group label=\"Test\">\n    <fw-button color=\"secondary\">Replace</fw-button>\n    <fw-button color=\"secondary\">Modify</fw-button>\n    <fw-button color=\"secondary\">Cancel</fw-button>\n  </fw-button-group>\n  </section>\n<br/>\n<section>\n    <fw-button-group label=\"Test\">\n    <fw-button id=\"b1\" size=\"icon\" color=\"secondary\"><fw-icon name=\"reply\" color=\"black\" ></fw-icon> </fw-button>\n    <fw-button id=\"b2\" size=\"icon\" color=\"secondary\"><fw-icon name=\"chat-online\" color=\"black\" ></fw-icon> </fw-button>\n    <fw-button id=\"b3\" size=\"icon\" color=\"secondary\"><fw-icon name=\"more-horizontal\" color=\"black\" ></fw-icon> </fw-button>\n  </fw-button-group>\n</section>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwButtonGroup, FwButton, FwIcon } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n    <FwButtonGroup>\n      <FwButton color=\"secondary\"> Replace</FwButton> \n      <FwButton color=\"secondary\">Modify</FwButton> \n      <FwButton color=\"secondary\">Cancel</FwButton>\n    </FwButtonGroup>\n\n  <FwButtonGroup>\n    <FwButton id=\"b1\" size=\"icon\" color=\"secondary\"><FwIcon name=\"reply\" color=\"black\"></FwIcon> </FwButton> \n    <FwButton id=\"b1\" size=\"icon\" color=\"secondary\"><FwIcon name=\"chat-online\" color=\"black\"></FwIcon> </FwButton>\n    <FwButton id=\"b1\" size=\"icon\" color=\"secondary\"><FwIcon name=\"more-horizontal\" color=\"black\"></FwIcon> </FwButton>\n  </FwButtonGroup>\n\n  </div>)\n}\n```\n</code-block>\n</code-group>\n",
      "docs": "Button groups can be used to group related buttons into sections.",
      "docsTags": [
        {
          "name": "parent",
          "text": "button"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "label",
          "type": "string",
          "mutable": true,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-pagination"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "fw-pagination": [
          "fw-button-group"
        ]
      }
    },
    {
      "filePath": "./src/components/checkbox/checkbox.tsx",
      "encapsulation": "shadow",
      "tag": "fw-checkbox",
      "readme": "# Checkbox (fw-checkbox)\nfw-checkbox displays a check box on the user interface and enables assigning a state (selected or deselected) to it. In the selected state, the check box displayed on the UI is highlighted and contains a check mark. \n\n## Demo\n\n```html live\n<fw-checkbox checked description=\"Agree or Disagree\">Select to agree</fw-checkbox><br><br>\n<fw-checkbox checked disabled value=\"dcb\">Disabled check box</fw-checkbox>\n```\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html\n<fw-checkbox checked description=\"Agree or Disagree\">Select to agree</fw-checkbox><br><br>\n<fw-checkbox checked disabled value=\"dcb\">Disabled check box</fw-checkbox>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwCheckbox } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n    <FwCheckbox checked description=\"Agree or Disagree\">Select to agree</FwCheckbox><br/><br/>\n    <FwCheckbox checked disabled value=\"dcb\">Disabled check box</FwCheckbox>\n  </div>)\n}\n```\n</code-block>\n</code-group>\n",
      "docs": "fw-checkbox displays a check box on the user interface and enables assigning a state (selected or deselected) to it. In the selected state, the check box displayed on the UI is highlighted and contains a check mark.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "Sets the state of the check box to selected. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "description",
          "type": "string",
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "Description to be displayed for the checkbox.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Disables the check box on the interface. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "errorText",
          "type": "string",
          "mutable": false,
          "attr": "error-text",
          "reflectToAttr": false,
          "docs": "Error text displayed below the radio group.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hintText",
          "type": "string",
          "mutable": false,
          "attr": "hint-text",
          "reflectToAttr": false,
          "docs": "\n/**\n  Hint text displayed below the radio group.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "Use `description` instead.\nLabel displayed on the interface, for the check box."
            }
          ],
          "default": "''",
          "deprecation": "Use `description` instead.\nLabel displayed on the interface, for the check box.",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "\"error\" | \"normal\" | \"warning\"",
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "Theme based on which the checkbox is styled.",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "normal",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Identifier corresponding to the component, that is saved when the form data is saved.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "warningText",
          "type": "string",
          "mutable": false,
          "attr": "warning-text",
          "reflectToAttr": false,
          "docs": "Warning text displayed below the radio group.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on a `fw-checkbox`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "fwBlur",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the check box loses focus.",
          "docsTags": []
        },
        {
          "event": "fwChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the checkbox state is modified.",
          "docsTags": []
        },
        {
          "event": "fwFocus",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the check box comes into focus.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "keyup",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--fw-error-color",
          "annotation": "prop",
          "docs": "Color of the error text."
        },
        {
          "name": "--fw-hint-color",
          "annotation": "prop",
          "docs": "Color of the hint text."
        },
        {
          "name": "--fw-warning-color",
          "annotation": "prop",
          "docs": "Color of the warning text."
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-data-table",
        "fw-form-control",
        "fw-select-option"
      ],
      "dependencies": [
        "fw-icon"
      ],
      "dependencyGraph": {
        "fw-checkbox": [
          "fw-icon"
        ],
        "fw-data-table": [
          "fw-checkbox"
        ],
        "fw-form-control": [
          "fw-checkbox"
        ],
        "fw-select-option": [
          "fw-checkbox"
        ]
      }
    },
    {
      "filePath": "./src/components/country-phone/country-phone.tsx",
      "encapsulation": "shadow",
      "tag": "fw-country-phone",
      "readme": "#  CountryPhone(fw-country-phone)\n\nfw-country-phone displays a country code selector & input element for entering phone Number\n\n## Demo\n```html live\n<fw-country-phone\n    value=\"\"\n    name=\"country-code\"\n    clear-input\n    select-placeholder=\"select country code\"\n    input-placeholder=\"Enter phone number\"\n    required\n    input-label=\"Support phone number\"\n    select-label=\"Country Code\"\n    error-text=\"Error message text\"\n    warning-text=\"Please use numbers for user ID\"\n    state=\"normal\"\n  ></fw-country-phone>\n<fw-country-phone\n    value=\"+919999999999\"\n    name=\"country-code\"\n    clear-input\n    select-placeholder=\"select country code\"\n    input-placeholder=\"Enter phone number\"\n    required\n    input-label=\"Support phone number\"\n    select-label=\"Country Code\"\n    error-text=\"Error message text\"\n    warning-text=\"Please use numbers for user ID\"\n    state=\"normal\"\n  ></fw-country-phone>\n  <fw-country-phone\n    value=\"+919999999999\"\n    name=\"country-code\"\n    clear-input\n    select-placeholder=\"select country code\"\n    input-placeholder=\"Enter phone number\"\n    required\n    input-label=\"Support phone number\"\n    select-label=\"Country Code\"\n    hint-text=\"select country code to get valid phonenumber\"\n    warning-text=\"Please use numbers for user ID\"\n    state=\"normal\"\n  ></fw-country-phone>\n  <fw-country-phone\n  value=\"+1264497275926449727599878978789798798789798798789787897987897897897878978978787897989878\"\n  name=\"country-code\"\n  clear-input\n  select-placeholder=\"select country code\"\n  input-placeholder=\"Enter phone number\"\n  required\n  input-label=\"Support phone number\"\n  select-label=\"Country Code\"\n  hint-text=\"Input hint text\"\n  warning-text=\"select country code to get valid phonenumber\"\n  state=\"warning\"\n></fw-country-phone>\n  <fw-country-phone\n  value=\"+1264497275926449727599878978789798798789798798789787897987897897897878978978787897989878\"\n  name=\"country-code\"\n  clear-input\n  select-placeholder=\"select country code\"\n  input-placeholder=\"Enter phone number\"\n  required\n  input-label=\"Support phone number\"\n  select-label=\"Country Code\"\n  hint-text=\"Input hint text\"\n  error-text=\"Invalid Country Phone Number\"\n  state=\"error\"\n></fw-country-phone>\n```\n\n\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html\n<fw-country-phone\n    value=\"\"\n    name=\"country-code\"\n    clear-input\n    select-placeholder=\"select country code\"\n    input-placeholder=\"Enter phone number\"\n    required\n    input-label=\"Support phone number\"\n    select-label=\"Country Code\"\n    error-text=\"Error message text\"\n    warning-text=\"Please use numbers for user ID\"\n    state=\"normal\"\n  ></fw-country-phone>\n<fw-country-phone\n    value=\"+919999999999\"\n    name=\"country-code\"\n    clear-input\n    select-placeholder=\"select country code\"\n    input-placeholder=\"Enter phone number\"\n    required\n    input-label=\"Support phone number\"\n    select-label=\"Country Code\"\n    error-text=\"Error message text\"\n    warning-text=\"Please use numbers for user ID\"\n    state=\"normal\"\n    style=\"--fw-select-width: 0 0 400px\"\n  ></fw-country-phone>\n  <fw-country-phone\n    value=\"+919999999999\"\n    name=\"country-code\"\n    clear-input\n    select-placeholder=\"select country code\"\n    input-placeholder=\"Enter phone number\"\n    required\n    input-label=\"Support phone number\"\n    select-label=\"Country Code\"\n    hint-text=\"select country code to get valid phonenumber\"\n    warning-text=\"Please use numbers for user ID\"\n    state=\"normal\"\n  ></fw-country-phone>\n    <fw-country-phone\n  value=\"+1264497275926449727599878978789798798789798798789787897987897897897878978978787897989878\"\n  name=\"country-code\"\n  clear-input\n  select-placeholder=\"select country code\"\n  input-placeholder=\"Enter phone number\"\n  required\n  input-label=\"Support phone number\"\n  select-label=\"Country Code\"\n  hint-text=\"Input hint text\"\n  warning-text=\"select country code to get valid phonenumber\"\n  state=\"warning\"\n></fw-country-phone>\n  <fw-country-phone\n  value=\"+1264497275926449727599878978789798798789798798789787897987897897897878978978787897989878\"\n  name=\"country-code\"\n  clear-input\n  select-placeholder=\"select country code\"\n  input-placeholder=\"Enter phone number\"\n  required\n  input-label=\"Support phone number\"\n  select-label=\"Country Code\"\n  hint-text=\"Input hint text\"\n  error-text=\"Invalid Country Phone Number\"\n  state=\"error\"\n></fw-country-phone>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwCountryPhone } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n      <FwCountryPhone\n      value=\"+919999999999\"\n      name=\"country-code\"\n      clearInput\n      selectPlaceholder=\"select country code\"\n      inputPlaceholder=\"Enter phone number\"\n      required\n      inputLabel=\"Support phone number\"\n      selectLabel=\"Country Code\"\n      errorText=\"Error message text\"\n      warningText=\"Please use numbers for user ID\"\n      state=\"normal\">\n      </FwCountryPhone>\n      <FwCountryPhone\n      value=\"+919999999999\"\n      name=\"country-code\"\n      clearInput\n      selectPlaceholder=\"select country code\"\n      inputPlaceholder=\"Enter phone number\"\n      required\n      inputLabel=\"Support phone number\"\n      selectLabel=\"Country Code\"\n      hintText=\"select country code to get valid phonenumber\"\n      warningText=\"Please use numbers for user ID\"\n      state=\"normal\">\n      </FwCountryPhone>\n      <FwCountryPhone\n      value=\"+1264497275926449727599878978789798798789798798789787897987897897897878978978787897989878\"\n      name=\"country-code\"\n      clearInput\n      selectPlaceholder=\"select country code\"\n      inputPlaceholder=\"Enter phone number\"\n      required\n      inputLabel=\"Support phone number\"\n      selectLabel=\"Country Code\"\n      hintText=\"Input hint text\"\n      warningText=\"select country code to get valid phonenumber\"\n      state=\"warning\"\n      style={{\"--fw-select-width\": '0 0 300px'}}\n      >\n      </FwCountryPhone>\n      <FwCountryPhone\n      value=\"+1264497275926449727599878978789798798789798798789787897987897897897878978978787897989878\"\n      name=\"country-code\"\n      clearInput\n      selectPlaceholder=\"select country code\"\n      inputPlaceholder=\"Enter phone number\"\n      required\n      inputLabel=\"Support phone number\"\n      selectLabel=\"Country Code\"\n      hintText=\"Input hint text\"\n      errorText=\"Invalid Country Phone Number\"\n      state=\"error\">\n      </FwCountryPhone>\n </div>);\n```\n</code-block>\n</code-group>\n\n",
      "docs": "fw-country-phone displays a country code selector & input element for entering phone Number",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "clearInput",
          "type": "boolean",
          "mutable": false,
          "attr": "clear-input",
          "reflectToAttr": false,
          "docs": "Displays a right-justified clear icon in the text box. Clicking the icon clears the input text. If the attribute’s value is undefined, the value is set to false. For a read-only input box, the clear icon is not displayed unless a default value is specified for the input box.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "errorText",
          "type": "string",
          "mutable": false,
          "attr": "error-text",
          "reflectToAttr": false,
          "docs": "Error text displayed below the text box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideCountryFlag",
          "type": "boolean",
          "mutable": false,
          "attr": "hide-country-flag",
          "reflectToAttr": false,
          "docs": "Hide Country Flag in the Country Select",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideCountryName",
          "type": "boolean",
          "mutable": false,
          "attr": "hide-country-name",
          "reflectToAttr": false,
          "docs": "Hide Country Name in the Country Select",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hintText",
          "type": "string",
          "mutable": false,
          "attr": "hint-text",
          "reflectToAttr": false,
          "docs": "Hint text displayed below the text box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputLabel",
          "type": "string",
          "mutable": false,
          "attr": "input-label",
          "reflectToAttr": false,
          "docs": "* Label displayed on the interface, for the input component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "inputPlaceholder",
          "type": "string",
          "mutable": false,
          "attr": "input-placeholder",
          "reflectToAttr": false,
          "docs": "Text displayed in the text box before a user enters a value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If true, the user cannot enter a value in the input box. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectLabel",
          "type": "string",
          "mutable": false,
          "attr": "select-label",
          "reflectToAttr": false,
          "docs": "* Label displayed on the interface, for the input component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "selectPlaceholder",
          "type": "string",
          "mutable": false,
          "attr": "select-placeholder",
          "reflectToAttr": false,
          "docs": "Text displayed in the text box before a user enters a value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "state",
          "type": "\"error\" | \"normal\" | \"warning\"",
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "\nTheme based on which the text box is styled.",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "normal",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Default value displayed in the input box & select dropdown after extracting valid phone number",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "warningText",
          "type": "string",
          "mutable": false,
          "attr": "warning-text",
          "reflectToAttr": false,
          "docs": "Warning text displayed below the text box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "isValidPhoneNumber",
          "returns": {
            "type": "Promise<boolean>",
            "docs": "after validation PhoneNumber with countryCode"
          },
          "signature": "isValidPhoneNumber(value: string, countryCode: CountryCode) => Promise<boolean>",
          "parameters": [],
          "docs": "Checks PhoneNumber is Valid or Not",
          "docsTags": [
            {
              "name": "param",
              "text": "value PhoneNumber"
            },
            {
              "name": "param",
              "text": "countryCode"
            },
            {
              "name": "returns",
              "text": "after validation PhoneNumber with countryCode"
            }
          ]
        },
        {
          "name": "parsePhoneNumber",
          "returns": {
            "type": "Promise<any>",
            "docs": "{countryCode, countryCallingCode, nationalNumber,  number, metadata }"
          },
          "signature": "parsePhoneNumber(...args: any[]) => Promise<any>",
          "parameters": [],
          "docs": "Validates PhoneNumber provided and return extra details",
          "docsTags": [
            {
              "name": "param",
              "text": "value PhoneNumber"
            },
            {
              "name": "returns",
              "text": "{countryCode, countryCallingCode, nationalNumber,  number, metadata }"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "fwBlur",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when phone element is blur.",
          "docsTags": []
        },
        {
          "event": "fwFocus",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when input is focused.",
          "docsTags": []
        },
        {
          "event": "fwInput",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when phone element is input.",
          "docsTags": []
        },
        {
          "event": "fwInputClear",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when clear icon is clicked.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--fw-select-width",
          "annotation": "prop",
          "docs": "Adjust country code select dropdown width"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "fw-select",
        "fw-select-option",
        "fw-input"
      ],
      "dependencyGraph": {
        "fw-country-phone": [
          "fw-select",
          "fw-select-option",
          "fw-input"
        ],
        "fw-select": [
          "fw-tag",
          "fw-popover",
          "fw-button",
          "fw-spinner",
          "fw-icon",
          "fw-list-options"
        ],
        "fw-tag": [
          "fw-tooltip",
          "fw-avatar",
          "fw-icon"
        ],
        "fw-tooltip": [
          "fw-popover"
        ],
        "fw-button": [
          "fw-spinner",
          "fw-icon"
        ],
        "fw-list-options": [
          "fw-select-option",
          "fw-input"
        ],
        "fw-select-option": [
          "fw-icon",
          "fw-checkbox",
          "fw-avatar"
        ],
        "fw-checkbox": [
          "fw-icon"
        ],
        "fw-input": [
          "fw-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/data-table/custom-cells/anchor/custom-cell-anchor.tsx",
      "encapsulation": "shadow",
      "tag": "fw-custom-cell-anchor",
      "readme": "# fw-custom-cell-anchor\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "href",
          "type": "string",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "string",
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'_self'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-data-table"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "fw-data-table": [
          "fw-custom-cell-anchor"
        ]
      }
    },
    {
      "filePath": "./src/components/data-table/custom-cells/icon/custom-cell-icon.tsx",
      "encapsulation": "shadow",
      "tag": "fw-custom-cell-icon",
      "readme": "# fw-custom-cell-icon\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'#647A8E'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "library",
          "type": "string",
          "mutable": false,
          "attr": "library",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'crayons'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "number",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "18",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "src",
          "type": "any",
          "mutable": false,
          "attr": "src",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-data-table"
      ],
      "dependencies": [
        "fw-icon"
      ],
      "dependencyGraph": {
        "fw-custom-cell-icon": [
          "fw-icon"
        ],
        "fw-data-table": [
          "fw-custom-cell-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/data-table/custom-cells/paragraph/custom-cell-paragraph.tsx",
      "encapsulation": "shadow",
      "tag": "fw-custom-cell-paragraph",
      "readme": "# fw-custom-cell-paragraph\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "text",
          "type": "string",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "text to display inside the cell",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-data-table"
      ],
      "dependencies": [
        "fw-tooltip"
      ],
      "dependencyGraph": {
        "fw-custom-cell-paragraph": [
          "fw-tooltip"
        ],
        "fw-tooltip": [
          "fw-popover"
        ],
        "fw-data-table": [
          "fw-custom-cell-paragraph"
        ]
      }
    },
    {
      "filePath": "./src/components/data-table/custom-cells/user/custom-cell-user.tsx",
      "encapsulation": "shadow",
      "tag": "fw-custom-cell-user",
      "readme": "# fw-custom-cell-user\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "alt",
          "type": "string",
          "mutable": false,
          "attr": "alt",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "email",
          "type": "string",
          "mutable": false,
          "attr": "email",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "image",
          "type": "any",
          "mutable": false,
          "attr": "image",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-data-table"
      ],
      "dependencies": [
        "fw-avatar"
      ],
      "dependencyGraph": {
        "fw-custom-cell-user": [
          "fw-avatar"
        ],
        "fw-data-table": [
          "fw-custom-cell-user"
        ]
      }
    },
    {
      "filePath": "./src/components/data-table/data-table.tsx",
      "encapsulation": "shadow",
      "tag": "fw-data-table",
      "readme": "# DataTable (fw-data-table)\nfw-data-table are used for data visualization.\n\n## Basic Usage\n\n```html live\n  <fw-data-table id=\"datatable\" is-selectable=\"true\" label=\"Data table 1\">\n  </fw-data-table>\n\n  <script type=\"application/javascript\">\n    var data = {\n      columns: [{\n        \"key\": \"name\",\n        \"text\": \"Name\"\n      }, {\n        \"key\": \"group\",\n        \"text\": \"Group\"\n      }, {\n        \"key\": \"role\",\n        \"text\": \"Role\"\n      }],\n      persons: [{\n        \"id\": \"1234\",\n        \"name\": \"Alexander Goodman\", \n        \"role\": \"Administrator\", \n        \"group\": \"L1 Support\"\n      }, {\n        \"id\": \"2345\",\n        \"name\": \"Ambrose Wayne\", \n        \"role\": \"Supervisor\", \n        \"group\": \"L1 Support\"\n      }, {\n        \"id\": \"3456\",\n        \"name\": \"August hines\",\n        \"role\": \"Agent\",\n        \"group\": \"L1 support\"\n      }]\n    }\n\n    var datatable = document.getElementById('datatable');\n    datatable.columns = data.columns;\n    datatable.rows = data.persons;\n  </script>\n```\n\n<code-group>\n<code-block title=\"HTML\">\n```html \n  <fw-data-table id=\"datatable\" is-selectable=\"true\" label=\"Data table 1\">\n  </fw-data-table>\n```\n\n```javascript\n  var data = {\n    columns: [{\n      \"key\": \"name\",\n      \"text\": \"Name\"\n    }, {\n      \"key\": \"group\",\n      \"text\": \"Group\"\n    }, {\n      \"key\": \"role\",\n      \"text\": \"Role\"\n    }],\n    persons: [{\n      \"id\": \"1234\",\n      \"name\": \"Alexander Goodman\", \n      \"role\": \"Administrator\", \n      \"group\": \"L1 Support\"\n    }, {\n      \"id\": \"2345\",\n      \"name\": \"Ambrose Wayne\", \n      \"role\": \"Supervisor\", \n      \"group\": \"L1 Support\"\n    }, {\n      \"id\": \"3456\",\n      \"name\": \"August hines\",\n      \"role\": \"Agent\",\n      \"group\": \"L1 support\"\n    }]\n  }\n\n  var datatable = document.getElementById('datatable');\n  datatable.columns = data.columns;\n  datatable.rows = data.persons;\n```\n</code-block>\n\n<code-block title=\"React\">\n\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwDataTable } from \"@freshworks/crayons/react\";\nfunction App() {\n\n  let data = {\n      columns: [{\n        \"key\": \"name\",\n        \"text\": \"Name\"\n      }, {\n        \"key\": \"group\",\n        \"text\": \"Group\"\n      }, {\n        \"key\": \"role\",\n        \"text\": \"Role\"\n      }],\n      persons: [{\n        \"id\": \"1234\",\n        \"name\": \"Alexander Goodman\", \n        \"role\": \"Administrator\", \n        \"group\": \"L1 Support\"\n      }, {\n        \"id\": \"2345\",\n        \"name\": \"Ambrose Wayne\", \n        \"role\": \"Supervisor\", \n        \"group\": \"L1 Support\"\n      }, {\n        \"id\": \"3456\",\n        \"name\": \"August hines\",\n        \"role\": \"Agent\",\n        \"group\": \"L1 support\"\n      }]\n    };\n\n  return (\n    <FwDataTable columns={data.columns} rows={data.persons} label=\"Data Table 1\" isSelectable>\n    </FwDataTable>\n  );\n}\n```\n</code-block>\n</code-group>\n\n## Custom cells \n\n### Crayons provided variants\n\n#### Anchor column variant\n\nRow value for this column variant should be an object with the following properties:\n1. text - Text to be displayed in the cell\n2. href - url to point to when the text is clicked\n3. target - An optional argument specifying where to open the linked document. The possible values are:\n   - \\_blank - Opens the linked document in a new window or tab.\n   - \\_self - Opens the linked document in the same frame as it was clicked (this is default).\n   - \\_parent - Opens the linked document in the parent frame.\n   - \\_top - Opens the linked document in the full body of the window.\n   - framename - Opens the linked document in the named iframe.\n\n\n```html live\n  <fw-data-table id=\"datatable-2\" label=\"Data table 2\">\n  </fw-data-table>\n\n  <script type=\"application/javascript\">\n    var data = {\n      columns: [{\n        \"key\": \"search\",\n        \"text\": \"Search Engine\",\n        \"position\": 1,\n        \"variant\": \"anchor\"\n      }, {\n        \"key\": \"rank\",\n        \"text\": \"Rank\",\n        \"position\": 2\n      }],\n      rows: [{\n        \"id\": \"001\",\n        \"search\": { \"text\": \"Google\", \"href\": \"https://www.google.com\", \"target\": \"_blank\"},\n        \"rank\": 1\n      }, {\n        \"id\": \"002\",\n        \"search\": { \"text\": \"Bing\", \"href\": \"https://www.bing.com\" },\n        \"rank\": 2\n      }, {\n        \"id\": \"003\",\n        \"search\": { \"text\": \"DuckDuckGo\", \"href\": \"https://www.duckduckgo.com\" },\n        \"rank\": 3\n      }]\n    };\n\n    var datatable = document.getElementById('datatable-2');\n    datatable.columns = data.columns;\n    datatable.rows = data.rows;\n  </script>\n```\n\n<code-group>\n<code-block title=\"HTML\">\n```html \n  <fw-data-table id=\"datatable-2\" label=\"Data table 2\">\n  </fw-data-table>\n```\n\n```javascript\n  var data = {\n    columns: [{\n      \"key\": \"search\",\n      \"text\": \"Search Engine\",\n      \"position\": 1,\n      \"variant\": \"anchor\"\n    }, {\n      \"key\": \"rank\",\n      \"text\": \"Rank\",\n      \"position\": 2\n    }],\n    rows: [{\n      \"id\": \"001\",\n      \"search\": { \"text\": \"Google\", \"href\": \"https://www.google.com\", \"target\": \"_blank\"},\n      \"rank\": 1\n    }, {\n      \"id\": \"002\",\n      \"search\": { \"text\": \"Bing\", \"href\": \"https://www.bing.com\" },\n      \"rank\": 2\n    }, {\n      \"id\": \"003\",\n      \"search\": { \"text\": \"DuckDuckGo\", \"href\": \"https://www.duckduckgo.com\" },\n      \"rank\": 3\n    }]\n  };\n\n  var datatable = document.getElementById('datatable-2');\n  datatable.columns = data.columns;\n  datatable.rows = data.rows;\n```\n</code-block>\n\n<code-block title=\"React\">\n\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwDataTable } from \"@freshworks/crayons/react\";\nfunction App() {\n\n  var data = {\n    columns: [{\n      \"key\": \"search\",\n      \"text\": \"Search Engine\",\n      \"position\": 1,\n      \"variant\": \"anchor\"\n    }, {\n      \"key\": \"rank\",\n      \"text\": \"Rank\",\n      \"position\": 2\n    }],\n    rows: [{\n      \"id\": \"001\",\n      \"search\": { \"text\": \"Google\", \"href\": \"https://www.google.com\", \"target\": \"_blank\"},\n      \"rank\": 1\n    }, {\n      \"id\": \"002\",\n      \"search\": { \"text\": \"Bing\", \"href\": \"https://www.bing.com\" },\n      \"rank\": 2\n    }, {\n      \"id\": \"003\",\n      \"search\": { \"text\": \"DuckDuckGo\", \"href\": \"https://www.duckduckgo.com\" },\n      \"rank\": 3\n    }]\n  };\n\n  return (\n    <FwDataTable columns={data.columns} rows={data.rows} label=\"Data Table 2\">\n    </FwDataTable>\n  );\n}\n```\n</code-block>\n</code-group>\n\n#### User column variant\n\nRow value for this column variant should be an object with the following properties:\n1. name - Name of the user\n2. email - email of the user\n3. image (optional) - url of the user image to be displayed in the avatar\n\n*If image property is not present, user's initials from the name property will be shown inside the avatar.*\n\n```html live\n  <fw-data-table id=\"datatable-3\" label=\"Data table 3\">\n  </fw-data-table>\n  \n  <script type=\"application/javascript\">\n    var data = {\n      columns: [{\n        \"key\": \"createdby\",\n        \"text\": \"Created By\",\n        \"position\": 1,\n        \"variant\": \"user\"\n      }, {\n        \"key\": \"objectname\",\n        \"text\": \"Object Name\",\n        \"position\": 2\n      }],\n      rows: [{\n        \"id\": \"0011\",\n        \"objectname\": \"Hotels\",\n        \"createdby\": { \n          \"image\": \"https://images.unsplash.com/photo-1614644147798-f8c0fc9da7f6?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&q=80\",\n          \"name\": \"Alexander Goodman\", \n          \"email\": \"alexander.goodman@freshdesk.com\",\n          \"alt\": \"Profile picture of Alexander Goodman\"\n        }\n      }, {\n        \"id\": \"0022\",\n        \"objectname\": \"Bookings\",\n        \"createdby\": { \n          \"image\": \"https://images.unsplash.com/photo-1633332755192-727a05c4013d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&q=80\",\n          \"name\": \"Ambrose Wayne\", \n          \"email\": \"ambrose.wayne@freshdesk.com\",\n          \"alt\": \"Profile picture of Ambrose Wayne\"\n        }\n      }, {\n        \"id\": \"0033\",\n        \"objectname\": \"Ratings\",\n        \"createdby\": {\n          \"image\": \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&q=80\",\n          \"name\": \"August hines\", \n          \"email\": \"august.hines@freshdesk.com\",\n          \"alt\": \"Profile picture of August hines\"\n        }\n      }]\n    }; \n\n    var datatable = document.getElementById('datatable-3');\n    datatable.columns = data.columns;\n    datatable.rows = data.rows;\n  </script>\n```\n\n<code-group>\n<code-block title=\"HTML\">\n```html \n  <fw-data-table id=\"datatable-3\" label=\"Data table 3\">\n  </fw-data-table>\n```\n\n```javascript\n  var data = {\n    columns: [{\n      \"key\": \"createdby\",\n      \"text\": \"Created By\",\n      \"position\": 1,\n      \"variant\": \"user\"\n    }, {\n      \"key\": \"objectname\",\n      \"text\": \"Object Name\",\n      \"position\": 2\n    }],\n    rows: [{\n      \"id\": \"0011\",\n      \"objectname\": \"Hotels\",\n      \"createdby\": { \n        \"image\": \"https://images.unsplash.com/photo-1614644147798-f8c0fc9da7f6?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&q=80\",\n        \"name\": \"Alexander Goodman\", \n        \"email\": \"alexander.goodman@freshdesk.com\",\n        \"alt\": \"Profile picture of Alexander Goodman\"\n      }\n    }, {\n      \"id\": \"0022\",\n      \"objectname\": \"Bookings\",\n      \"createdby\": { \n        \"image\": \"https://images.unsplash.com/photo-1633332755192-727a05c4013d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&q=80\",\n        \"name\": \"Ambrose Wayne\", \n        \"email\": \"ambrose.wayne@freshdesk.com\",\n        \"alt\": \"Profile picture of Ambrose Wayne\"\n      }\n    }, {\n      \"id\": \"0033\",\n      \"objectname\": \"Ratings\",\n      \"createdby\": {\n        \"image\": \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&q=80\",\n        \"name\": \"August hines\", \n        \"email\": \"august.hines@freshdesk.com\",\n        \"alt\": \"Profile picture of August hines\"\n      }\n    }]\n  }; \n\n  var datatable = document.getElementById('datatable-3');\n  datatable.columns = data.columns;\n  datatable.rows = data.rows;\n```\n</code-block>\n\n<code-block title=\"React\">\n\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwDataTable } from \"@freshworks/crayons/react\";\nfunction App() {\n\n  var data = {\n    columns: [{\n      \"key\": \"createdby\",\n      \"text\": \"Created By\",\n      \"position\": 1,\n      \"variant\": \"user\"\n    }, {\n      \"key\": \"objectname\",\n      \"text\": \"Object Name\",\n      \"position\": 2\n    }],\n    rows: [{\n      \"id\": \"0011\",\n      \"objectname\": \"Hotels\",\n      \"createdby\": { \n        \"image\": \"https://images.unsplash.com/photo-1614644147798-f8c0fc9da7f6?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&q=80\",\n        \"name\": \"Alexander Goodman\", \n        \"email\": \"alexander.goodman@freshdesk.com\",\n        \"alt\": \"Profile picture of Alexander Goodman\"\n      }\n    }, {\n      \"id\": \"0022\",\n      \"objectname\": \"Bookings\",\n      \"createdby\": { \n        \"image\": \"https://images.unsplash.com/photo-1633332755192-727a05c4013d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&q=80\",\n        \"name\": \"Ambrose Wayne\", \n        \"email\": \"ambrose.wayne@freshdesk.com\",\n        \"alt\": \"Profile picture of Ambrose Wayne\"\n      }\n    }, {\n      \"id\": \"0033\",\n      \"objectname\": \"Ratings\",\n      \"createdby\": {\n        \"image\": \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=300&q=80\",\n        \"name\": \"August hines\", \n        \"email\": \"august.hines@freshdesk.com\",\n        \"alt\": \"Profile picture of August hines\"\n      }\n    }]\n  };\n\n  return (\n    <FwDataTable columns={data.columns} rows={data.rows} label=\"Data Table 3\">\n    </FwDataTable>\n  );\n}\n```\n</code-block>\n</code-group>\n\n#### Icon column variant\n\n```html live\n  <fw-data-table id=\"datatable-31\" label=\"Data table 31\">\n  </fw-data-table>\n\n  <script type=\"application/javascript\">\n    var data = {\n      columns: [{\n        \"key\": \"icon\",\n        \"text\": \"Icon\",\n        \"position\": 1,\n        \"variant\": \"icon\"\n      }, {\n        \"key\": \"name\",\n        \"text\": \"Icon name\",\n        \"position\": 2\n      }],\n      rows: [{\n        \"id\": \"0011\",\n        \"icon\": { \"name\": \"agent\" },\n        \"name\": \"Agent\"\n      }, {\n        \"id\": \"0022\",\n        \"icon\": { \"name\": \"chat-online\" },\n        \"name\": \"Chat\"\n      }]\n    }; \n\n    var datatable = document.getElementById('datatable-31');\n    datatable.columns = data.columns;\n    datatable.rows = data.rows;\n  </script>\n```\n\n<code-group>\n<code-block title=\"HTML\">\n```html \n  <fw-data-table id=\"datatable-31\" label=\"Data table 31\">\n  </fw-data-table>\n```\n\n```javascript\n  var data = {\n      columns: [{\n        \"key\": \"icon\",\n        \"text\": \"Icon\",\n        \"position\": 1,\n        \"variant\": \"icon\"\n      }, {\n        \"key\": \"name\",\n        \"text\": \"Icon name\",\n        \"position\": 2\n      }],\n      rows: [{\n        \"id\": \"0011\",\n        \"icon\": { \"name\": \"agent\" },\n        \"name\": \"Agent\"\n      }, {\n        \"id\": \"0022\",\n        \"icon\": { \"name\": \"chat-online\" },\n        \"name\": \"Chat\"\n      }]\n    }; \n\n  var datatable = document.getElementById('datatable-31');\n  datatable.columns = data.columns;\n  datatable.rows = data.rows;\n```\n</code-block>\n\n<code-block title=\"React\">\n\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwDataTable } from \"@freshworks/crayons/react\";\nfunction App() {\n\n  var data = {\n      columns: [{\n        \"key\": \"icon\",\n        \"text\": \"Icon\",\n        \"position\": 1,\n        \"variant\": \"icon\"\n      }, {\n        \"key\": \"name\",\n        \"text\": \"Icon name\",\n        \"position\": 2\n      }],\n      rows: [{\n        \"id\": \"0011\",\n        \"icon\": { \"name\": \"agent\" },\n        \"name\": \"Agent\"\n      }, {\n        \"id\": \"0022\",\n        \"icon\": { \"name\": \"chat-online\" },\n        \"name\": \"Chat\"\n      }]\n    }; \n\n  return (\n    <FwDataTable columns={data.columns} rows={data.rows} label=\"Data Table 31\">\n    </FwDataTable>\n  );\n}\n```\n</code-block>\n</code-group>\n\n\n#### Paragraph column variant\n\nWe can use this column variant when we have a bigger text and we need to trim/show this text. Row value for this column variant should be an object with the following properties:\n\n1. text: Paragraph to trim. Only first three lines from this paragraph would be visible initially. User has to expand to see the full text.\n\n```html live\n  <fw-data-table id=\"datatable-32\" label=\"Data table 32\">\n  </fw-data-table>\n  \n  <script type=\"application/javascript\">\n    var data = {\n      columns: [{\n        \"key\": \"objectname\",\n        \"text\": \"Object Name\"\n      }, {\n        \"key\": \"objectdesc\",\n        \"text\": \"Object Description\",\n        \"variant\": \"paragraph\",\n        \"widthProperties\": {\n          \"width\": \"600px\"\n        }\n      }],\n      rows: [{\n        \"id\": \"0011\",\n        \"objectname\": \"Hotels\",\n        \"objectdesc\": { \n          \"text\": \"Fusce nec nibh ut dui rutrum lobortis. In eu lacus molestie, dignissim erat sit amet, mollis tortor. Aliquam arcu felis, sollicitudin nec venenatis eu, fermentum sit amet ligula. Donec tempus lacus a malesuada pulvinar. In risus lorem, egestas non dui sed, tempus semper nisi. Proin blandit hendrerit suscipit. Phasellus eleifend diam sed mi ultrices, id consequat eros aliquet. Nunc gravida gravida auctor. Ut gravida accumsan justo non scelerisque. Aliquam blandit nisl a tincidunt ultricies.\" \n        }\n      }]\n    }; \n\n    var datatable = document.getElementById('datatable-32');\n    datatable.columns = data.columns;\n    datatable.rows = data.rows;\n  </script>\n```\n\n<code-group>\n<code-block title=\"HTML\">\n```html \n  <fw-data-table id=\"datatable-32\" label=\"Data table 32\">\n  </fw-data-table>\n```\n\n```javascript\n  var data = {\n    columns: [{\n      \"key\": \"objectname\",\n      \"text\": \"Object Name\"\n    }, {\n      \"key\": \"objectdesc\",\n      \"text\": \"Object Description\",\n      \"variant\": \"paragraph\",\n      \"widthProperties\": {\n        \"width\": \"600px\"\n      }\n    }],\n    rows: [{\n      \"id\": \"0011\",\n      \"objectname\": \"Hotels\",\n      \"objectdesc\": { \n        \"text\": \"Fusce nec nibh ut dui rutrum lobortis. In eu lacus molestie, dignissim erat sit amet, mollis tortor. Aliquam arcu felis, sollicitudin nec venenatis eu, fermentum sit amet ligula. Donec tempus lacus a malesuada pulvinar. In risus lorem, egestas non dui sed, tempus semper nisi. Proin blandit hendrerit suscipit. Phasellus eleifend diam sed mi ultrices, id consequat eros aliquet. Nunc gravida gravida auctor. Ut gravida accumsan justo non scelerisque. Aliquam blandit nisl a tincidunt ultricies.\" \n      }\n    }]\n  }; \n\n  var datatable = document.getElementById('datatable-32');\n  datatable.columns = data.columns;\n  datatable.rows = data.rows;\n```\n</code-block>\n\n<code-block title=\"React\">\n\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwDataTable } from \"@freshworks/crayons/react\";\nfunction App() {\n\n  var data = {\n    columns: [{\n      \"key\": \"objectname\",\n      \"text\": \"Object Name\"\n    }, {\n      \"key\": \"objectdesc\",\n      \"text\": \"Object Description\",\n      \"variant\": \"paragraph\",\n      \"widthProperties\": {\n        \"width\": \"600px\"\n      }\n    }],\n    rows: [{\n      \"id\": \"0011\",\n      \"objectname\": \"Hotels\",\n      \"objectdesc\": { \n        \"text\": \"Fusce nec nibh ut dui rutrum lobortis. In eu lacus molestie, dignissim erat sit amet, mollis tortor. Aliquam arcu felis, sollicitudin nec venenatis eu, fermentum sit amet ligula. Donec tempus lacus a malesuada pulvinar. In risus lorem, egestas non dui sed, tempus semper nisi. Proin blandit hendrerit suscipit. Phasellus eleifend diam sed mi ultrices, id consequat eros aliquet. Nunc gravida gravida auctor. Ut gravida accumsan justo non scelerisque. Aliquam blandit nisl a tincidunt ultricies.\" \n      }\n    }]\n  }; \n\n  return (\n    <FwDataTable columns={data.columns} rows={data.rows} label=\"Data Table 32\">\n    </FwDataTable>\n  );\n}\n```\n</code-block>\n</code-group>\n\n### Custom templates\n\nThis codeblock shows how to use custom cell function to display HTML content in a cell.\n\n*To have custom table headers, we can use 'customHeader' property. This will take in a function with parameters same as customTemplate.*\n\n``` js{4-6}\n  var columns = [{\n    \"key\": \"bookname\",\n    \"text\": \"Book name\",\n    \"customTemplate\": (createElement, props) => {\n      return createElement('b', {}, props.text);\n    }\n  }]\n```\n\n``` js\n  // Usage examples for createElement:\n  // Params should be either (tagName, children) or (tagName, properties, children)\n  createElement('div', [createElement('h2', 'Hello')]);\n  createElement('div#foo.bar.baz', [createElement('h2', 'Hello')]);\n  createElement('div.bar.baz', [createElement('h2', 'Hello')]);\n  createElement('div', {className: 'greeting'}, [createElement('h2', 'Hello')]);\n```\n\n## Column text alignment\n\nYou can set text alignment in the column by passing the textAlign in column configuration. In the below example, column 'Icon' is center aligned.\n\n```html live\n  <fw-data-table id=\"data-table-40\" label=\"Data table 40\">\n  </fw-data-table>\n\n  <script type=\"application/javascript\">\n    var data = {\n      columns: [{\n        \"key\": \"icon\",\n        \"text\": \"Icon\",\n        \"variant\": \"icon\",\n        \"textAlign\": \"center\",\n        \"widthProperties\": {\n          \"width\": \"140px\"\n        }\n      }, {\n        \"key\": \"name\",\n        \"text\": \"Object Name\"\n      }, {\n        \"key\": \"description\",\n        \"text\": \"description\"\n      }],\n      rows: [{\n        \"id\": \"01\",\n        \"icon\": { \"name\": \"company\" },\n        \"name\": \"Company\",\n        \"description\": \"Contains information about the company.\"\n      }, {\n        \"id\": \"02\",\n        \"icon\": { \"name\": \"calendar\" },\n        \"name\": \"Bookings\",\n        \"description\": \"Contains information about the booking made.\"\n      }]\n    };\n\n    var datatable = document.getElementById('data-table-40');\n    datatable.columns = data.columns;\n    datatable.rows = data.rows;\n  </script>\n```\n\n<code-group>\n<code-block title=\"HTML\">\n```html \n  <fw-data-table id=\"datatable-40\" label=\"Data table 40\">\n  </fw-data-table>\n```\n\n```javascript\n  var data = {\n    columns: [{\n      \"key\": \"icon\",\n      \"text\": \"Icon\",\n      \"variant\": \"icon\",\n      \"textAlign\": \"center\",\n      \"widthProperties\": {\n        \"width\": \"140px\"\n      }\n    }, {\n      \"key\": \"name\",\n      \"text\": \"Object Name\"\n    }, {\n      \"key\": \"description\",\n      \"text\": \"description\"\n    }],\n    rows: [{\n      \"id\": \"01\",\n      \"icon\": { \"name\": \"company\" },\n      \"name\": \"Company\",\n      \"description\": \"Contains information about the company.\"\n    }, {\n      \"id\": \"02\",\n      \"icon\": { \"name\": \"calendar\" },\n      \"name\": \"Bookings\",\n      \"description\": \"Contains information about the booking made.\"\n    }]\n  };\n\n  var datatable = document.getElementById('data-table-40');\n  datatable.columns = data.columns;\n  datatable.rows = data.rows;\n```\n</code-block>\n\n<code-block title=\"React\">\n\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwDataTable } from \"@freshworks/crayons/react\";\nfunction App() {\n\n  var data = {\n    columns: [{\n      \"key\": \"icon\",\n      \"text\": \"Icon\",\n      \"variant\": \"icon\",\n      \"textAlign\": \"center\",\n      \"widthProperties\": {\n        \"width\": \"140px\"\n      }\n    }, {\n      \"key\": \"name\",\n      \"text\": \"Object Name\"\n    }, {\n      \"key\": \"description\",\n      \"text\": \"description\"\n    }],\n    rows: [{\n      \"id\": \"01\",\n      \"icon\": { \"name\": \"company\" },\n      \"name\": \"Company\",\n      \"description\": \"Contains information about the company.\"\n    }, {\n      \"id\": \"02\",\n      \"icon\": { \"name\": \"calendar\" },\n      \"name\": \"Bookings\",\n      \"description\": \"Contains information about the booking made.\"\n    }]\n  };\n\n  return (\n    <FwDataTable columns={data.columns} rows={data.rows} label=\"Data Table 40\">\n    </FwDataTable>\n  );\n}\n```\n</code-block>\n</code-group>\n\n## Row Actions:\n\nYou can easily add an actions column by passing in rowActions prop to the component.\n\n*You can also use icons instead of text in buttons. Pass 'iconName' and 'iconLibrary' properties as part of configuration.*\n\n```html live\n  <fw-data-table id=\"datatable-4\"  is-selectable=\"true\" is-all-selectable=\"true\" label=\"Data table 4\">\n  </fw-data-table>\n\n  <script type=\"application/javascript\">\n    var data = {\n      columns: [{\n        \"key\": \"name\",\n        \"text\": \"Name\"\n      }, {\n        \"key\": \"role\",\n        \"text\": \"Role\"\n      }],\n      rows: [{\n        \"id\": \"0001\",\n        \"name\": \"Alexander Goodman\",\n        \"role\": \"Member\"\n      }, {\n        \"id\": \"0002\",\n        \"name\": \"Ambrose Wayne\",\n        \"role\": \"Member\"\n      }, {\n        \"id\": \"0003\",\n        \"name\": \"August hines\",\n        \"role\": \"Administrator\"\n      }],\n      rowActions: [{\n        \"name\": \"Alert\",\n        \"handler\": (rowData) => {\n          window.alert(rowData.name);\n        }\n      }, {\n        \"name\": \"Delete\",\n        \"handler\": async (rowData) => {\n          let deletePromise = new Promise((resolve, reject) => {\n            const dataTable = document.querySelector('#datatable-4');\n            setTimeout(() => {\n              if (dataTable) {\n                dataTable.rows = dataTable.rows.filter((row) => (row.id !== rowData.id));\n                resolve();\n              } else {\n                reject();\n              }\n            }, 3000); \n          });\n          await deletePromise;\n        },\n        \"hideForRowIds\": [\"0003\"]\n      }]\n    }\n\n    var datatable4 = document.getElementById('datatable-4');\n    datatable4.columns = data.columns;\n    datatable4.rows = data.rows;\n    datatable4.rowActions = data.rowActions;\n  </script>\n```\n\n<code-group>\n<code-block title=\"HTML\">\n\n```html\n  <fw-data-table id=\"datatable-4\"  is-selectable=\"true\" is-all-selectable=\"true\" label=\"Data table 4\">\n  </fw-data-table>\n```\n\n```javascript\n  var data = {\n    columns: [{\n      \"key\": \"name\",\n      \"text\": \"Name\"\n    }, {\n      \"key\": \"role\",\n      \"text\": \"Role\"\n    }],\n    rows: [{\n      \"id\": \"0001\",\n      \"name\": \"Alexander Goodman\",\n      \"role\": \"Member\"\n    }, {\n      \"id\": \"0002\",\n      \"name\": \"Ambrose Wayne\",\n      \"role\": \"Member\"\n    }, {\n      \"id\": \"0003\",\n      \"name\": \"August hines\",\n      \"role\": \"Administrator\"\n    }],\n    rowActions: [{\n      \"name\": \"Alert\",\n      \"handler\": (rowData) => {\n        window.alert(rowData.name);\n      }\n    }, {\n      \"name\": \"Delete\",\n      \"handler\": async (rowData) => {\n        let deletePromise = new Promise((resolve, reject) => {\n          const dataTable = document.querySelector('#datatable-4');\n          setTimeout(() => {\n            if (dataTable) {\n              dataTable.rows = dataTable.rows.filter((row) => (row.id !== rowData.id));\n              resolve();\n            } else {\n              reject();\n            }\n          }, 3000); \n        });\n        await deletePromise;\n      },\n      \"hideForRowIds\": [\"0003\"]\n    }]\n  }\n\n  var datatable4 = document.getElementById('datatable-4');\n  datatable4.columns = data.columns;\n  datatable4.rows = data.rows;\n  datatable4.rowActions = data.rowActions;\n```\n\n</code-block>\n\n<code-block title=\"React\">\n\n```jsx\n  import React from \"react\";\n  import ReactDOM from \"react-dom\";\n  import { FwDataTable } from \"@freshworks/crayons/react\";\n  function App() {\n\n    var data = {\n      columns: [{\n        \"key\": \"name\",\n        \"text\": \"Name\"\n      }, {\n        \"key\": \"role\",\n        \"text\": \"Role\"\n      }],\n      rows: [{\n        \"id\": \"0001\",\n        \"name\": \"Alexander Goodman\",\n        \"role\": \"Member\"\n      }, {\n        \"id\": \"0002\",\n        \"name\": \"Ambrose Wayne\",\n        \"role\": \"Member\"\n      }, {\n        \"id\": \"0003\",\n        \"name\": \"August hines\",\n        \"role\": \"Administrator\"\n      }],\n      rowActions: [{\n        \"name\": \"Alert\",\n        \"handler\": (rowData) => {\n          window.alert(rowData.name);\n        }\n      }, {\n        \"name\": \"Delete\",\n        \"handler\": async (rowData) => {\n          let deletePromise = new Promise((resolve, reject) => {\n            const dataTable = document.querySelector('#datatable-4');\n            setTimeout(() => {\n              if (dataTable) {\n                dataTable.rows = dataTable.rows.filter((row) => (row.id !== rowData.id));\n                resolve();\n              } else {\n                reject();\n              }\n            }, 3000); \n          });\n          await deletePromise;\n        },\n        \"hideForRowIds\": [\"0003\"]\n      }]\n    }\n\n    return (\n      <FwDataTable columns={data.columns} rows={data.rows} rowActions={data.rowActions} label=\"Data Table 3\">\n      </FwDataTable>\n    );\n  }\n```\n\n</code-block>\n</code-group>\n\n## Hide columns\n\nTo hide certain columns, we can pass the 'hide' property set to true in the column's configuration.\n\n```html live\n  <span>'Role' column hidden in below table.</span> <br><br>\n  <fw-data-table id=\"datatable-5\" label=\"Data table 5\">\n  </fw-data-table>\n\n  <script type=\"application/javascript\">\n    var data = {\n      columns: [{\n        \"key\": \"name\",\n        \"text\": \"Name\"\n      }, {\n        \"key\": \"role\",\n        \"text\": \"Role\",\n        \"hide\": true\n      }],\n      rows: [{\n        \"id\": \"0001\",\n        \"name\": \"Alexander Goodman\",\n        \"role\": \"Member\"\n      }, {\n        \"id\": \"0002\",\n        \"name\": \"Ambrose Wayne\",\n        \"role\": \"Member\"\n      }]\n    }\n\n    var datatable5 = document.getElementById('datatable-5');\n    datatable5.columns = data.columns;\n    datatable5.rows = data.rows;\n  </script>\n```\n\n<code-group>\n<code-block title=\"HTML\">\n\n```html\n  <fw-data-table id=\"datatable-5\" label=\"Data table 5\">\n  </fw-data-table>\n```\n\n```javascript\n  var data = {\n    columns: [{\n      \"key\": \"name\",\n      \"text\": \"Name\"\n    }, {\n      \"key\": \"role\",\n      \"text\": \"Role\",\n      \"hide\": true\n    }],\n    rows: [{\n      \"id\": \"0001\",\n      \"name\": \"Alexander Goodman\",\n      \"role\": \"Member\"\n    }, {\n      \"id\": \"0002\",\n      \"name\": \"Ambrose Wayne\",\n      \"role\": \"Member\"\n    }]\n  }\n\n  var datatable5 = document.getElementById('datatable-5');\n  datatable5.columns = data.columns;\n  datatable5.rows = data.rows;\n```\n\n</code-block>\n\n<code-block title=\"React\">\n\n```jsx\n  import React from \"react\";\n  import ReactDOM from \"react-dom\";\n  import { FwDataTable } from \"@freshworks/crayons/react\";\n  function App() {\n\n    var data = {\n      columns: [{\n        \"key\": \"name\",\n        \"text\": \"Name\"\n      }, {\n        \"key\": \"role\",\n        \"text\": \"Role\",\n        \"hide\": true\n      }],\n      rows: [{\n        \"id\": \"0001\",\n        \"name\": \"Alexander Goodman\",\n        \"role\": \"Member\"\n      }, {\n        \"id\": \"0002\",\n        \"name\": \"Ambrose Wayne\",\n        \"role\": \"Member\"\n      }]\n    }\n\n    return (\n      <FwDataTable columns={data.columns} rows={data.rows} label=\"Data Table 5\">\n      </FwDataTable>\n    );\n  }\n```\n\n</code-block>\n</code-group>\n\n## Column lock\n\nWe can lock column using 'lock' in column's configuration. \n\n```html live\n  <fw-data-table id=\"datatable-51\" label=\"Data table 51\" show-settings=\"true\">\n  </fw-data-table>\n\n  <script type=\"application/javascript\">\n    var data = {\n      columns: [{\n        \"key\": \"name\",\n        \"text\": \"Name\",\n        \"lock\": true\n      }, {\n        \"key\": \"role\",\n        \"text\": \"Role\"\n      }],\n      rows: [{\n        \"id\": \"0001\",\n        \"name\": \"Alexander Goodman\",\n        \"role\": \"Member\"\n      }]\n    }\n\n    var datatable51 = document.getElementById('datatable-51');\n    datatable51.columns = data.columns;\n    datatable51.rows = data.rows;\n  </script>\n```\n\n<code-group>\n<code-block title=\"HTML\">\n\n```html\n  <fw-data-table id=\"datatable-51\" label=\"Data table 51\" show-settings=\"true\">\n  </fw-data-table>\n```\n\n```javascript\n  var data = {\n    columns: [{\n      \"key\": \"name\",\n      \"text\": \"Name\",\n      \"lock\": true\n    }, {\n      \"key\": \"role\",\n      \"text\": \"Role\"\n    }],\n    rows: [{\n      \"id\": \"0001\",\n      \"name\": \"Alexander Goodman\",\n      \"role\": \"Member\"\n    }]\n  }\n\n  var datatable51 = document.getElementById('datatable-51');\n  datatable51.columns = data.columns;\n  datatable51.rows = data.rows;\n```\n\n</code-block>\n\n<code-block title=\"React\">\n\n```jsx\n  import React from \"react\";\n  import ReactDOM from \"react-dom\";\n  import { FwDataTable } from \"@freshworks/crayons/react\";\n  function App() {\n\n    var data = {\n      columns: [{\n        \"key\": \"name\",\n        \"text\": \"Name\",\n        \"lock\": true\n      }, {\n        \"key\": \"role\",\n        \"text\": \"Role\"\n      }],\n      rows: [{\n        \"id\": \"0001\",\n        \"name\": \"Alexander Goodman\",\n        \"role\": \"Member\"\n      }]\n    }\n\n    return (\n      <FwDataTable columns={data.columns} rows={data.rows} label=\"Data Table 51\" showSettings>\n      </FwDataTable>\n    );\n  }\n```\n\n</code-block>\n</code-group>\n\n## Column width\n\nWe can pass width for every column using 'widthProperties' in column's configuration. Every column has a minimum width of 40px and maximum width of 1000px by default. We can override min/max width for every column using the 'widthProperties' too.\n\n```html live\n  <span>'Name' column has 400px width and 'Role' column has 200px width.</span> <br><br>\n  <fw-data-table id=\"datatable-6\" label=\"Data table 6\">\n  </fw-data-table>\n\n  <script type=\"application/javascript\">\n    var data = {\n      columns: [{\n        \"key\": \"name\",\n        \"text\": \"Name\",\n        \"widthProperties\": {\n          \"minWidth\": \"400px\"\n        }\n      }, {\n        \"key\": \"role\",\n        \"text\": \"Role\",\n        \"widthProperties\": {\n          \"width\": \"200px\"\n        }\n      }, {\n        \"key\": \"level\",\n        \"text\": \"Level\"\n      }],\n      rows: [{\n        \"id\": \"0001\",\n        \"name\": \"Alexander Goodman\",\n        \"role\": \"Member\",\n        \"level\": \"L1\"\n      }, {\n        \"id\": \"0002\",\n        \"name\": \"Ambrose Wayne\",\n        \"role\": \"Member\",\n        \"level\": \"L2\"\n      }]\n    }\n\n    var datatable6 = document.getElementById('datatable-6');\n    datatable6.columns = data.columns;\n    datatable6.rows = data.rows;\n  </script>\n```\n\n<code-group>\n<code-block title=\"HTML\">\n\n```html\n  <fw-data-table id=\"datatable-6\" label=\"Data table 6\">\n  </fw-data-table>\n```\n\n```javascript\n  var data = {\n      columns: [{\n        \"key\": \"name\",\n        \"text\": \"Name\",\n        \"widthProperties\": {\n          \"minWidth\": \"400px\"\n        }\n      }, {\n        \"key\": \"role\",\n        \"text\": \"Role\",\n        \"widthProperties\": {\n          \"width\": \"200px\"\n        }\n      }, {\n        \"key\": \"level\",\n        \"text\": \"Level\"\n      }],\n      rows: [{\n        \"id\": \"0001\",\n        \"name\": \"Alexander Goodman\",\n        \"role\": \"Member\",\n        \"level\": \"L1\"\n      }, {\n        \"id\": \"0002\",\n        \"name\": \"Ambrose Wayne\",\n        \"role\": \"Member\",\n        \"level\": \"L2\"\n      }]\n    }\n\n  var datatable6 = document.getElementById('datatable-6');\n  datatable6.columns = data.columns;\n  datatable6.rows = data.rows;\n```\n\n</code-block>\n\n<code-block title=\"React\">\n\n```jsx\n  import React from \"react\";\n  import ReactDOM from \"react-dom\";\n  import { FwDataTable } from \"@freshworks/crayons/react\";\n  function App() {\n\n    var data = {\n      columns: [{\n        \"key\": \"name\",\n        \"text\": \"Name\",\n        \"widthProperties\": {\n          \"minWidth\": \"400px\"\n        }\n      }, {\n        \"key\": \"role\",\n        \"text\": \"Role\",\n        \"widthProperties\": {\n          \"width\": \"200px\"\n        }\n      }, {\n        \"key\": \"level\",\n        \"text\": \"Level\"\n      }],\n      rows: [{\n        \"id\": \"0001\",\n        \"name\": \"Alexander Goodman\",\n        \"role\": \"Member\",\n        \"level\": \"L1\"\n      }, {\n        \"id\": \"0002\",\n        \"name\": \"Ambrose Wayne\",\n        \"role\": \"Member\",\n        \"level\": \"L2\"\n      }]\n    }\n\n    return (\n      <FwDataTable columns={data.columns} rows={data.rows} label=\"Data Table 6\">\n      </FwDataTable>\n    );\n  }\n```\n\n</code-block>\n</code-group>\n\n## Formatting data \n\nWe can format row's data before rendering into a cell by passing 'formatData' in column's configuration. \n\n*This option wont work when using this with 'variant' or 'customTemplate' properties in column's configuration.*\n\n```html live\n  <fw-data-table id=\"datatable-7\" label=\"Data table 7\">\n  </fw-data-table>\n\n  <script type=\"application/javascript\">\n    var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\n    var data = {\n      columns: [{\n        \"key\": \"name\",\n        \"text\": \"Name\"\n      }, {\n        \"key\": \"courses\",\n        \"text\": \"Courses\",\n        \"formatData\": (courses) => {\n          return courses.join(', ');\n        }\n      }, {\n        \"key\": \"appliedon\",\n        \"text\": \"Applied on\",\n        \"formatData\": (ISOString) => {\n          const date = new Date(ISOString);\n          return date.getDate() + \" \" + months[date.getMonth()] + \", \" + date.getFullYear();\n        }\n      }],\n      rows: [{\n        \"id\": \"0001\",\n        \"name\": \"Alexander Goodman\",\n        \"courses\": [\"HTML\", \"CSS\", \"JS\"],\n        \"appliedon\": \"2021-10-21T14:48:00.000Z\"\n      }, {\n        \"id\": \"0002\",\n        \"name\": \"Ambrose Wayne\",\n        \"courses\": [\"Ruby on Rails\", \"PostgreSQL\"],\n        \"appliedon\": \"2022-01-14T16:14:00.000Z\"\n      }]\n    }\n\n    var datatable7 = document.getElementById('datatable-7');\n    datatable7.columns = data.columns;\n    datatable7.rows = data.rows;\n  </script>\n```\n\n<code-group>\n<code-block title=\"HTML\">\n\n```html\n  <fw-data-table id=\"datatable-7\" label=\"Data table 7\">\n  </fw-data-table>\n```\n\n```javascript\n  var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\n  var data = {\n    columns: [{\n      \"key\": \"name\",\n      \"text\": \"Name\"\n    }, {\n      \"key\": \"courses\",\n      \"text\": \"Courses\",\n      \"formatData\": (courses) => {\n        return courses.join(', ');\n      }\n    }, {\n      \"key\": \"appliedon\",\n      \"text\": \"Applied on\",\n      \"formatData\": (ISOString) => {\n        const date = new Date(ISOString);\n        return date.getDate() + \" \" + months[date.getMonth()] + \", \" + date.getFullYear();\n      }\n    }],\n    rows: [{\n      \"id\": \"0001\",\n      \"name\": \"Alexander Goodman\",\n      \"courses\": [\"HTML\", \"CSS\", \"JS\"],\n      \"appliedon\": \"2021-10-21T14:48:00.000Z\"\n    }, {\n      \"id\": \"0002\",\n      \"name\": \"Ambrose Wayne\",\n      \"courses\": [\"Ruby on Rails\", \"PostgreSQL\"],\n      \"appliedon\": \"2022-01-14T16:14:00.000Z\"\n    }]\n  }\n\n  var datatable7 = document.getElementById('datatable-7');\n  datatable7.columns = data.columns;\n  datatable7.rows = data.rows;\n```\n\n</code-block>\n\n<code-block title=\"React\">\n\n```jsx\n  import React from \"react\";\n  import ReactDOM from \"react-dom\";\n  import { FwDataTable } from \"@freshworks/crayons/react\";\n  function App() {\n\n    var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\n    var data = {\n      columns: [{\n        \"key\": \"name\",\n        \"text\": \"Name\"\n      }, {\n        \"key\": \"courses\",\n        \"text\": \"Courses\",\n        \"formatData\": (courses) => {\n          return courses.join(', ');\n        }\n      }, {\n        \"key\": \"appliedon\",\n        \"text\": \"Applied on\",\n        \"formatData\": (ISOString) => {\n          const date = new Date(ISOString);\n          return date.getDate() + \" \" + months[date.getMonth()] + \", \" + date.getFullYear();\n        }\n      }],\n      rows: [{\n        \"id\": \"0001\",\n        \"name\": \"Alexander Goodman\",\n        \"courses\": [\"HTML\", \"CSS\", \"JS\"],\n        \"appliedon\": \"2021-10-21T14:48:00.000Z\"\n      }, {\n        \"id\": \"0002\",\n        \"name\": \"Ambrose Wayne\",\n        \"courses\": [\"Ruby on Rails\", \"PostgreSQL\"],\n        \"appliedon\": \"2022-01-14T16:14:00.000Z\"\n      }]\n    }\n\n    return (\n      <FwDataTable columns={data.columns} rows={data.rows} label=\"Data Table 7\">\n      </FwDataTable>\n    );\n  }\n```\n\n</code-block>\n</code-group>\n\n## Table settings\n\nTable settings help with reordering and hide/show of columns. To enable table settings, pass the 'show-settings' prop to the table.\n\n```html live \n  <fw-data-table id=\"datatable-8\" label=\"Data table 8\" show-settings=\"true\">\n  </fw-data-table>\n\n  <script type=\"application/javascript\">\n    var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\n    var data = {\n      columns: [{\n        \"key\": \"name\",\n        \"text\": \"Name\"\n      }, {\n        \"key\": \"courses\",\n        \"text\": \"Courses\",\n        \"formatData\": (courses) => {\n          return courses.join(', ');\n        }\n      }, {\n        \"key\": \"appliedon\",\n        \"text\": \"Applied on\",\n        \"formatData\": (ISOString) => {\n          const date = new Date(ISOString);\n          return date.getDate() + \" \" + months[date.getMonth()] + \", \" + date.getFullYear();\n        }\n      }],\n      rows: [{\n        \"id\": \"0001\",\n        \"name\": \"Alexander Goodman\",\n        \"courses\": [\"HTML\", \"CSS\", \"JS\"],\n        \"appliedon\": \"2021-10-21T14:48:00.000Z\"\n      }, {\n        \"id\": \"0002\",\n        \"name\": \"Ambrose Wayne\",\n        \"courses\": [\"Ruby on Rails\", \"PostgreSQL\"],\n        \"appliedon\": \"2022-01-14T16:14:00.000Z\"\n      }]\n    }\n\n    var datatable8 = document.getElementById('datatable-8');\n    datatable8.columns = data.columns;\n    datatable8.rows = data.rows;\n  </script>\n```\n\n<code-group>\n<code-block title=\"HTML\">\n\n```html\n  <fw-data-table id=\"datatable-8\" label=\"Data table 8\" show-settings=\"true\">\n  </fw-data-table>\n```\n\n```javascript\n  var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\n  var data = {\n    columns: [{\n      \"key\": \"name\",\n      \"text\": \"Name\"\n    }, {\n      \"key\": \"courses\",\n      \"text\": \"Courses\",\n      \"formatData\": (courses) => {\n        return courses.join(', ');\n      } \n    }, {\n      \"key\": \"appliedon\",\n      \"text\": \"Applied on\",\n      \"formatData\": (ISOString) => {\n        const date = new Date(ISOString);\n        return date.getDate() + \" \" + months[date.getMonth()] + \", \" + date.getFullYear();\n      }\n    }],\n    rows: [{\n      \"id\": \"0001\",\n      \"name\": \"Alexander Goodman\",\n      \"courses\": [\"HTML\", \"CSS\", \"JS\"],\n      \"appliedon\": \"2021-10-21T14:48:00.000Z\"\n    }, {\n      \"id\": \"0002\",\n      \"name\": \"Ambrose Wayne\",\n      \"courses\": [\"Ruby on Rails\", \"PostgreSQL\"],\n      \"appliedon\": \"2022-01-14T16:14:00.000Z\"\n    }]\n  }\n\n  var datatable8 = document.getElementById('datatable-8');\n  datatable8.columns = data.columns;\n  datatable8.rows = data.rows;\n```\n\n</code-block>\n\n<code-block title=\"React\">\n\n```jsx\n  import React from \"react\";\n  import ReactDOM from \"react-dom\";\n  import { FwDataTable } from \"@freshworks/crayons/react\";\n  function App() {\n\n    var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\n    var data = {\n      columns: [{\n        \"key\": \"name\",\n        \"text\": \"Name\"\n      }, {\n        \"key\": \"courses\",\n        \"text\": \"Courses\",\n        \"formatData\": (courses) => {\n          return courses.join(', ');\n        }\n      }, {\n        \"key\": \"appliedon\",\n        \"text\": \"Applied on\",\n        \"formatData\": (ISOString) => {\n          const date = new Date(ISOString);\n          return date.getDate() + \" \" + months[date.getMonth()] + \", \" + date.getFullYear();\n        }\n      }],\n      rows: [{\n        \"id\": \"0001\",\n        \"name\": \"Alexander Goodman\",\n        \"courses\": [\"HTML\", \"CSS\", \"JS\"],\n        \"appliedon\": \"2021-10-21T14:48:00.000Z\"\n      }, {\n        \"id\": \"0002\",\n        \"name\": \"Ambrose Wayne\",\n        \"courses\": [\"Ruby on Rails\", \"PostgreSQL\"],\n        \"appliedon\": \"2022-01-14T16:14:00.000Z\"\n      }]\n    }\n\n    return (\n      <FwDataTable columns={data.columns} rows={data.rows} showSettings={true} label=\"Data Table 8\">\n      </FwDataTable>\n    );\n  }\n```\n\n</code-block>\n</code-group>\n\n\n## Loading table\n\nWe can load a table using the 'loadTable' method available on the table. \n\n```html live\n  <div style=\"width: 590px;\">\n     <span>\n      <fw-toggle id=\"toggle-table\" size=\"medium\"></fw-toggle>\n      <span class=\"fw-ml-8\">Load table</span>\n    </span>\n    <br><br>\n    <fw-data-table id=\"datatable-9\"  is-selectable=\"true\" is-all-selectable=\"true\" label=\"Data table 9\">\n    </fw-data-table>\n  </div>\n\n  <script type=\"application/javascript\">\n    var data = {\n      columns: [{\n        \"key\": \"name\",\n        \"text\": \"Name\",\n        \"widthProperties\": {\n          \"width\": \"200px\"\n        }\n      }, {\n        \"key\": \"role\",\n        \"text\": \"Role\",\n        \"widthProperties\": {\n          \"width\": \"200px\"\n        }\n      }],\n      rows: [{\n        \"id\": \"0001\",\n        \"name\": \"Alexander Goodman\",\n        \"role\": \"Member\"\n      }],\n      rowActions: [{\n        \"name\": \"Alert\",\n        \"handler\": (rowData) => {\n          window.alert(rowData.name);\n        }\n      }, {\n        \"name\": \"Delete\",\n        \"handler\": async (rowData) => {\n          let deletePromise = new Promise((resolve, reject) => {\n            const dataTable = document.querySelector('#datatable-4');\n            setTimeout(() => {\n              if (dataTable) {\n                dataTable.rows = dataTable.rows.filter((row) => (row.id !== rowData.id));\n                resolve();\n              } else {\n                reject();\n              }\n            }, 3000); \n          });\n          await deletePromise;\n        },\n        \"hideForRowIds\": [\"0003\"]\n      }],\n      actionsColumn: { \"width\": \"150px\" }\n    }\n\n    var datatable9 = document.getElementById('datatable-9');\n    datatable9.columns = data.columns;\n    datatable9.rows = data.rows;\n    datatable9.rowActions = data.rowActions;\n    datatable9.actionsColumnProperties = data.actionsColumn;\n\n    var toggle = document.getElementById('toggle-table');\n    toggle.addEventListener('fwChange', (event) => {\n        datatable9.loadTable(event.detail.checked);\n    });\n  </script>\n```\n\n<code-group>\n<code-block title=\"HTML\">\n\n```html\n  <div style=\"width: 590px;\">\n     <span>\n      <fw-toggle id=\"toggle-table\" size=\"medium\"></fw-toggle>\n      <span class=\"fw-ml-8\">Load table</span>\n    </span>\n    <br><br>\n    <fw-data-table id=\"datatable-9\"  is-selectable=\"true\" is-all-selectable=\"true\" label=\"Data table 9\">\n    </fw-data-table>\n  </div>\n```\n\n```javascript\n  var data = {\n    columns: [{\n      \"key\": \"name\",\n      \"text\": \"Name\",\n      \"widthProperties\": {\n        \"width\": \"300px\"\n      }\n    }, {\n      \"key\": \"role\",\n      \"text\": \"Role\",\n      \"widthProperties\": {\n        \"width\": \"300px\"\n      }\n    }],\n    rows: [{\n      \"id\": \"0001\",\n      \"name\": \"Alexander Goodman\",\n      \"role\": \"Member\"\n    }],\n    rowActions: [{\n      \"name\": \"Alert\",\n      \"handler\": (rowData) => {\n        window.alert(rowData.name);\n      }\n    }, {\n      \"name\": \"Delete\",\n      \"handler\": async (rowData) => {\n        let deletePromise = new Promise((resolve, reject) => {\n          const dataTable = document.querySelector('#datatable-4');\n          setTimeout(() => {\n            if (dataTable) {\n              dataTable.rows = dataTable.rows.filter((row) => (row.id !== rowData.id));\n              resolve();\n            } else {\n              reject();\n            }\n          }, 3000); \n        });\n        await deletePromise;\n      },\n      \"hideForRowIds\": [\"0003\"]\n    }]\n  }\n\n  var datatable9 = document.getElementById('datatable-9');\n  datatable9.columns = data.columns;\n  datatable9.rows = data.rows;\n  datatable9.rowActions = data.rowActions;\n\n  var toggle = document.getElementById('toggle-table');\n  toggle.addEventListener('fwChange', (event) => {\n      datatable9.loadTable(event.detail.checked);\n  });\n```\n\n</code-block>\n\n<code-block title=\"React\">\n\n```jsx\n  import React, { useRef } from \"react\";\n  import ReactDOM from \"react-dom\";\n  import { FwDataTable } from \"@freshworks/crayons/react\";\n  function App() {\n\n    var dataTable = useRef(null);\n\n    var toggle = (event) => {\n      dataTable.current.loadTable(event.detail.checked);\n    }\n\n    var data = {\n      columns: [{\n        \"key\": \"name\",\n        \"text\": \"Name\",\n        \"widthProperties\": {\n          \"width\": \"300px\"\n        }\n      }, {\n        \"key\": \"role\",\n        \"text\": \"Role\",\n        \"widthProperties\": {\n          \"width\": \"300px\"\n        }\n      }],\n      rows: [{\n        \"id\": \"0001\",\n        \"name\": \"Alexander Goodman\",\n        \"role\": \"Member\"\n      }],\n      rowActions: [{\n        \"name\": \"Alert\",\n        \"handler\": (rowData) => {\n          window.alert(rowData.name);\n        }\n      }, {\n        \"name\": \"Delete\",\n        \"handler\": async (rowData) => {\n          let deletePromise = new Promise((resolve, reject) => {\n            const dataTable = document.querySelector('#datatable-4');\n            setTimeout(() => {\n              if (dataTable) {\n                dataTable.rows = dataTable.rows.filter((row) => (row.id !== rowData.id));\n                resolve();\n              } else {\n                reject();\n              }\n            }, 3000); \n          });\n          await deletePromise;\n        },\n        \"hideForRowIds\": [\"0003\"]\n      }]\n    }\n\n    return (\n      <>\n        <FwToggle onFwChange={toggle}></FwToggle><br></br>\n        <FwDataTable columns={data.columns} rows={data.rows} rowActions={data.rowActions} isSelectable  label=\"Data Table 2\" ref={dataTable}>\n        </FwDataTable>\n      </>\n    );\n  }\n```\n\n</code-block>\n</code-group>\n\n## Saving column configuration\n\nFor auto saving configuration into localStorage, you can add 'autoSaveSettings' prop to the table.\n\n```html\n  <data-table id=\"data-table-10\" label=\"data table 10\" auto-save-settings=\"true\"> \n  </data-table>\n```\n\nData table exposes couple of method to get and set column configuration.\n\n``` js{2-3}\n  let dataTable = document.querySelector('data-table#config');\n  // getColumnConfig helps retrive configuration in JSON format\n  let dataTableConfiguration = dataTable.getTableSettings(); \n  // setColumnConfig helps set the configuration. \n  dataTable.setTableSettings(dataTableConfiguration); \n```\n",
      "docs": "fw-data-table are used for data visualization.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "autoSaveSettings",
          "type": "boolean",
          "mutable": false,
          "attr": "auto-save-settings",
          "reflectToAttr": false,
          "docs": "autoSaveSettings to enable auto saving of table settings to `localstorage`.\nIf set to `true`, make sure `id` attribute is also set to the `data-table`",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "columns",
          "type": "DataTableColumn[]",
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Columns Array of objects that provides information regarding the columns in the table.",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "DataTableColumn[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isAllSelectable",
          "type": "boolean",
          "mutable": false,
          "attr": "is-all-selectable",
          "reflectToAttr": false,
          "docs": "isAllSelectable Boolean based on which select all option appears in the table header",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isLoading",
          "type": "boolean",
          "mutable": true,
          "attr": "is-loading",
          "reflectToAttr": true,
          "docs": "To disable table during async operations",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isSelectable",
          "type": "boolean",
          "mutable": false,
          "attr": "is-selectable",
          "reflectToAttr": false,
          "docs": "isSelectable Boolean based on which selectable options appears for rows in the table.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": true,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label attribute is not visible on screen. There for accessibility purposes.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rowActions",
          "type": "DataTableAction[]",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "To enable bulk actions on the table.",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "DataTableAction[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rows",
          "type": "DataTableRow[]",
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Rows Array of objects to be displayed in the table.",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "DataTableRow[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "shimmerCount",
          "type": "number",
          "mutable": false,
          "attr": "shimmer-count",
          "reflectToAttr": false,
          "docs": "shimmerCount number of shimmer rows to show during initial loading",
          "docsTags": [],
          "default": "4",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showSettings",
          "type": "boolean",
          "mutable": false,
          "attr": "show-settings",
          "reflectToAttr": false,
          "docs": "showSettings is used to show the settings button on the table.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getSelectedIds",
          "returns": {
            "type": "Promise<string[]>",
            "docs": "an array of selected row IDs"
          },
          "signature": "getSelectedIds() => Promise<string[]>",
          "parameters": [],
          "docs": "getSelectedIds",
          "docsTags": [
            {
              "name": "returns",
              "text": "an array of selected row IDs"
            }
          ]
        },
        {
          "name": "getSelectedRows",
          "returns": {
            "type": "Promise<DataTableRow[]>",
            "docs": "selected rows from the data table"
          },
          "signature": "getSelectedRows() => Promise<DataTableRow[]>",
          "parameters": [],
          "docs": "getSelectedRows",
          "docsTags": [
            {
              "name": "returns",
              "text": "selected rows from the data table"
            }
          ]
        },
        {
          "name": "getTableSettings",
          "returns": {
            "type": "Promise<{}>",
            "docs": "columnConfig object"
          },
          "signature": "getTableSettings() => Promise<{}>",
          "parameters": [],
          "docs": "getTableSettings",
          "docsTags": [
            {
              "name": "returns",
              "text": "columnConfig object"
            }
          ]
        },
        {
          "name": "loadTable",
          "returns": {
            "type": "Promise<boolean>",
            "docs": "isLoading current state"
          },
          "signature": "loadTable(state?: boolean) => Promise<boolean>",
          "parameters": [],
          "docs": "loadTable - Method to call when we want to change table loading state",
          "docsTags": [
            {
              "name": "param",
              "text": "state to load table or not"
            },
            {
              "name": "returns",
              "text": "isLoading current state"
            }
          ]
        },
        {
          "name": "selectAllRows",
          "returns": {
            "type": "Promise<string[]>",
            "docs": ""
          },
          "signature": "selectAllRows(checked?: boolean) => Promise<string[]>",
          "parameters": [],
          "docs": "selectAllRows method we can use to select/unselect rows in the table",
          "docsTags": [
            {
              "name": "param",
              "text": "checked denotes if we want to check or uncheck the rows"
            }
          ]
        },
        {
          "name": "setTableSettings",
          "returns": {
            "type": "Promise<DataTableColumn[]>",
            "docs": ""
          },
          "signature": "setTableSettings(columnConfig: any) => Promise<DataTableColumn[]>",
          "parameters": [],
          "docs": "setTableSettings",
          "docsTags": [
            {
              "name": "param",
              "text": "columnConfig columnConfig object"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "fwSelectAllChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "fwSelectAllChange Emits this event when select all is checked.",
          "docsTags": []
        },
        {
          "event": "fwSelectionChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "fwSelectionChange Emits this event when row is selected/unselected.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "fw-custom-cell-anchor",
        "fw-custom-cell-user",
        "fw-custom-cell-icon",
        "fw-custom-cell-paragraph",
        "fw-checkbox",
        "fw-tooltip",
        "fw-button",
        "fw-icon",
        "fw-input",
        "fw-drag-container",
        "fw-skeleton"
      ],
      "dependencyGraph": {
        "fw-data-table": [
          "fw-custom-cell-anchor",
          "fw-custom-cell-user",
          "fw-custom-cell-icon",
          "fw-custom-cell-paragraph",
          "fw-checkbox",
          "fw-tooltip",
          "fw-button",
          "fw-icon",
          "fw-input",
          "fw-drag-container",
          "fw-skeleton"
        ],
        "fw-custom-cell-user": [
          "fw-avatar"
        ],
        "fw-custom-cell-icon": [
          "fw-icon"
        ],
        "fw-custom-cell-paragraph": [
          "fw-tooltip"
        ],
        "fw-tooltip": [
          "fw-popover"
        ],
        "fw-checkbox": [
          "fw-icon"
        ],
        "fw-button": [
          "fw-spinner",
          "fw-icon"
        ],
        "fw-input": [
          "fw-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/datepicker/datepicker.tsx",
      "encapsulation": "shadow",
      "tag": "fw-datepicker",
      "readme": "# Datepicker (fw-datepicker)\n\nfw-datepicker displays an input box with a calendar that enables selecting a date or date range. The values preselected in the input box and calendar are based on the fw-datepicker attribute values.\n\nAll the date formats passed as attribute's values must be valid [ISO Date format](https://en.wikipedia.org/wiki/ISO_8601).\n\n## Demo\n\n```html live\n<fw-label value=\"Single date picker\" color=\"yellow\"></fw-label><br />\n<fw-datepicker\n  id=\"date1\"\n  value=\"2021-12-02\"\n  display-format=\"dd-MM-yyyy\"\n></fw-datepicker>\n<fw-label value=\"A date range picker\" color=\"yellow\"></fw-label><br />\n<fw-datepicker\n  mode=\"range\"\n  from-date=\"2022-01-02\"\n  to-date=\"2022-01-04\"\n  display-format=\"dd-MM-yyyy\"\n></fw-datepicker>\n<fw-label value=\"Date picker with readonly attribute\" color=\"yellow\"></fw-label\n><br />\n<fw-datepicker readonly></fw-datepicker>\n<fw-label\n  value=\"Date picker with show-footer and clear-input attributes\"\n  color=\"yellow\"\n></fw-label\n><br />\n<fw-datepicker show-footer=\"false\" clear-input></fw-datepicker>\n<fw-label value=\"Date picker with locale\" color=\"yellow\"></fw-label><br />\n<fw-datepicker locale=\"fr\"></fw-datepicker>\n<script type=\"text/javascript\">\n  // Get the selected date using fwChange listener.\n  document\n    .querySelector('#date1')\n    .addEventListener('fwChange', (e) => console.log(e.detail.value));\n</script>\n```\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html\n<fw-label value=\"Single date picker\" color=\"yellow\"></fw-label><br/>\n<fw-datepicker id=\"date1\" value=\"2021-12-02\" display-format=\"DD-MM-YYYY\"></fw-datepicker>\n<fw-label value=\"A date range picker\" color=\"yellow\"></fw-label><br/>\n<fw-datepicker\n  mode=\"range\"\n  from-date=\"2022-01-02\"\n  to-date=\"2022-01-04\"\n  display-format=\"dd-MM-yyyy\"\n></fw-datepicker>\n<fw-label value=\"Date picker with readonly attribute\" color=\"yellow\"></fw-label\n><br />\n<fw-datepicker readonly></fw-datepicker>\n<fw-label\n  value=\"Date picker with show-footer and clear-input attributes\"\n  color=\"yellow\"\n></fw-label\n><br />\n<fw-datepicker show-footer=\"false\" clear-input></fw-datepicker>\n<fw-label value=\"Date picker with locale\" color=\"yellow\"></fw-label><br />\n<fw-datepicker locale=\"fr\"></fw-datepicker>\n<script type=\"text/javascript\">\n  // Get the selected date using fwChange listener.\n  document\n    .querySelector('#date1')\n    .addEventListener('fwChange', (e) => console.log(e.detail.value));\n</script>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwLabel, FwDatepicker } from \"@freshworks/crayons/react\";\nfunction App() {\n\nvar getSelectedDate = function(e) {\nconsole.log(e.detail.value);\n}\n\nreturn (<div>\n<label>Single date picker</label><br/>\n<FwDatepicker value=\"2021-12-02\" display-format=\"dd-MM-yyyy\" onFwChange={getSelectedDate}></FwDatepicker>\n<label>A date range picker</label><br/>\n<FwDatepicker mode=\"range\"\n  from-date=\"2022-01-02\"\n  to-date=\"2022-01-04\"\n  display-format=\"DD-MM-YYYY\"></FwDatepicker>\n<FwLabel value=\"Date picker with readonly attribute\" color=\"yellow\"></FwLabel><br />\n<FwDatepicker readonly></FwDatepicker>\n<FwLabel\nvalue=\"Date picker with show-footer and clear-input attributes\"\ncolor=\"yellow\"\n\n> </FwLabel\n> <br /> > <FwDatepicker showFooter={false} clearInput></FwDatepicker> > <label value=\"Date picker with locale\" color=\"yellow\"></label><br /> > <FwDatepicker locale=\"fr\"></FwDatepicker>\n\n  </div>)\n}\n```\n</code-block>\n</code-group>\n\n## Date time picker\n\nDate time picker is currently supported only on single date picker.\n\n```html live\n<fw-label value=\"Default date time picker\" color=\"yellow\"></fw-label><br />\n<fw-datepicker show-time-picker></fw-datepicker>\n<br />\n<fw-label value=\"Date time picker with custom format\" color=\"yellow\"></fw-label\n><br />\n<fw-datepicker\n  show-time-picker\n  display-format=\"dd-MM-yyyy\"\n  time-format=\"hh:mm\"\n></fw-datepicker>\n<br />\n<fw-label value=\"Date time picker with locale support\" color=\"yellow\"></fw-label\n><br />\n<fw-datepicker show-time-picker locale=\"ar\"></fw-datepicker>\n<br />\n<fw-label value=\"Date time picker with time range\" color=\"yellow\"></fw-label\n><br />\n<fw-datepicker show-time-picker id=\"time-range\" locale=\"es\"></fw-datepicker>\n<br />\n<fw-label value=\"Date time picker with value\" color=\"yellow\"></fw-label><br />\n<fw-datepicker\n  show-time-picker\n  value=\"2022-07-22T06:00:00.000Z\"\n></fw-datepicker>\n<br />\n<script type=\"application/javascript\">\n  var timePicker = document.getElementById('time-range');\n  timePicker.timeProps = {\n    minTime: '10:00',\n    maxTime: '18:00',\n    interval: 60,\n  };\n  timePicker.addEventListener('fwChange', (e) => {\n    console.log(e.detail);\n  });\n</script>\n```\n\n<code-group>\n<code-block title=\"HTML\">\n```html\n <fw-label value=\"Default date time picker\" color=\"yellow\"></fw-label><br />\n    <fw-datepicker show-time-picker></fw-datepicker>\n    <br />\n    <fw-label\n      value=\"Date time picker with custom format\"\n      color=\"yellow\"\n    ></fw-label\n    ><br />\n    <fw-datepicker\n      show-time-picker\n      display-format=\"dd-MM-yyyy\"\n      time-format=\"hh:mm\"\n    ></fw-datepicker>\n    <br />\n    <fw-label\n      value=\"Date time picker with locale support\"\n      color=\"yellow\"\n    ></fw-label\n    ><br />\n    <fw-datepicker show-time-picker locale=\"ar\"></fw-datepicker>\n    <br />\n    <fw-label value=\"Date time picker with time range\" color=\"yellow\"></fw-label\n    ><br />\n    <fw-datepicker show-time-picker id=\"time-range\" locale=\"es\"></fw-datepicker>\n    <br />\n    <fw-label value=\"Date time picker with value\" color=\"yellow\"></fw-label\n    ><br />\n    <fw-datepicker\n      show-time-picker\n      value=\"2022-07-22T06:00:00.000Z\"\n    ></fw-datepicker>\n    <br />\n    <script type=\"application/javascript\">\n      var timePicker = document.getElementById('time-range');\n      timePicker.timeProps = {\n        minTime: '10:00',\n        maxTime: '18:00',\n        interval: 60,\n      };\n      timePicker.addEventListener('fwChange', (e) => {\n        console.log(e.detail);\n      });\n    </script>\n```\n</code-block>\n</code-block>\n</code-group>\n",
      "docs": "fw-datepicker displays an input box with a calendar that enables selecting a date or date range. The values preselected in the input box and calendar are based on the fw-datepicker attribute values.\n\nAll the date formats passed as attribute's values must be valid [ISO Date format](https://en.wikipedia.org/wiki/ISO_8601).",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "cancelText",
          "type": "string",
          "mutable": true,
          "attr": "cancel-text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clearInput",
          "type": "boolean",
          "mutable": false,
          "attr": "clear-input",
          "reflectToAttr": false,
          "docs": "Displays a clear icon in the text box. Clicking the icon clears the value. Default `false`",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Make the datepicker box as disabled. Default `false`",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "displayFormat",
          "type": "string",
          "mutable": true,
          "attr": "display-format",
          "reflectToAttr": false,
          "docs": "Format in which the date values selected in the calendar are populated in the input box. Defaults to the locale specific display format.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "errorText",
          "type": "string",
          "mutable": false,
          "attr": "error-text",
          "reflectToAttr": false,
          "docs": "Error text displayed below the text box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fromDate",
          "type": "string",
          "mutable": true,
          "attr": "from-date",
          "reflectToAttr": false,
          "docs": "Starting date of the date range that is preselected in the calendar, if mode is range. Must be a date later than the min-date value and valid ISO date format.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hintText",
          "type": "string",
          "mutable": false,
          "attr": "hint-text",
          "reflectToAttr": false,
          "docs": "Hint text displayed below the text box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label displayed on the interface, for the component.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "locale",
          "type": "string",
          "mutable": true,
          "attr": "locale",
          "reflectToAttr": false,
          "docs": "Locale for which datepicker needs to be shown. Defaults to browser's current locale.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxDate",
          "type": "string",
          "mutable": false,
          "attr": "max-date",
          "reflectToAttr": false,
          "docs": "Latest date a user can select in the calendar, if mode is range. Must be a valid ISO date format if set.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxYear",
          "type": "number",
          "mutable": false,
          "attr": "max-year",
          "reflectToAttr": false,
          "docs": "Maximum year that needs to be displayed in the year dropdown.",
          "docsTags": [],
          "default": "new Date().getFullYear()",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minDate",
          "type": "string",
          "mutable": false,
          "attr": "min-date",
          "reflectToAttr": false,
          "docs": "Earliest date a user can select in the calendar, if mode is range. Must be a valid ISO date format if set.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minYear",
          "type": "number",
          "mutable": false,
          "attr": "min-year",
          "reflectToAttr": false,
          "docs": "Minimum year that needs to be displayed in the year dropdown.",
          "docsTags": [],
          "default": "1970",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mode",
          "type": "\"range\" | \"single date\"",
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "Type of date selection enabled for the calendar. If the value is range, a user can select a date range in the calendar.",
          "docsTags": [],
          "default": "'single date'",
          "values": [
            {
              "value": "range",
              "type": "string"
            },
            {
              "value": "single date",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": true,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Text displayed in the input box before a user selects a date or date range.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Make the input box as readonly. Default `false`",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showFooter",
          "type": "boolean",
          "mutable": false,
          "attr": "show-footer",
          "reflectToAttr": false,
          "docs": "Indicates if footer needs to be shown. Default `true`.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showTimePicker",
          "type": "boolean",
          "mutable": false,
          "attr": "show-time-picker",
          "reflectToAttr": false,
          "docs": "Whether the time-picker should be shown in the date-picker. Supports single date picker only.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "\"error\" | \"normal\" | \"warning\"",
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "Theme based on which the input of the datepicker is styled.",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "normal",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "timeFormat",
          "type": "string",
          "mutable": true,
          "attr": "time-format",
          "reflectToAttr": false,
          "docs": "The format of time picker .",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "timeProps",
          "type": "{}",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The props for the time picker. Refer the fw-timepicker for valid format.",
          "docsTags": [],
          "default": "{}",
          "values": [
            {
              "type": "{}"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "toDate",
          "type": "string",
          "mutable": true,
          "attr": "to-date",
          "reflectToAttr": false,
          "docs": "Ending date of the date range that is preselected in the calendar, if mode is range. Must be a date earlier than the max-date value and valid ISO date format.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "updateText",
          "type": "string",
          "mutable": true,
          "attr": "update-text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Date that is preselected in the calendar, if mode is single date or undefined. If set this must be valid ISO date format.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "warningText",
          "type": "string",
          "mutable": false,
          "attr": "warning-text",
          "reflectToAttr": false,
          "docs": "Warning text displayed below the text box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "clearValue",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "clearValue() => Promise<void>",
          "parameters": [],
          "docs": "Clears the input value and unselects selected date.",
          "docsTags": []
        },
        {
          "name": "getValue",
          "returns": {
            "type": "Promise<string | { fromDate: string; toDate: string; }>",
            "docs": ""
          },
          "signature": "getValue() => Promise<string | { fromDate: string; toDate: string; }>",
          "parameters": [],
          "docs": "Returns the date value in ISO format.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on a specific `fw-datepicker`. Use this method instead of the global `input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "fwBlur",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the input box loses focus.",
          "docsTags": []
        },
        {
          "event": "fwChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the update button clicked",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "fwFocus",
          "capture": false,
          "passive": false
        },
        {
          "event": "fwClick",
          "capture": false,
          "passive": false
        },
        {
          "event": "fwInput",
          "capture": false,
          "passive": false
        },
        {
          "event": "fwChange",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--fw-error-color",
          "annotation": "prop",
          "docs": "Color of the error text."
        },
        {
          "name": "--fw-hint-color",
          "annotation": "prop",
          "docs": "Color of the hint text."
        },
        {
          "name": "--fw-label-color",
          "annotation": "prop",
          "docs": "Color of the label."
        },
        {
          "name": "--fw-warning-color",
          "annotation": "prop",
          "docs": "Color of the warning text."
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-form-control"
      ],
      "dependencies": [
        "fw-select-option",
        "fw-button",
        "fw-input",
        "fw-timepicker",
        "fw-popover",
        "fw-icon",
        "fw-select"
      ],
      "dependencyGraph": {
        "fw-datepicker": [
          "fw-select-option",
          "fw-button",
          "fw-input",
          "fw-timepicker",
          "fw-popover",
          "fw-icon",
          "fw-select"
        ],
        "fw-select-option": [
          "fw-icon",
          "fw-checkbox",
          "fw-avatar"
        ],
        "fw-checkbox": [
          "fw-icon"
        ],
        "fw-button": [
          "fw-spinner",
          "fw-icon"
        ],
        "fw-input": [
          "fw-icon"
        ],
        "fw-timepicker": [
          "fw-select",
          "fw-select-option"
        ],
        "fw-select": [
          "fw-tag",
          "fw-popover",
          "fw-button",
          "fw-spinner",
          "fw-icon",
          "fw-list-options"
        ],
        "fw-tag": [
          "fw-tooltip",
          "fw-avatar",
          "fw-icon"
        ],
        "fw-tooltip": [
          "fw-popover"
        ],
        "fw-list-options": [
          "fw-select-option",
          "fw-input"
        ],
        "fw-form-control": [
          "fw-datepicker"
        ]
      }
    },
    {
      "filePath": "./src/components/drag-container/drag-container.tsx",
      "encapsulation": "none",
      "tag": "fw-drag-container",
      "readme": "# Drag Container (fw-drag-container)\n\nfw-drag-container can be used to reorder a list items via drag and drop or move/copy items between two fw-drag-container elements.\n\n## Demo\n\nfw-drag-container is a custom component with an open shadow that acts as a wrapper to the list items having `draggable` attribute as true, that can be dragged and dropped with in the wrapper to change their order.\n\n```html live\n<template>\n  <div>\n    <fw-label value=\"Sort items within a container\"></fw-label>\n    <fw-drag-container class=\"drag-container\" id=\"defaultSort\">\n      <fw-drag-item>Item 1</fw-drag-item>\n      <fw-drag-item>Item 2</fw-drag-item>\n      <fw-drag-item>Item 3</fw-drag-item>\n      <fw-drag-item\n        >Item 4 <fw-icon slot=\"suffix\" name=\"bulb\"></fw-icon>\n      </fw-drag-item>\n    </fw-drag-container>\n    <br />\n    <fw-label value=\"Pinned items within a container\"></fw-label>\n    <fw-drag-container class=\"drag-container\" id=\"pinnedSort\">\n      <fw-drag-item pinned=\"top\">Item 1</fw-drag-item>\n      <fw-drag-item>Item 2</fw-drag-item>\n      <fw-drag-item>Item 3</fw-drag-item>\n      <fw-drag-item>Item 4</fw-drag-item>\n      <fw-drag-item pinned=\"bottom\">Item 5</fw-drag-item>\n    </fw-drag-container>\n  </div>\n</template>\n<style>\n  .drag-container {\n    width: 300px;\n    padding: 20px;\n    border: 1px solid black;\n  }\n  fw-drag-item {\n    margin-bottom: 8px;\n  }\n</style>\n```\n\nDemo for dragging items from one container to another container.\n\n```html live\n<template>\n  <div>\n    <fw-label value=\"Copying items from on container to another\"></fw-label>\n    <fw-label\n      value=\"Item 1-5 are allows to be sorted with Item 6-9 but not the other way around.\"\n    ></fw-label>\n    <div class=\"container\">\n      <fw-drag-container class=\"drag-container\" sortable=\"false\" id=\"from\">\n        <fw-drag-item>Item 1</fw-drag-item>\n        <fw-drag-item>Item 2</fw-drag-item>\n        <fw-drag-item>Item 3</fw-drag-item>\n        <fw-drag-item>Item 4</fw-drag-item>\n        <fw-drag-item>Item 5</fw-drag-item>\n      </fw-drag-container>\n\n      <fw-drag-container\n        class=\"drag-container\"\n        id=\"to\"\n        accept-from=\"from\"\n        placeholder-class=\"placeholder\"\n      >\n        <fw-drag-item>Item 6</fw-drag-item>\n        <fw-drag-item>Item 7</fw-drag-item>\n        <fw-drag-item>Item 8</fw-drag-item>\n        <fw-drag-item>Item 9</fw-drag-item>\n      </fw-drag-container>\n    </div>\n    <fw-label value=\"Moving items from on container to another\"></fw-label>\n    <fw-label\n      value=\"Item 1-5 are allows to be sorted with Item 6-9 but not the other way around.\"\n    ></fw-label>\n    <div class=\"container\">\n      <fw-drag-container class=\"drag-container\" sortable=\"false\" id=\"moveFrom\">\n        <fw-drag-item>Item 1</fw-drag-item>\n        <fw-drag-item>Item 2</fw-drag-item>\n        <fw-drag-item>Item 3</fw-drag-item>\n        <fw-drag-item>Item 4</fw-drag-item>\n        <fw-drag-item>Item 5</fw-drag-item>\n      </fw-drag-container>\n\n      <fw-drag-container\n        class=\"drag-container\"\n        id=\"moveTo\"\n        accept-from=\"moveFrom\"\n        placeholder-class=\"placeholder\"\n        copy=\"false\"\n      >\n        <fw-drag-item>Item 6</fw-drag-item>\n        <fw-drag-item>Item 7</fw-drag-item>\n        <fw-drag-item>Item 8</fw-drag-item>\n        <fw-drag-item>Item 9</fw-drag-item>\n      </fw-drag-container>\n    </div>\n  </div>\n</template>\n<style>\n  .container {\n    width: 400px;\n    padding: 20px;\n    border: 1px solid black;\n    display: flex;\n    justify-content: space-between;\n  }\n  .drag-container {\n    width: 150px;\n    padding: 20px;\n    border: 1px solid black;\n  }\n  fw-drag-item {\n    margin-bottom: 8px;\n  }\n  .placeholder {\n    width: 150px;\n    background-color: blueviolet;\n    height: 5px;\n  }\n</style>\n```\n\n`fwDrop` event will be emitted during a successful drop event, and can be used to detect the dropped item.\n\n```html live\n<fw-drag-container id=\"drop\">\n  <fw-drag-item>Item 1</fw-drag-item>\n  <fw-drag-item>Item 2</fw-drag-item>\n  <fw-drag-item>Item 3</fw-drag-item>\n  <fw-drag-item>Item 4</fw-drag-item>\n  <fw-drag-item>Item 5</fw-drag-item>\n</fw-drag-container>\n<script type=\"application/javascript\">\n  var drop = document.getElementById('drop');\n  drop.addEventListener('fwDrop', (e) => {\n    console.log(e.detail);\n  });\n</script>\n```\n\n```javascript\nvar drop = document.getElementById('drop');\ndrop.addEventListener('fwDrop', (e) => {\n  console.log(e.detail);\n});\n```\n",
      "docs": "fw-drag-container can be used to reorder a list items via drag and drop or move/copy items between two fw-drag-container elements.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "acceptFrom",
          "type": "string",
          "mutable": false,
          "attr": "accept-from",
          "reflectToAttr": false,
          "docs": "Id of the fw-sortable element from which draggable content can be accepted. Add comma separated id's for multiple containers.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "addOnDrop",
          "type": "boolean",
          "mutable": false,
          "attr": "add-on-drop",
          "reflectToAttr": false,
          "docs": "Whether the drag element should be added to the container on drop. If set to false, the placeholder will be retained.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "copy",
          "type": "boolean",
          "mutable": false,
          "attr": "copy",
          "reflectToAttr": false,
          "docs": "Whether the drag element should be moved or copied.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholderClass",
          "type": "string",
          "mutable": false,
          "attr": "placeholder-class",
          "reflectToAttr": false,
          "docs": "The class name for the drag/drop placeholder. Add space separated class names for multiple classes",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sortable",
          "type": "boolean",
          "mutable": false,
          "attr": "sortable",
          "reflectToAttr": false,
          "docs": "Whether the list should be sortable.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "fwDrop",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when an draggable item is dropped inside the container.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-data-table"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "fw-data-table": [
          "fw-drag-container"
        ]
      }
    },
    {
      "filePath": "./src/components/drag-item/drag-item.tsx",
      "encapsulation": "shadow",
      "tag": "fw-drag-item",
      "readme": "# Drag Item (fw-drag-item)\n\nfw-drag-item can used as a row component inside fw-drag-container.\n\n## Demo\n\nfw-drag-item can be dragged via clicking and holding the mouse on the drag-icon.\n\n```html live\n<fw-drag-item>\n  <span>Drag Me via the drag icon</span>\n</fw-drag-item>\n```\n",
      "docs": "fw-drag-item can used as a row component inside fw-drag-container.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Whether the drag is disabled or not.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pinned",
          "type": "\"bottom\" | \"top\"",
          "mutable": false,
          "attr": "pinned",
          "reflectToAttr": false,
          "docs": "Pinned position of the drag item, other drag item cannot be placed above or below it.",
          "docsTags": [],
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showDragIcon",
          "type": "boolean",
          "mutable": false,
          "attr": "show-drag-icon",
          "reflectToAttr": false,
          "docs": "Whether the drag icon should be visible.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "fw-icon"
      ],
      "dependencyGraph": {
        "fw-drag-item": [
          "fw-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/file-uploader/file-uploader.tsx",
      "encapsulation": "shadow",
      "tag": "fw-file-uploader",
      "readme": "# File uploader (fw-file-uploader)\n\nfw-file-uploader can be used to upload files to a server.\n\n#### File uploader as a standalone (without a form and with action url)\n\n```html live\n  <div class=\"fw-flex fw-flex-column fw-justify-center\">\n    <fw-file-uploader \n      name=\"sample\"\n      id=\"file-uploader-1\"\n      text=\"Upload CSV\"\n      description=\"or drag and drop your csv file here\"\n      hint=\"File size must be within 5MB\"\n      max-file-size=\"5\"\n      accept=\".png\"\n      action-u-r-l=\"https://mocktarget.apigee.net/echo\"\n    >\n    </fw-file-uploader>\n    <br/>\n    <fw-button file-uploader-id=\"file-uploader-1\">Upload file</fw-button>\n  </div>\n\n  <script type=\"application/javascript\">\n    const fileUploader1 = document.querySelector('#file-uploader-1');\n    fileUploader1.addEventListener('fwFilesUploaded', (event) => {\n      console.log(event);\n    });\n  </script>\n```\n\n<code-group>\n<code-block title=\"HTML\">\n\n```html\n  <div class=\"fw-flex fw-flex-column fw-justify-center\">\n    <fw-file-uploader \n      id=\"file-uploader-1\"\n      text=\"Upload CSV\"\n      description=\"or drag and drop your csv file here\"\n      hint=\"File size must be within 5MB\"\n      max-file-size=\"5\"\n      accept=\".csv\"\n    >\n    </fw-file-uploader>\n    <br/>\n    <fw-button file-uploader-id=\"file-uploader-1\">Upload file</fw-button>\n  </div>\n```\n\n```javascript\n  const fileUploader = document.querySelector('#file-uploader-1');\n  fileUploader.addEventListener('fwFilesUploaded', (event) => {\n    console.log(event);\n  });\n```\n\n</code-block>\n\n<code-block title=\"React\">\n\n```jsx\n  import React from \"react\";\n  import ReactDOM from \"react-dom\";\n  import { FwFileUploader, FwButton } from \"@freshworks/crayons/react\";\n  function App() {\n\n    let updateState = (event) => {\n      console.log(event.detail);\n    };\n\n    return (\n      <>\n        <FwFileUploader \n          id=\"file-uploader-1\"\n          text=\"Upload CSV\"\n          description=\"or drag and drop your csv file here\"\n          hint=\"File size must be within 5MB\"\n          maxFileSize={5}\n          accept=\".csv\"\n          onFilesUploaded={(event) => updateState(event)}\n        >\n        </FwFileUploader>\n        <FwButton fileUploaderId=\"file-uploader-1\">Upload</FwButton>\n      </>\n    );\n  }\n```\n\n</code-block>\n</code-group>\n\n#### File uploader inside a form.\n\n```html live\n  <div class=\"fw-flex fw-flex-column fw-justify-center\">\n    <form class=\"fw-flex fw-flex-column fw-justify-center\" id=\"sample-form\" action=\"https://mocktarget.apigee.net/echo\" method=\"post\" onsubmit>\n      <fw-file-uploader \n        name=\"sample-2\"\n        id=\"file-uploader-2\"\n        text=\"Upload CSV\"\n        description=\"or drag and drop your csv file here\"\n        hint=\"File size must be within 5MB\"\n        max-file-size=\"5\"\n        accept=\".png\"\n        multiple=\"true\"\n      >\n      </fw-file-uploader>\n      <br/>\n      <fw-button type=\"submit\">Upload file</fw-button>\n    </form>\n  </div>\n\n  <script type=\"application/javascript\">\n    const sampleForm = document.getElementById(\"sample-form\");\n    const fileUploader2 = document.getElementById(\"file-uploader-2\");\n    sampleForm.addEventListener(\"submit\", async (e) => {\n      e.preventDefault() // Cancel redirection\n      const files = await fileUploader2.getFiles();\n      console.log(files); // Perform action to send file to a server\n      fileUploader2.reset(); // reset the form to initial state\n    });\n  </script>\n```\n\n<code-group>\n<code-block title=\"HTML\">\n\n```html\n  <div class=\"fw-flex fw-flex-column fw-justify-center\">\n    <form class=\"fw-flex fw-flex-column fw-justify-center\" id=\"sample-form\" action=\"https://mocktarget.apigee.net/echo\" method=\"post\" onsubmit>\n      <fw-file-uploader \n        name=\"sample-2\"\n        id=\"file-uploader-2\"\n        text=\"Upload CSV\"\n        description=\"or drag and drop your csv file here\"\n        hint=\"File size must be within 5MB\"\n        max-file-size=\"5\"\n        accept=\".png\"\n        multiple=\"true\"\n      >\n      </fw-file-uploader>\n      <br/>\n      <fw-button type=\"submit\">Upload file</fw-button>\n    </form>\n  </div>\n```\n\n```javascript\n  const sampleForm = document.getElementById(\"sample-form\");\n  const fileUploader2 = document.getElementById(\"file-uploader-2\");\n  sampleForm.addEventListener(\"submit\", async (e) => {\n    e.preventDefault() // Cancel redirection\n    const files = await fileUploader2.getFiles();\n    console.log(files); // Perform action to send file to a server\n    fileUploader2.reset(); // reset the form to initial state\n  });\n```\n\n</code-block>\n\n<code-block title=\"React\">\n\n```jsx\n  import { useRef } from 'react';\n  import { FwFileUploader, FwButton } from \"@freshworks/crayons/react\";\n  function App() {\n\n    const fileUploader = useRef(null);\n    const updateState = async (event) => {\n      event.preventDefault();\n      const files = await fileUploader.getFiles();\n      console.log(files);\n      fileUploader.reset();\n    };\n\n    return (\n      <>\n        <form onSubmit={(event) => updateState(event)}>\n          <FwFileUploader\n            name=\"sample-2\"\n            id=\"file-uploader-2\"\n            text=\"Upload CSV\"\n            description=\"or drag and drop your csv file here\"\n            hint=\"File size must be within 5MB\"\n            maxFileSize=\"5\"\n            accept=\".png\"\n            multiple=\"true\"\n            ref={fileUploader}\n          >\n          </FwFileUploader>\n          <FwButton type=\"submit\">Upload</FwButton>\n        </form>\n      </>\n    );\n  }\n```\n\n</code-block>\n</code-group>\n\n#### File uploader - upload failure and reupload example\n\n```html live\n  <div class=\"fw-flex fw-flex-column fw-justify-center\">\n    <div>\n      <fw-toggle id=\"succeed-toggle\" size=\"small\" checked=\"false\">Switch to succeed file upload</fw-toggle><br><br>\n    </div>\n    <fw-file-uploader \n      name=\"sample\"\n      id=\"file-uploader-3\"\n      text=\"Upload CSV\"\n      description=\"or drag and drop your csv file here\"\n      hint=\"File size must be within 5MB\"\n      max-file-size=\"5\"\n      accept=\".png\"\n      action-u-r-l=\"/no-api\"\n    >\n    </fw-file-uploader>\n    <br/>\n    <fw-button file-uploader-id=\"file-uploader-3\">Upload file</fw-button>\n  </div>\n\n  <script type=\"application/javascript\">\n    const fileUploader3 = document.querySelector('#file-uploader-3');\n    const succeedToggle = document.querySelector('#succeed-toggle');\n    fileYploader3.fileUploadError = 'Toggle the switch to successfully upload the file'; // Error message text\n    succeedToggle.addEventListener('fwChange', (event) => {\n      if (event.currentTarget.checked === true) {\n        fileUploader3.actionURL = 'https://mocktarget.apigee.net/echo';\n      } else {\n        fileUploader3.actionURL = '/no-api';\n      }\n    });\n\n    fileUploader3.addEventListener('fwFilesUploaded', (event) => {\n      console.log(event); // Will be called when all file requests are sent.\n    });\n    fileUploader3.addEventListener('fwFileReuploaded', (event) => {\n      console.log(event); // Will be called a retry attempt request is sent.\n    });\n  </script>\n```\n\n<code-group>\n<code-block title=\"HTML\">\n\n```html\n  <div class=\"fw-flex fw-flex-column fw-justify-center\">\n    <div>\n      <fw-toggle id=\"succeed-toggle\" size=\"small\" checked=\"false\">Switch to succeed file upload</fw-toggle><br><br>\n    </div>\n    <fw-file-uploader \n      name=\"sample\"\n      id=\"file-uploader-3\"\n      text=\"Upload CSV\"\n      description=\"or drag and drop your csv file here\"\n      hint=\"File size must be within 5MB\"\n      max-file-size=\"5\"\n      accept=\".png\"\n      action-u-r-l=\"/no-api\"\n    >\n    </fw-file-uploader>\n    <br/>\n    <fw-button file-uploader-id=\"file-uploader-3\">Upload file</fw-button>\n  </div>\n```\n\n```javascript\n  const fileUploader3 = document.querySelector('#file-uploader-3');\n  const succeedToggle = document.querySelector('#succeed-toggle');\n  fileYploader3.fileUploadError = 'Toggle the switch to successfully upload the file'; // Error message text\n  succeedToggle.addEventListener('fwChange', (event) => {\n    if (event.currentTarget.checked === true) {\n      fileUploader3.actionURL = 'https://mocktarget.apigee.net/echo';\n    } else {\n      fileUploader3.actionURL = '/no-api';\n    }\n  });\n\n  fileUploader3.addEventListener('fwFilesUploaded', (event) => {\n    console.log(event); // Will be called when all file requests are sent.\n  });\n  fileUploader3.addEventListener('fwFileReuploaded', (event) => {\n    console.log(event); // Will be called a retry attempt request is sent.\n  });\n```\n\n</code-block>\n\n<code-block title=\"React\">\n\n```jsx\n  import { useRef } from 'react';\n  import { FwToggle, FwFileUploader, FwButton } from \"@freshworks/crayons/react\";\n\n  function App() {\n\n    const fileUploader = useRef(null);\n\n    const toggleChange = (event) => {\n      if (event.currentTarget.checked === true) {\n        fileUploader.current.actionURL = 'https://mocktarget.apigee.net/echo';\n      } else {\n        fileUploader.current.actionURL = '/no-api';\n      }\n    }\n\n    const filesUploaded = (event) => {\n      console.log(event);\n    }\n\n    const fileReuploaded = (event) => {\n      console.log(event);\n    }\n\n    return (\n      <div className=\"App\">\n        <FwToggle\n          id=\"succeed-toggle\"\n          size=\"small\"\n          checked=\"false\"\n          onFwChange={(event) => toggleChange(event)}\n        >\n\n        </FwToggle>\n        <div>\n          <FwFileUploader\n            name=\"sample\"\n            id=\"file-uploader-3\"\n            text=\"Upload CSV\"\n            description=\"or drag and drop your csv file here\"\n            hint=\"File size must be within 5MB\"\n            max-file-size=\"5\"\n            accept=\".png\"\n            action-u-r-l=\"/no-api\"\n            onFwFilesUploaded={(event) => filesUploaded(event)}\n            onFwFileReuploaded={(event) => fileReuploaded(event)}\n            ref={fileUploader}\n          >\n          </FwFileUploader>\n          <FwButton file-uploader-id=\"file-uploader-3\">Upload</FwButton>\n        </div>\n      </div>\n    );\n\n  }\n```\n\n</code-block>\n</code-group>\n\n#### File uploader - Modify header tokens in the request\n\nModify the header using the 'modifyHeader' prop. We will receive the XHR request as the first param in the modifyHeader function call.\n\n```html live\n  <div class=\"fw-flex fw-flex-column fw-justify-center\">\n    <fw-file-uploader \n      name=\"sample\"\n      id=\"file-uploader-4\"\n      text=\"Upload CSV\"\n      description=\"or drag and drop your csv file here\"\n      hint=\"File size must be within 5MB\"\n      max-file-size=\"5\"\n      accept=\".png\"\n      action-u-r-l=\"https://mocktarget.apigee.net/echo\"\n    >\n    </fw-file-uploader>\n    <br/>\n    <fw-button file-uploader-id=\"file-uploader-4\">Upload file</fw-button>\n  </div>\n\n  <script type=\"application/javascript\">\n    const fileUploader4 = document.querySelector('#file-uploader-4');\n    fileUploader4.modifyRequest = (xhr) => {\n      const token = 'sample';\n      xhr.setRequestHeader('Authorization', token); // adding a header to the request\n      return xhr;\n    }\n    fileUploader4.addEventListener('fwFilesUploaded', (event) => {\n      console.log(JSON.parse(event.detail.response).headers.authorization); // Will be called the first time when all file requests are sent.\n    });\n  </script>\n```\n\n<code-group>\n<code-block title=\"HTML\">\n\n```html\n  <div class=\"fw-flex fw-flex-column fw-justify-center\">\n    <fw-file-uploader \n      name=\"sample\"\n      id=\"file-uploader-4\"\n      text=\"Upload CSV\"\n      description=\"or drag and drop your csv file here\"\n      hint=\"File size must be within 5MB\"\n      max-file-size=\"5\"\n      accept=\".png\"\n      action-u-r-l=\"https://mocktarget.apigee.net/echo\"\n    >\n    </fw-file-uploader>\n    <br/>\n    <fw-button file-uploader-id=\"file-uploader-4\">Upload file</fw-button>\n  </div>\n```\n\n```javascript\n  const fileUploader4 = document.querySelector('#file-uploader-4');\n  fileUploader4.modifyRequest = (xhr) => {\n    const token = 'sample';\n    xhr.setRequestHeader('Authorization', token); // adding a header to the request\n    return xhr;\n  }\n  fileUploader4.addEventListener('fwFilesUploaded', (event) => {\n    console.log(JSON.parse(event.detail.response).headers.authorization); // Will be called the first time when all file requests are sent.\n  });\n```\n\n</code-block>\n\n<code-block title=\"React\">\n\n```jsx\n  import { useRef } from 'react';\n  import { FwFileUploader, FwButton } from \"@freshworks/crayons/react\";\n  function App() {\n\n    const fileUploader = useRef(null);\n\n    const filesUploaded = (event) => {\n      console.log(JSON.parse(event.detail.response).headers.authorization); // Will be called the first time when all file requests are sent.\n    }\n\n    return (\n      <div className=\"App\">\n        <div>\n          <FwFileUploader\n            name=\"sample\"\n            id=\"file-uploader-4\"\n            text=\"Upload CSV\"\n            description=\"or drag and drop your csv file here\"\n            hint=\"File size must be within 5MB\"\n            max-file-size=\"5\"\n            accept=\".png\"\n            action-u-r-l=\"https://mocktarget.apigee.net/echo\"\n            modifyRequest={(xhr) => {\n              const token = 'sample';\n              xhr.setRequestHeader('Authorization', token); // adding a header to the request\n              return xhr;\n            }}\n            onFwFilesUploaded={(event) => filesUploaded(event)}\n            ref={fileUploader}\n          >\n          </FwFileUploader>\n          <FwButton file-uploader-id=\"file-uploader-4\">Upload</FwButton>\n        </div>\n      </div>\n    );\n\n  }\n```\n\n</code-block>\n</code-group>\n\n#### File uploader - custom buttons to upload / reset\n\n```html live\n  <div class=\"fw-flex fw-flex-column fw-justify-center\">\n    <fw-file-uploader \n      name=\"sample\"\n      id=\"file-uploader-5\"\n      text=\"Upload CSV\"\n      description=\"or drag and drop your csv file here\"\n      hint=\"File size must be within 5MB\"\n      max-file-size=\"5\"\n      accept=\".png\"\n      action-u-r-l=\"https://mocktarget.apigee.net/echo\"\n    >\n    </fw-file-uploader>\n    <br/>\n    <button id=\"custom-submit\">Submit</button>\n    <br/>\n    <button id=\"custom-reset\">Reset</button>\n  </div>\n\n  <script type=\"application/javascript\">\n    const fileUploader5 = document.querySelector(\"#file-uploader-5\");\n    const customButton = document.querySelector(\"#custom-submit\");\n    const customReset = document.querySelector(\"#custom-reset\");\n    customButton.addEventListener('click', () => {\n      fileUploader5.uploadFiles(); // Calling uploadFiles from the custom submit\n    });\n    customReset.addEventListener('click', () => {\n      fileUploader5.reset(); // To return component to initial state\n    });\n    fileUploader5.addEventListener('fwFilesUploaded', (event) => {\n      console.log(event);\n    });\n  </script>\n```\n\n<code-group>\n<code-block title=\"HTML\">\n\n```html\n  <div class=\"fw-flex fw-flex-column fw-justify-center\">\n    <fw-file-uploader \n      name=\"sample\"\n      id=\"file-uploader-5\"\n      text=\"Upload CSV\"\n      description=\"or drag and drop your csv file here\"\n      hint=\"File size must be within 5MB\"\n      max-file-size=\"5\"\n      accept=\".png\"\n      action-u-r-l=\"https://mocktarget.apigee.net/echo\"\n    >\n    </fw-file-uploader>\n    <br/>\n    <button id=\"custom-submit\">Submit</button>\n    <br/>\n    <button id=\"custom-reset\">Reset</button>\n  </div>\n```\n\n```javascript\n  const fileUploader5 = document.querySelector(\"#file-uploader-5\");\n  const customButton = document.querySelector(\"#custom-submit\");\n  const customReset = document.querySelector(\"#custom-reset\");\n  customButton.addEventListener('click', () => {\n    fileUploader5.uploadFiles(); // Calling uploadFiles from the custom submit\n  });\n  customReset.addEventListener('click', () => {\n    fileUploader5.reset(); // To return component to initial state\n  });\n  fileUploader5.addEventListener('fwFilesUploaded', (event) => {\n    console.log(event);\n  });\n```\n\n</code-block>\n\n<code-block title=\"React\">\n\n```jsx\n  import { useRef } from 'react'\n  import { FwFileUploader } from \"@freshworks/crayons/react\";\n  function App() {\n\n    const fileUploader = useRef(null);\n\n    return (\n      <div className=\"App\">\n        <div>\n          <FwFileUploader\n            name=\"sample\"\n            id=\"file-uploader-5\"\n            text=\"Upload CSV\"\n            description=\"or drag and drop your csv file here\"\n            hint=\"File size must be within 5MB\"\n            max-file-size=\"5\"\n            accept=\".png\"\n            action-u-r-l=\"https://mocktarget.apigee.net/echo\"\n            onFwFilesUploaded={(event) => console.log(event)}\n            ref={fileUploader}\n          >\n          </FwFileUploader>\n          <br/>\n          <button id=\"custom-submit\" onClick={() => fileUploader.current.uploadFiles()}>Submit</button>\n          <br/>\n          <button id=\"custom-reset\" onClick={() => fileUploader.current.reset()}>Reset</button>\n        </div>\n      </div>\n    );\n  }\n```\n\n</code-block>\n</code-group>\n",
      "docs": "fw-file-uploader can be used to upload files to a server.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "accept",
          "type": "string",
          "mutable": false,
          "attr": "accept",
          "reflectToAttr": false,
          "docs": "accept - comma separated string. tells us what file formats file uploader should accept.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "acceptError",
          "type": "any",
          "mutable": true,
          "attr": "accept-error",
          "reflectToAttr": false,
          "docs": "acceptError - Error message to display when format is invalid.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "actionParams",
          "type": "any",
          "mutable": false,
          "attr": "action-params",
          "reflectToAttr": false,
          "docs": "actionParams - additional information to send to server other than the file.",
          "docsTags": [],
          "default": "{}",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "actionURL",
          "type": "string",
          "mutable": false,
          "attr": "action-u-r-l",
          "reflectToAttr": false,
          "docs": "actionURL - URL to make server call.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "description",
          "type": "any",
          "mutable": true,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "description - file uploader description.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fileUploadError",
          "type": "any",
          "mutable": true,
          "attr": "file-upload-error",
          "reflectToAttr": false,
          "docs": "fileUploadError - Error message when a file upload fails.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filesLimit",
          "type": "number",
          "mutable": false,
          "attr": "files-limit",
          "reflectToAttr": false,
          "docs": "Max files allowed to upload.",
          "docsTags": [],
          "default": "10",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hint",
          "type": "string",
          "mutable": false,
          "attr": "hint",
          "reflectToAttr": false,
          "docs": "hint - file uploader hint text.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxFileSize",
          "type": "number",
          "mutable": false,
          "attr": "max-file-size",
          "reflectToAttr": false,
          "docs": "maxFileSize - maximum file size the file uploader must accept.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxFileSizeError",
          "type": "any",
          "mutable": true,
          "attr": "max-file-size-error",
          "reflectToAttr": false,
          "docs": "maxFileSizeError - Error message to display when file size exceeds limit",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxFilesLimitError",
          "type": "any",
          "mutable": true,
          "attr": "max-files-limit-error",
          "reflectToAttr": false,
          "docs": "maxFilesLimitError - Error message when going beyond files limit.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "modifyRequest",
          "type": "(xhr: any) => any",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "modify request",
          "docsTags": [
            {
              "name": "param",
              "text": "xhr"
            },
            {
              "name": "returns",
              "text": "xhr"
            }
          ],
          "default": "(xhr) => xhr",
          "values": [
            {
              "type": "(xhr: any) => any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "multiple - upload multiple files.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "name - field name",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "any",
          "mutable": true,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "text - file uploader text.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getFiles",
          "returns": {
            "type": "Promise<FileList>",
            "docs": "FileList of all locally available files in the component"
          },
          "signature": "getFiles() => Promise<FileList>",
          "parameters": [],
          "docs": "get all locally available files in the component",
          "docsTags": [
            {
              "name": "returns",
              "text": "FileList of all locally available files in the component"
            }
          ]
        },
        {
          "name": "reset",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "reset() => Promise<void>",
          "parameters": [],
          "docs": "reset file uploader",
          "docsTags": []
        },
        {
          "name": "uploadFiles",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "uploadFiles() => Promise<void>",
          "parameters": [],
          "docs": "uploadFiles - uploads the files to the server. emits an after file is uploaded.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "fwFileReuploaded",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "fileReuploaded - event that gets emitted when file is reuploaded",
          "docsTags": []
        },
        {
          "event": "fwFilesUploaded",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "filesUploaded - event that gets emitted when files get uploaded",
          "docsTags": []
        },
        {
          "event": "fwStageChanged",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "stageChanged - event that gets emitted when component stage changes",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--fw-file-uploader-border",
          "annotation": "prop",
          "docs": "border color for file uploader"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "fw-file-uploader-progress",
        "fw-file-uploader-file"
      ],
      "dependencyGraph": {
        "fw-file-uploader": [
          "fw-file-uploader-progress",
          "fw-file-uploader-file"
        ],
        "fw-file-uploader-progress": [
          "fw-icon"
        ],
        "fw-file-uploader-file": [
          "fw-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/file-uploader/file/file-uploader-file.tsx",
      "encapsulation": "shadow",
      "tag": "fw-file-uploader-file",
      "readme": "# fw-file-uploader-file\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "fileId",
          "type": "number",
          "mutable": false,
          "attr": "file-id",
          "reflectToAttr": false,
          "docs": "file Id",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "file name",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "fwRemoveFile",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "removeFile - event that gets triggered on file removal",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-file-uploader"
      ],
      "dependencies": [
        "fw-icon"
      ],
      "dependencyGraph": {
        "fw-file-uploader-file": [
          "fw-icon"
        ],
        "fw-file-uploader": [
          "fw-file-uploader-file"
        ]
      }
    },
    {
      "filePath": "./src/components/file-uploader/progress/file-uploader-progress.tsx",
      "encapsulation": "shadow",
      "tag": "fw-file-uploader-progress",
      "readme": "# fw-file-uploader-progress\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "error",
          "type": "string",
          "mutable": false,
          "attr": "error",
          "reflectToAttr": false,
          "docs": "error text for the file upload",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fileId",
          "type": "number",
          "mutable": false,
          "attr": "file-id",
          "reflectToAttr": false,
          "docs": "file Id",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "fileName",
          "type": "string",
          "mutable": false,
          "attr": "file-name",
          "reflectToAttr": false,
          "docs": "file name",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "progress",
          "type": "number",
          "mutable": false,
          "attr": "progress",
          "reflectToAttr": false,
          "docs": "file upload progress",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "fwRetryUpload",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "retryUpload event to emit in case of a retry",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-file-uploader"
      ],
      "dependencies": [
        "fw-icon"
      ],
      "dependencyGraph": {
        "fw-file-uploader-progress": [
          "fw-icon"
        ],
        "fw-file-uploader": [
          "fw-file-uploader-progress"
        ]
      }
    },
    {
      "filePath": "./src/components/form/form.tsx",
      "encapsulation": "shadow",
      "tag": "fw-form",
      "readme": "# Form (fw-form)\n\n**Dynamic Form** - Render dynamic form based on the schema passed as a prop.\\\n**Static Form** - Render form based on the children passed as slots.\n\n## Demo Dynamic Form\n\nPass [formSchema](#form-schema) to render Dynamic Form. You can also pass `initialValues` to the form.\n\n```html live\n<div id=\"form-container\">\n  <fw-button id=\"submit\">Submit</fw-button>\n  <fw-button id=\"reset\">Reset</fw-button>\n</div>\n<script type=\"application/javascript\">\n  var form = document.createElement('fw-form');\n  var formContainer = document.querySelector('#form-container');\n  document.querySelector('#submit').addEventListener('click', async (e) => {\n    const { values, isValid } = await form.doSubmit(e);\n    console.log({ values, isValid });\n\n    if (isValid) {\n      // make ajax post end point with values\n      // fetch(\"/post\",values);\n\n      // if error from backend , set Errors - passing key value pair\n      form.setFieldErrors({\n        first_name: 'First Name must be unique <<Server Error>>',\n      });\n\n      // reset the form if required if success\n      // formRef.current.doReset(e);\n    }\n  });\n  document.querySelector('#reset').addEventListener('click', (e) => {\n    form.doReset(e);\n  });\n  var formSchema = {\n    name: 'Test Form',\n    fields: [\n      {\n        id: '2978f820-704b-46c7-9f88-110e14e34a8c',\n        name: 'first_name',\n        label: 'First Name',\n        type: 'TEXT',\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide a text of at max 100 characters',\n        choices: [],\n      },\n\n      {\n        id: '3978f820-704b-46c7-9f88-110e14e34a8c',\n        name: 'last_name',\n        label: 'Last Name',\n        type: 'TEXT',\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide a text of at max 100 characters',\n        choices: [],\n      },\n\n      {\n        id: '42aecb8f-25cf-47ce-89c6-5410fe3d4315',\n        name: 'languages_known',\n        label: 'Languages Known',\n        type: 'MULTI_SELECT',\n        position: 13,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Select one or more values',\n        choices: [\n          {\n            id: 1,\n            value: 'English',\n            position: 1,\n            dependent_ids: {},\n          },\n          {\n            id: 2,\n            value: 'Hindi',\n            position: 2,\n            dependent_ids: {},\n          },\n          {\n            id: 3,\n            value: 'Tamil',\n            position: 3,\n            dependent_ids: {},\n          },\n        ],\n      },\n\n      {\n        id: '6978f820-704b-46c7-9f88-110e14e34a8c',\n        name: 'email',\n        label: 'Email',\n        type: 'EMAIL',\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide an email Id',\n        choices: [],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'date_of_birth',\n        label: 'Date Of Birth',\n        type: 'DATE',\n        position: 11,\n        required: true,\n        Placeholder: 'Enter…',\n        hint: 'Please enter your date of birth',\n        choices: [],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'landmark',\n        label: 'Landmark',\n        type: 'PARAGRAPH',\n        position: 7,\n        required: true,\n        Placeholder: 'Enter some text…',\n        hint: 'Please enter the nearest landmark',\n        choices: [],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'is_indian_citizen',\n        label: 'Indian Citizen?',\n        type: 'CHECKBOX',\n        position: 7,\n        required: true,\n        placeholder: null,\n        hint: 'Check or Uncheck the box',\n        choices: [],\n      },\n\n      {\n        id: '8978f820-704b-46c7-9f88-110e14e34a8c',\n        name: 'phone_number',\n        label: 'Phone number',\n        type: 'TEXT',\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide your phone number',\n        choices: [],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'pincode',\n        label: 'Pincode',\n        type: 'NUMBER',\n        position: 8,\n        required: false,\n        Placeholder: 'Enter…',\n        hint: 'Please enter your Pincode',\n        choices: [],\n      },\n\n      {\n        id: 'ba53775e-2948-4065-8a59-d99d4494e845',\n        name: 'gender',\n        label: 'Gender',\n        type: 'RADIO',\n        position: 5,\n        required: true,\n        placeholder: null,\n        hint: 'Please specify your gender',\n        choices: [\n          {\n            id: 1,\n            value: 'Female',\n            position: 1,\n            dependent_ids: {},\n          },\n          {\n            id: 2,\n            value: 'Male',\n            position: 2,\n            dependent_ids: {},\n          },\n        ],\n      },\n\n      {\n        id: '42aecb8f-25cf-47ce-89c6-5410fe3d4315',\n        name: 'order_status',\n        label: 'Order Status',\n        type: 'DROPDOWN',\n        position: 4,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Select a value',\n        choices: [\n          {\n            id: 1,\n            value: 'open',\n            position: 1,\n            dependent_ids: {},\n          },\n          {\n            id: 2,\n            value: 'pending',\n            position: 2,\n            dependent_ids: {},\n          },\n          {\n            id: 3,\n            value: 'closed',\n            position: 3,\n            dependent_ids: {},\n          },\n        ],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'amount_paid',\n        label: 'Amount Paid',\n        type: 'DECIMAL',\n        position: 10,\n        required: true,\n        Placeholder: 'Enter…',\n        hint: 'Please enter the amount paid',\n        choices: [],\n      },\n    ],\n  };\n  var initialValues = {\n    is_indian_citizen: true,\n  };\n  formContainer.prepend(form);\n  // do any customisation on the field schema to match the props of crayons components.\n  var fields = formSchema.fields.map((field) => {\n    // select expects `text` and `value` prop\n    if (field.type === 'DROPDOWN' || field.type === 'MULTI_SELECT') {\n      return {\n        ...field,\n        choices: field.choices?.map((f) => {\n          return {\n            ...f,\n            text: f.value,\n            value: f.id,\n          };\n        }),\n      };\n    } else return field;\n  });\n\n  var formSchema1 = {\n    ...formSchema,\n    fields: fields,\n  };\n  form.formSchema = formSchema1;\n  form.initialValues = initialValues;\n</script>\n```\n\n## form schema\n\nform schema should follow the below structure:\n\n```{\nname: '', // Name of the form.\nfields: [ // Each item in this array corresponds to a crayons input component.\n  {\n    id: '2978f820-704b-46c7-9f88-110e14e34a8c', // ID of the input control\n    name: 'first_name', // Will be used while serializing form.\n    label: 'First Name', // Label to display.\n    type: '', // Type of the crayons input component. Possible values are TEXT/NUMBER/DECIMAL/DROPDOWN/MULTI_SELECT/RADIO/CHECKBOX/ DATE/PARAGRAPH/EMAIL/TIME\n    position: 3, // Order of the component in the form.\n    required: true, // Required while submitting the form.\n    placeholder: 'Enter…', // placeholder for the input\n    hint: 'Please provide a text of at max 100 characters', // Hint text to be displayed below.\n    choices: [], // List of options for DROPDOWN/MULTI_SELECT types. Each option should be of below structure:\n    {\n    id: 1, // ID for the option.\n    text: '', // Text for the option.\n    value: '', // Value for the option.\n    }\n  }\n]\n}\n```\n\n## Usage Dynamic Form\n\n<code-group>\n<code-block title=\"HTML\">\n```html\n<div id=\"form-container\">\n  <fw-button id=\"submit\">Submit</fw-button>\n  <fw-button id=\"reset\">Reset</fw-button>\n</div>\n<script type=\"application/javascript\">\n  var form = document.createElement('fw-form');\n  var formContainer = document.querySelector('#form-container');\n  document.querySelector('#submit').addEventListener('click', async (e) => {\n    const { values, isValid } = await form.doSubmit(e);\n    console.log({ values, isValid });\n\n    if (isValid) {\n      // make ajax post end point with values\n      // fetch(\"/post\",values);\n\n      // if error from backend , set Errors - passing key value pair\n      // set Errors on the form\n      form.setFieldErrors({\n        first_name: 'First Name must be unique <<Server Error>>',\n      });\n\n      // reset the form if required if success\n      // formRef.current.doReset(e);\n    }\n\n    });\n    document.querySelector('#reset').addEventListener('click', (e) => {\n      form.doReset(e);\n    });\n    var formSchema = {\n    name: 'Test Form',\n    fields: [\n      {\n        id: '2978f820-704b-46c7-9f88-110e14e34a8c',\n        name: 'first_name',\n        label: 'First Name',\n        type: 'TEXT',\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide a text of at max 100 characters',\n        choices: [],\n      },\n\n      {\n        id: '3978f820-704b-46c7-9f88-110e14e34a8c',\n        name: 'last_name',\n        label: 'Last Name',\n        type: 'TEXT',\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide a text of at max 100 characters',\n        choices: [],\n      },\n\n      {\n        id: '42aecb8f-25cf-47ce-89c6-5410fe3d4315',\n        name: 'languages_known',\n        label: 'Languages Known',\n        type: 'MULTI_SELECT',\n        position: 13,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Select one or more values',\n        choices: [\n          {\n            id: 1,\n            value: 'English',\n            position: 1,\n            dependent_ids: {},\n          },\n          {\n            id: 2,\n            value: 'Hindi',\n            position: 2,\n            dependent_ids: {},\n          },\n          {\n            id: 3,\n            value: 'Tamil',\n            position: 3,\n            dependent_ids: {},\n          },\n        ],\n      },\n\n      {\n        id: '6978f820-704b-46c7-9f88-110e14e34a8c',\n        name: 'email',\n        label: 'Email',\n        type: 'EMAIL',\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide an email Id',\n        choices: [],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'date_of_birth',\n        label: 'Date Of Birth',\n        type: 'DATE',\n        position: 11,\n        required: true,\n        Placeholder: 'Enter…',\n        hint: 'Please enter your date of birth',\n        choices: [],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'landmark',\n        label: 'Landmark',\n        type: 'PARAGRAPH',\n        position: 7,\n        required: true,\n        Placeholder: 'Enter some text…',\n        hint: 'Please enter the nearest landmark',\n        choices: [],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'is_indian_citizen',\n        label: 'Indian Citizen?',\n        type: 'CHECKBOX',\n        position: 7,\n        required: true,\n        placeholder: null,\n        hint: 'Check or Uncheck the box',\n        choices: [],\n      },\n\n      {\n        id: '8978f820-704b-46c7-9f88-110e14e34a8c',\n        name: 'phone_number',\n        label: 'Phone number',\n        type: 'TEXT',\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide your phone number',\n        choices: [],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'pincode',\n        label: 'Pincode',\n        type: 'NUMBER',\n        position: 8,\n        required: false,\n        Placeholder: 'Enter…',\n        hint: 'Please enter your Pincode',\n        choices: [],\n      },\n\n      {\n        id: 'ba53775e-2948-4065-8a59-d99d4494e845',\n        name: 'gender',\n        label: 'Gender',\n        type: 'RADIO',\n        position: 5,\n        required: true,\n        placeholder: null,\n        hint: 'Please specify your gender',\n        choices: [\n          {\n            id: 1,\n            value: 'Female',\n            position: 1,\n            dependent_ids: {},\n          },\n          {\n            id: 2,\n            value: 'Male',\n            position: 2,\n            dependent_ids: {},\n          },\n        ],\n      },\n\n      {\n        id: '42aecb8f-25cf-47ce-89c6-5410fe3d4315',\n        name: 'order_status',\n        label: 'Order Status',\n        type: 'DROPDOWN',\n        position: 4,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Select a value',\n        choices: [\n          {\n            id: 1,\n            value: 'open',\n            position: 1,\n            dependent_ids: {},\n          },\n          {\n            id: 2,\n            value: 'pending',\n            position: 2,\n            dependent_ids: {},\n          },\n          {\n            id: 3,\n            value: 'closed',\n            position: 3,\n            dependent_ids: {},\n          },\n        ],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'amount_paid',\n        label: 'Amount Paid',\n        type: 'DECIMAL',\n        position: 10,\n        required: true,\n        Placeholder: 'Enter…',\n        hint: 'Please enter the amount paid',\n        choices: [],\n      },\n    ],\n\n};\nvar initialValues = {\nis_indian_citizen: true,\n};\nformContainer.prepend(form);\n// do any customisation on the field schema to match the props of crayons components.\nconst fields = formSchema?.fields?.map((field) => {\n// select expects `text` and `value` prop\nif (field.type === \"DROPDOWN\" || field.type === \"MULTI_SELECT\") {\nreturn {\n...field,\nchoices: field.choices?.map((f) =>{\nreturn {\n...f,\ntext: f.value,\nvalue: f.id\n}\n})\n};\n} else return field;\n});\n\nconst formSchema1 = {\n...formSchema,\nfields: fields,\n};\nform.formSchema = formSchema1;\n\nform.initialValues = initialValues;\n</script>\n\n````\n\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React, {useRef} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {FwForm,FwButton} from \"@freshworks/crayons/react\";\nfunction App() {\n  const formSchema = {\n  name: \"Test Form\",\n  fields: [\n      {\n        id: '2978f820-704b-46c7-9f88-110e14e34a8c',\n        name: 'first_name',\n        label: 'First Name',\n        type: 'TEXT',\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide a text of at max 100 characters',\n        choices: [],\n      },\n\n      {\n        id: '3978f820-704b-46c7-9f88-110e14e34a8c',\n        name: 'last_name',\n        label: 'Last Name',\n        type: 'TEXT',\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide a text of at max 100 characters',\n        choices: [],\n      },\n\n      {\n        id: '42aecb8f-25cf-47ce-89c6-5410fe3d4315',\n        name: 'languages_known',\n        label: 'Languages Known',\n        type: 'MULTI_SELECT',\n        position: 13,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Select one or more values',\n        choices: [\n          {\n            id: 1,\n            value: 'English',\n            position: 1,\n            dependent_ids: {},\n          },\n          {\n            id: 2,\n            value: 'Hindi',\n            position: 2,\n            dependent_ids: {},\n          },\n          {\n            id: 3,\n            value: 'Tamil',\n            position: 3,\n            dependent_ids: {},\n          },\n        ],\n      },\n\n      {\n        id: '6978f820-704b-46c7-9f88-110e14e34a8c',\n        name: 'email',\n        label: 'Email',\n        type: 'EMAIL',\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide an email Id',\n        choices: [],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'date_of_birth',\n        label: 'Date Of Birth',\n        type: 'DATE',\n        position: 11,\n        required: true,\n        Placeholder: 'Enter…',\n        hint: 'Please enter your date of birth',\n        choices: [],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'landmark',\n        label: 'Landmark',\n        type: 'PARAGRAPH',\n        position: 7,\n        required: true,\n        Placeholder: 'Enter some text…',\n        hint: 'Please enter the nearest landmark',\n        choices: [],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'is_indian_citizen',\n        label: 'Indian Citizen?',\n        type: 'CHECKBOX',\n        position: 7,\n        required: true,\n        placeholder: null,\n        hint: 'Check or Uncheck the box',\n        choices: [],\n      },\n\n      {\n        id: '8978f820-704b-46c7-9f88-110e14e34a8c',\n        name: 'phone_number',\n        label: 'Phone number',\n        type: 'TEXT',\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide your phone number',\n        choices: [],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'pincode',\n        label: 'Pincode',\n        type: 'NUMBER',\n        position: 8,\n        required: false,\n        Placeholder: 'Enter…',\n        hint: 'Please enter your Pincode',\n        choices: [],\n      },\n\n      {\n        id: 'ba53775e-2948-4065-8a59-d99d4494e845',\n        name: 'gender',\n        label: 'Gender',\n        type: 'RADIO',\n        position: 5,\n        required: true,\n        placeholder: null,\n        hint: 'Please specify your gender',\n        choices: [\n          {\n            id: 1,\n            value: 'Female',\n            position: 1,\n            dependent_ids: {},\n          },\n          {\n            id: 2,\n            value: 'Male',\n            position: 2,\n            dependent_ids: {},\n          },\n        ],\n      },\n\n      {\n        id: '42aecb8f-25cf-47ce-89c6-5410fe3d4315',\n        name: 'order_status',\n        label: 'Order Status',\n        type: 'DROPDOWN',\n        position: 4,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Select a value',\n        choices: [\n          {\n            id: 1,\n            value: 'open',\n            position: 1,\n            dependent_ids: {},\n          },\n          {\n            id: 2,\n            value: 'pending',\n            position: 2,\n            dependent_ids: {},\n          },\n          {\n            id: 3,\n            value: 'closed',\n            position: 3,\n            dependent_ids: {},\n          },\n        ],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'amount_paid',\n        label: 'Amount Paid',\n        type: 'DECIMAL',\n        position: 10,\n        required: true,\n        Placeholder: 'Enter…',\n        hint: 'Please enter the amount paid',\n        choices: [],\n      },\n    ],\n\n};\n// do any customisation on the field schema to match the props of crayons components.\nvar fields = formSchema?.fields?.map((field) => {\n// select expects `text` and `value` prop\nif (field.type === \"DROPDOWN\" || field.type === \"MULTI_SELECT\") {\nreturn {\n...field,\nchoices: field.choices?.map((f) =>{\nreturn {\n...f,\ntext: f.value,\nvalue: f.id\n}\n})\n};\n} else return field;\n});\n\nvar formSchema1 = {\n...formSchema,\nfields: fields,\n};\n\nconst initialValues = {\nis_indian_citizen: true,\nemail: \"test\",\n};\nconst formRef = useRef<any>(null);\nconst handleFormSubmit = async (e: any) => {\nconst { values, isValid, errors } = await formRef.current.doSubmit(e);\nconsole.log({ result: values, errors });\n\n    // make ajax post end point with values\n    // fetch(\"/post\",values);\n\n    // if error from backend , set Errors - passing key value pair\n    if (isValid) {\n      // set Errors on the form\n      formRef.current.setFieldErrors({\n        first_name: \"First Name must be unique <<Server Error>>\",\n      });\n      // reset the form if required if success\n      // formRef.current.doReset(e);\n    }\n\n};\nconst handleFormReset = (e: any) => {\nformRef.current.doReset(e);\n};\nreturn (<div>\n<FwForm ref={formRef} formSchema={formSchema1} initialValues={initialValues}\nvalidate={async (values:any) => { // do custom validation and return error or {}\nreturn {\n// last_name: \"last name is errored\",\n};\n}} >\n</FwForm>\n<FwButton color=\"secondary\" onClick={handleFormReset}>\nReset Form\n</FwButton>\n<FwButton onClick={handleFormSubmit}>Submit Form</FwButton>\n\n</div>);\n}\n\n````\n\n</code-block>\n</code-group>\n\n## Text and Value indicators for select (DROPDOWN/MULTI_SELECT) component choices\n\nThe choices for select component(`dropdown/multi_select`) can follow any of the below formats.\n\n1. Using `field_options` object. Pass the key name that needs to be displayed as the dropdown option's text using, `option_label_path` and the key name that needs to to be processed in the backend using, `option_value_path`.\n\n```\n{\n  id: '420oib8f-25cf-47ce-89c6-5410fe3d4315',\n  name: 'languages_known',\n  label: 'Languages Known',\n  type: 'MULTI_SELECT',\n  position: 1,\n  required: true,\n  placeholder: 'Choose',\n  hint: 'Select one or more values',\n  field_options: {\n    option_label_path: 'value', // This denotes 'value' in the choices object needs to be displayed as the dropdown option text,i.e English & Hindi\n    option_value_path: 'id',  // This denotes 'id' in the choices object needs to be used as the dropdown option's value for backend\n  },\n  choices: [\n    {\n      id: 1,  // this will be passed to the backend if `English` has been selected in the dropdown options.\n      value: 'English',  // This will be displayed in the dropdown options list.\n      position: 1,\n      dependent_ids: {},\n    },\n    {\n      id: 2,\n      value: 'Hindi',\n      position: 2,\n      dependent_ids: {},\n    },\n  ],\n}\n```\n\n#### Usage with field_options\n\n```html live\n<div id=\"form-container-2\">\n  <fw-button id=\"submit_2\">Submit</fw-button>\n  <fw-button id=\"reset_2\">Reset</fw-button>\n</div>\n<script type=\"application/javascript\">\n  var form_2 = document.createElement('fw-form');\n  var formContainer_2 = document.querySelector('#form-container-2');\n  document.querySelector('#submit_2').addEventListener('click', async (e) => {\n    const { values, isValid } = await form_2.doSubmit(e);\n    console.log({ values, isValid });\n  });\n  document.querySelector('#reset_2').addEventListener('click', (e) => {\n    form_2.doReset(e);\n  });\n  var formSchema2 = {\n    name: 'Test Form 2',\n    fields: [\n      {\n        id: '2979i920-704b-46c7-9f88-110e14e34a8c',\n        name: 'first_name',\n        label: 'First Name',\n        type: 'TEXT',\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide a text of at max 100 characters',\n        choices: [],\n      },\n\n      {\n        id: 'gh67f820-704b-46c7-9f88-110e14e34a8c',\n        name: 'last_name',\n        label: 'Last Name',\n        type: 'TEXT',\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide a text of at max 100 characters',\n        choices: [],\n      },\n\n      {\n        id: 'vbg56b8f-25cf-47ce-89c6-5410fe3d4315',\n        name: 'languages_known',\n        label: 'Languages Known',\n        type: 'MULTI_SELECT',\n        position: 13,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Select one or more values',\n        field_options: {\n          option_label_path: 'value',\n          option_value_path: 'id',\n        },\n        choices: [\n          {\n            id: 1,\n            value: 'English',\n            position: 1,\n            dependent_ids: {},\n          },\n          {\n            id: 2,\n            value: 'Hindi',\n            position: 2,\n            dependent_ids: {},\n          },\n          {\n            id: 3,\n            value: 'Tamil',\n            position: 3,\n            dependent_ids: {},\n          },\n        ],\n      },\n\n      {\n        id: 'hjuy7820-704b-46c7-9f88-110e14e34a8c',\n        name: 'email',\n        label: 'Email',\n        type: 'EMAIL',\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide an email Id',\n        choices: [],\n      },\n      {\n        id: 'redf5820-704b-46c7-9f88-110e14e34a8c',\n        name: 'phone_number',\n        label: 'Phone number',\n        type: 'TEXT',\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide your phone number',\n        choices: [],\n      },\n    ],\n  };\n  formContainer_2.prepend(form_2);\n  form_2.formSchema = formSchema2;\n  form_2.initialValues = initialValues;\n</script>\n```\n\n2. Using `text` and `value` as key names in choices\n\n```\n{\n  id: '127yub8f-25cf-47ce-89c6-67yufe3d4315',\n  name: 'languages_known',\n  label: 'Languages Known',\n  type: 'MULTI_SELECT',\n  position: 1,\n  required: true,\n  placeholder: 'Choose',\n  hint: 'Select one or more values',\n  choices: [\n    {\n      value: 1,  // this will be passed to the backend if `English` has been selected in the dropdown options.\n      text: 'English',  // This will be displayed in the dropdown options list.\n      position: 1,\n      dependent_ids: {},\n    },\n    {\n      id: 2,\n      value: 'Hindi',\n      position: 2,\n      dependent_ids: {},\n    },\n  ],\n}\n```\n\n#### Usage with `text` and `value` as keys in `choices`\n\n```html live\n<div id=\"form-container-3\">\n  <fw-button id=\"submit_3\">Submit</fw-button>\n  <fw-button id=\"reset_3\">Reset</fw-button>\n</div>\n<script type=\"application/javascript\">\n  var form_3 = document.createElement('fw-form');\n  var formContainer_3 = document.querySelector('#form-container-3');\n  document.querySelector('#submit_3').addEventListener('click', async (e) => {\n    const { values, isValid } = await form_3.doSubmit(e);\n    console.log({ values, isValid });\n  });\n  document.querySelector('#reset_3').addEventListener('click', (e) => {\n    form_3.doReset(e);\n  });\n  var formSchema3 = {\n    name: 'Test Form 3',\n    fields: [\n      {\n        id: 'juik9920-704b-46c7-9f88-110e14e34a8c',\n        name: 'first_name',\n        label: 'First Name',\n        type: 'TEXT',\n        position: 1,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide a text of at max 100 characters',\n        choices: [],\n      },\n\n      {\n        id: 'yuhuj820-704b-46c7-9f88-110e14e34a8c',\n        name: 'last_name',\n        label: 'Last Name',\n        type: 'TEXT',\n        position: 2,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide a text of at max 100 characters',\n        choices: [],\n      },\n\n      {\n        id: 'cdsre4b8f-25cf-47ce-89c6-5410fe3d4315',\n        name: 'languages_known',\n        label: 'Languages Known',\n        type: 'MULTI_SELECT',\n        position: 5,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Select one or more values',\n        choices: [\n          {\n            value: 1,\n            text: 'English',\n            position: 1,\n            dependent_ids: {},\n          },\n          {\n            value: 2,\n            text: 'Hindi',\n            position: 2,\n            dependent_ids: {},\n          },\n          {\n            value: 3,\n            text: 'Tamil',\n            position: 3,\n            dependent_ids: {},\n          },\n        ],\n      },\n\n      {\n        id: '56t7y820-704b-46c7-9f88-110e14e34a8c',\n        name: 'email',\n        label: 'Email',\n        type: 'EMAIL',\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide an email Id',\n        choices: [],\n      },\n      {\n        id: 'e34r5820-704b-46c7-9f88-110e14e34a8c',\n        name: 'phone_number',\n        label: 'Phone number',\n        type: 'TEXT',\n        position: 4,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide your phone number',\n        choices: [],\n      },\n    ],\n  };\n  formContainer_3.prepend(form_3);\n  form_3.formSchema = formSchema3;\n  form_3.initialValues = initialValues;\n</script>\n```\n\n## Demo Static Form\n\nYou can pass `initialValues` to the form. Wrap all the form controls with `form-control` under `fw-form`.\n\nFor `Crayons` controls just pass the `type`, `name`, `placeholder`,`required`, `label` properties to `fw-form-control`.\n\nFor `custom` input controls, pass the custom input as `slot` to `fw-form-control`. You can pass the `type`, `name`, `required`, `label` properties to `fw-form-control`. For setting its value in the form, use the method like `handleCustomInput` shown in the below example.\n\n```html live\n<div id=\"static-form-container\">\n  <fw-form id=\"fw-static-form\">\n    <fw-form-control\n      type=\"TEXT\"\n      name=\"first_name\"\n      placeholder=\"First Name\"\n      required\n      label=\"First Name\"\n      id=\"first_name\"\n    ></fw-form-control>\n\n    <fw-form-control\n      type=\"TEXT\"\n      name=\"last_name\"\n      placeholder=\"Last Name\"\n      required\n      label=\"Last Name\"\n      id=\"last_name\"\n    ></fw-form-control>\n\n    <fw-form-control name=\"cin\" type=\"TEXT\" required label=\"Custom native in\">\n      <input name=\"cin\" id=\"cin\" placeholder=\"custom input\" autocomplete=\"off\"\n    /></fw-form-control>\n  </fw-form>\n  <fw-button id=\"submit-static-form\">Submit</fw-button>\n  <fw-button id=\"reset-static-form\">Reset</fw-button>\n</div>\n<script type=\"application/javascript\">\n  var formStatic = document.querySelector('#fw-static-form');\n  document\n    .querySelector('#submit-static-form')\n    .addEventListener('click', async (e) => {\n      const { values, isValid } = await formStatic.doSubmit(e);\n      console.log({ values, isValid });\n\n      if (isValid) {\n        // make ajax post end point with values\n        // fetch(\"/post\",values);\n\n        // if error from backend , set Errors - passing key value pair\n        formStatic.setFieldErrors({\n          first_name: 'First Name must be unique <<Server Error>>',\n        });\n\n        // reset the form if required if success\n        // formRef.current.doReset(e);\n      }\n    });\n  document\n    .querySelector('#reset-static-form')\n    .addEventListener('click', (e) => {\n      if (document.querySelector('#cin'))\n        document.querySelector('#cin').value = '';\n      formStatic.doReset(e);\n    });\n\n  var initialValues = {\n    first_name: 'John',\n  };\n  formStatic.initialValues = initialValues;\n\n  function handleCustomInput(e) {\n    console.log('handle input');\n    formStatic.setFieldValue([e.target.name], e.target.value);\n  }\n\n  document.querySelector('#cin').addEventListener('input', handleCustomInput);\n  document.querySelector('#cin').addEventListener('change', handleCustomInput);\n  document.querySelector('#cin').addEventListener('blur', handleCustomInput);\n</script>\n```\n\n## Usage Static Form\n\n<code-group>\n<code-block title=\"HTML\">\n```html\n<div id=\"static-form-container\">\n  <fw-form id=\"fw-static-form\">\n      <fw-form-control\n      type=\"TEXT\"\n      name=\"first_name\"\n      placeholder=\"First Name\"\n      required\n      label=\"First Name\"\n      id=\"first_name\"\n    ></fw-form-control>\n\n    <fw-form-control\n      type=\"TEXT\"\n      name=\"last_name\"\n      placeholder=\"Last Name\"\n      required\n      label=\"Last Name\"\n      id=\"last_name\"\n    ></fw-form-control>\n\n    <fw-form-control\n      name=\"cin\"\n      required\n      label=\"Custom native in\"\n    >\n    <input name=\"cin\" id=\"cin\" placeholder=\"custom input\"\n    autocomplete=\"off\"\n    /></fw-form-control>\n    </fw-form>\n\n<fw-button id=\"submit-static-form\">Submit</fw-button>\n<fw-button id=\"reset-static-form\">Reset</fw-button>\n\n</div>\n<script type=\"application/javascript\">\n  var formStatic = document.querySelector(\"#fw-static-form\")\n  document.querySelector('#submit-static-form').addEventListener('click', async (e) => {\n    const { values, isValid } = await formStatic.doSubmit(e);\n    console.log({ values, isValid });\n\n    if (isValid) {\n      // make ajax post end point with values\n      // fetch(\"/post\",values);\n\n      // if error from backend , set Errors - passing key value pair\n      formStatic.setFieldErrors({\n        first_name: 'First Name must be unique <<Server Error>>',\n      });\n\n      // reset the form if required if success\n      // formRef.current.doReset(e);\n    }\n\n});\ndocument.querySelector('#reset-static-form').addEventListener('click', (e) => {\nif (document.querySelector('#cin'))\ndocument.querySelector('#cin').value = '';\nformStatic.doReset(e);\n});\n\nvar initialValues = {\nfirst_name: \"John\",\n};\nformStatic.initialValues = initialValues;\n\nfunction handleCustomInput(e) {\nconsole.log('handle input');\nformStatic.setFieldValue([e.target.name], e.target.value);\n}\n\ndocument.querySelector('#cin').addEventListener('input', handleCustomInput);\ndocument.querySelector('#cin').addEventListener('change', handleCustomInput);\ndocument.querySelector('#cin').addEventListener('blur', handleCustomInput);\n</script>\n\n````\n\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React, {useRef} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {FwForm, FwFormControl,FwButton} from \"@freshworks/crayons/react\";\nfunction App() {\n\nconst initialValues = {\nfirst_name:\"John\"\n};\nconst formRef = useRef<any>(null);\nconst handleFormSubmit = async (e: any) => {\nconst { values, isValid, errors } = await formRef.current.doSubmit(e);\nconsole.log({ result: values, errors });\n\n      // make ajax post end point with values\n      // fetch(\"/post\",values);\n\n      // if error from backend , set Errors - passing key value pair\n      if (isValid) {\n        // set Errors on the form\n        formRef.current.setFieldErrors({\n          first_name: \"First Name must be unique <<Server Error>>\",\n        });\n        // reset the form if required if success\n        // formRef.current.doReset(e);\n      }\n    };\n\nconst handleFormReset = (e: any) => {\nformRef.current.doReset(e);\n};\nreturn (<div>\n<FwForm ref={formRef} initialValues={initialValues}\nvalidate={async (values:any) => { // do custom validation and return error or {}\nif(!cin || !cin.length) {\nreturn {\ncin: \"cin is required\",\n};\n}\nreturn {}\n}}>\n<FwFormControl\ntype=\"TEXT\"\nname=\"first_name\"\nrequired\nlabel=\"Name\"\nplaceholder=\"Enter First Name\"\nfieldProps={{ maxlength: 5 }} ></FwFormControl>\n\n              <FwFormControl\n                  type=\"TEXT\"\n                  name=\"cin\"\n                  required\n                  label=\"Custom Input\"\n              >\n                  <input\n                    placeholder=\"cin\"\n                    id=\"cin\"\n                    maxLength={5}\n                    name=\"cin\"\n                    required\n                    onChange={(e) =>\n                      formRef.current.setFieldValue(\"cin\", e.target.value, true)\n                    }\n                    onBlur={(e) =>\n                      formRef.current.setFieldValue(\"cin\", e.target.value, true)\n                    }\n                  ></input>\n              </FwFormControl>\n            </FwForm>\n            <FwButton color=\"secondary\" onClick={handleFormReset}>Reset Form</FwButton>\n            <FwButton onClick={handleFormSubmit}>Submit Form</FwButton>\n\n  </div>);\n}\n\n````\n\n</code-block>\n</code-group>\n\n## Demo - Form inside an accordion\n\nForm can be created inside an accordion by passing the form to accordion body.\n\n```html live\n<div style=\"width: 300px;\">\n  <fw-accordion expanded style=\"--fw-accordion-border: 1px solid #ccc\">\n    <fw-accordion-title\n      style=\"--fw-accordion-title-background-color: #F5F7F9; --fw-accordion-title-expanded-icon-color: #2C5CC5; --fw-accordion-title-collapsed-icon-color: #264966;\n      --fw-accordion-title-font-size: 14px; --fw-accordion-title-font-weight: 600; --fw-accordion-title-line-height: 20px;\"\n      >Title</fw-accordion-title\n    >\n    <fw-accordion-body style=\"--fw-accordion-body-background-color: #FFFFFF\">\n      <div id=\"accordion-form\">\n        <fw-button\n          id=\"accordion-form-submit\"\n          color=\"secondary\"\n          style=\"display: block; margin-bottom:10px;\"\n          >Submit</fw-button\n        >\n        <fw-button id=\"accordion-form-reset\" style=\"display: block;\"\n          >Reset</fw-button\n        >\n      </div>\n    </fw-accordion-body>\n  </fw-accordion>\n</div>\n\n<script type=\"application/javascript\">\n  var accForm = document.createElement('fw-form');\n  var accFormContainer = document.querySelector('#accordion-form');\n  document\n    .querySelector('#accordion-form-submit')\n    .addEventListener('click', async (e) => {\n      const { values, isValid } = await accForm.doSubmit(e);\n      console.log({ values, isValid });\n\n      if (!isValid) {\n        // if error from backend , set Errors - passing key value pair\n        accForm.setFieldErrors({\n          first_name: 'First Name must be unique <<Server Error>>',\n        });\n      }\n    });\n  document\n    .querySelector('#accordion-form-reset')\n    .addEventListener('click', (e) => {\n      accForm.doReset(e);\n    });\n  var accFormSchema = {\n    name: 'Test Form',\n    fields: [\n      {\n        id: '2978f2320-704b-46c7-9f88-110e14e34q3c',\n        name: 'first_name',\n        label: 'First Name',\n        type: 'TEXT',\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide a text of at max 100 characters',\n        choices: [],\n      },\n\n      {\n        id: '3971f8320-704b-46c7-9f88-110e1j934a8c',\n        name: 'last_name',\n        label: 'Last Name',\n        type: 'TEXT',\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide a text of at max 100 characters',\n        choices: [],\n      },\n\n      {\n        id: '42aeh88f-25cf-46yce-89r5-5410fe3d4315',\n        name: 'languages_known',\n        label: 'Languages Known',\n        type: 'MULTI_SELECT',\n        position: 13,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Select one or more values',\n        choices: [\n          {\n            id: 1,\n            value: 'English',\n            position: 1,\n            dependent_ids: {},\n          },\n          {\n            id: 2,\n            value: 'Hindi',\n            position: 2,\n            dependent_ids: {},\n          },\n          {\n            id: 3,\n            value: 'Tamil',\n            position: 3,\n            dependent_ids: {},\n          },\n        ],\n      },\n\n      {\n        id: '69e48f820-704b-49o7-9f88-110e14e34a8c',\n        name: 'email',\n        label: 'Email',\n        type: 'EMAIL',\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide an email Id',\n        choices: [],\n      },\n\n      {\n        id: '8u878cg20-704b-46c7-9f88-110e14e34a8c',\n        name: 'phone_number',\n        label: 'Phone number',\n        type: 'TEXT',\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide your phone number',\n        choices: [],\n      },\n    ],\n  };\n  accFormContainer.prepend(accForm);\n  var fields = accFormSchema.fields.map((field) => {\n    // select expects `text` and `value` prop\n    if (field.type === 'DROPDOWN' || field.type === 'MULTI_SELECT') {\n      return {\n        ...field,\n        choices: field.choices?.map((f) => {\n          return {\n            ...f,\n            text: f.value,\n            value: f.id,\n          };\n        }),\n      };\n    } else return field;\n  });\n\n  var accFormSchema1 = {\n    ...accFormSchema,\n    fields: fields,\n  };\n  accForm.formSchema = accFormSchema1;\n</script>\n```\n\n## Usage - Form inside an accordion\n\n<code-group>\n<code-block title=\"HTML\">\n  ```html\n  <fw-accordion expanded style=\"--fw-accordion-border: 1px solid #ccc\">\n    <fw-accordion-title style=\"--fw-accordion-title-background-color: #F5F7F9; --fw-accordion-title-expanded-icon-color: #2C5CC5; --fw-accordion-title-collapsed-icon-color: #264966;\n        --fw-accordion-title-font-size: 14px; --fw-accordion-title-font-weight: 600; --fw-accordion-title-line-height: 20px;\">Header Text</fw-accordion-title>\n    <fw-accordion-body style=\"--fw-accordion-body-background-color: #FFFFFF\">\n      <div id=\"accordion-form-2\">\n        <fw-button id=\"acc-form-2-submit\" color=\"secondary\" style=\"display: block; margin-bottom:10px;\">Submit</fw-button>\n        <fw-button id=\"acc-form-2-reset\" style=\"display: block;\">Reset</fw-button>\n      </div>\n    </fw-accordion-body>\n  </fw-accordion>\n\n  <script type=\"application/javascript\">\n    var accForm_2 = document.createElement('fw-form');\n    var accformContainer_2 = document.querySelector('#accordion-form-2');\n    document.querySelector('#acc-form-2-submit').addEventListener('click', async (e) => {\n      const { values, isValid } = await accForm_2.doSubmit(e);\n      console.log({ values, isValid });\n\n      if (!isValid) {\n        // if error from backend , set Errors - passing key value pair\n        accForm_2.setFieldErrors({\n          first_name: 'First Name must be unique <<Server Error>>',\n        });\n      }\n    });\n    document.querySelector('#acc-form-2-reset').addEventListener('click', (e) => {\n      accForm_2.doReset(e);\n    });\n    var accFormSchema2 = {\n      name: 'Test Form',\n      fields: [\n        {\n          id: '2978f2320-704b-46c7-g788-110e14e34a8c',\n          name: 'first_name',\n          label: 'First Name',\n          type: 'TEXT',\n          position: 3,\n          required: true,\n          placeholder: 'Enter…',\n          hint: 'Please provide a text of at max 100 characters',\n          choices: [],\n        },\n\n        {\n          id: '3971f8090-704b-46c7-9f88-110e14e34a8c',\n          name: 'last_name',\n          label: 'Last Name',\n          type: 'TEXT',\n          position: 3,\n          required: true,\n          placeholder: 'Enter…',\n          hint: 'Please provide a text of at max 100 characters',\n          choices: [],\n        },\n\n        {\n          id: '69e48f820-704b-46c7-9f88-11r514e34a8c',\n          name: 'email',\n          label: 'Email',\n          type: 'EMAIL',\n          position: 3,\n          required: true,\n          placeholder: 'Enter…',\n          hint: 'Please provide an email Id',\n          choices: [],\n        },\n\n        {\n          id: '8u87lo820-704b-46c7-9f88-110e14e34a8c',\n          name: 'phone_number',\n          label: 'Phone number',\n          type: 'TEXT',\n          position: 3,\n          required: true,\n          placeholder: 'Enter…',\n          hint: 'Please provide your phone number',\n          choices: [],\n        }\n      ],\n    };\n    accformContainer_2.prepend(accForm_2);\n    accForm_2.formSchema = accFormSchema2;\n  </script>\n\n````\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React, {useRef} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {FwAccordion, FwAccordionTitle, FwAccordionBody, FwForm,FwButton} from \"@freshworks/crayons/react\";\nfunction App() {\n\nvar accFormSchema3 = {\n  name: 'Test Form',\n  fields: [\n    {\n      id: '2978f2320-704b-46c7-9f88-110e14e34a8c',\n      name: 'first_name',\n      label: 'First Name',\n      type: 'TEXT',\n      position: 3,\n      required: true,\n      placeholder: 'Enter…',\n      hint: 'Please provide a text of at max 100 characters',\n      choices: [],\n    },\n\n    {\n      id: '3971f8320-704b-46c7-9f88-110e14e34a8c',\n      name: 'last_name',\n      label: 'Last Name',\n      type: 'TEXT',\n      position: 3,\n      required: true,\n      placeholder: 'Enter…',\n      hint: 'Please provide a text of at max 100 characters',\n      choices: [],\n    },\n\n    {\n      id: '69e48f820-704b-46c7-9f88-110e14e34a8c',\n      name: 'email',\n      label: 'Email',\n      type: 'EMAIL',\n      position: 3,\n      required: true,\n      placeholder: 'Enter…',\n      hint: 'Please provide an email Id',\n      choices: [],\n    },\n\n    {\n      id: '8u878f820-704b-46c7-9f88-110e14e34a8c',\n      name: 'phone_number',\n      label: 'Phone number',\n      type: 'TEXT',\n      position: 3,\n      required: true,\n      placeholder: 'Enter…',\n      hint: 'Please provide your phone number',\n      choices: [],\n    }\n  ],\n};\n\nconst accFormRef = useRef<any>(null);\n\nconst handleFormSubmit = async (e: any) => {\n  const { values, isValid, errors } = await accFormRef.current.doSubmit(e);\n  console.log({ result: values, errors });\n\n  // if error from backend , set Errors - passing key value pair\n  if (isValid) {\n    // set Errors on the form\n    accFormRef.current.setFieldErrors({\n      first_name: \"First Name must be unique <<Server Error>>\",\n    });\n    // reset the form if required if success\n    // accFormRef.current.doReset(e);\n  }\n};\n\nconst handleFormReset = (e: any) => {\n  accFormRef.current.doReset(e);\n};\n\nreturn (\n  <div>\n    <FwAccordion expanded style={{\"--fw-accordion-border\": \"1px solid #ccc\"}} >\n      <FwAccordionTitle style={{ \"--fw-accordion-title-background-color\":  \"#F5F7F9\", \"--fw-accordion-title-expanded-icon-color\" : \"#2C5CC5\", \"--fw-accordion-title-collapsed-icon-color\" : \"#264966\", \"--fw-accordion-title-font-size\": \"14px\", \"--fw-accordion-title-font-weight\" : \"600\", \"--fw-accordion-title-line-height\" : \"20px\"}}>Header Text</FwAccordionTitle>\n      <FwAccordionBody style={{\"--fw-accordion-body-background-color\" : \"#FFFFFF\"}}>\n          <FwForm ref={accFormRef} formSchema={accFormSchema3}\n            validate={async (values:any) => { // do custom validation and return error or {}\n            return {\n            // last_name: \"last name is errored\",\n            };\n            }} >\n          </FwForm>\n          <FwButton id=\"acc-form-3-submit\" color=\"secondary\" style={{\"display\": \"block\", \"marginBottom\": \"10px\"}} onClick={handleFormSubmit}>Submit</FwButton>\n          <FwButton id=\"acc-form-3-reset\" style={{\"display\": \"block\"}} onClick={handleFormReset}>Reset</FwButton>\n      </FwAccordionBody>\n    </FwAccordion>\n  </div>\n)\n}\n````\n\n</code-block>\n</code-group>\n\n## FORMSERV - mapperType\n\nSet `FORMSERV` to `mapperType` prop to use `FORMSERV` schema instead of default `LEGO` schema.\n\n```html live\n<div id=\"form-container-fs\">\n  <fw-button id=\"submit-fs\">Submit</fw-button>\n  <fw-button id=\"reset-fs\">Reset</fw-button>\n</div>\n<script type=\"application/javascript\">\n  var formFs = document.createElement('fw-form');\n  var formContainerFs = document.querySelector('#form-container-fs');\n\n  document.querySelector('#submit-fs').addEventListener('click', async (e) => {\n    const { values, isValid } = await formFs.doSubmit(e);\n    console.log({ values, isValid });\n\n    if (isValid) {\n      // make ajax post end point with values\n      // fetch(\"/post\",values);\n\n      // if error from backend , set Errors - passing key value pair\n      formFs.setFieldErrors({\n        first_name: 'First Name must be unique <<Server Error>>',\n      });\n\n      // reset the form if required if success\n      // formRef.current.doReset(e);\n    }\n  });\n  document.querySelector('#reset-fs').addEventListener('click', (e) => {\n    formFs.doReset(e);\n  });\n  var formServSchema = {\n    name: 'Test Form',\n    fields: [\n      {\n        id: '2978f820-704b-46c7-9f88-110e14e34a8c',\n        name: 'first_name',\n        label: 'First Name',\n        type: 1,\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide a text of at max 100 characters',\n        choices: [],\n      },\n\n      {\n        id: '3978f820-704b-46c7-9f88-110e14e34a8c',\n        name: 'last_name',\n        label: 'Last Name',\n        type: 1,\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide a text of at max 100 characters',\n        choices: [],\n      },\n\n      {\n        id: '42aecb8f-25cf-47ce-89c6-5410fe3d4315',\n        name: 'languages_known',\n        label: 'Languages Known',\n        type: 18,\n        position: 13,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Select one or more values',\n        choices: [\n          {\n            id: 1,\n            value: 'English',\n            position: 1,\n            dependent_ids: {},\n          },\n          {\n            id: 2,\n            value: 'Hindi',\n            position: 2,\n            dependent_ids: {},\n          },\n          {\n            id: 3,\n            value: 'Tamil',\n            position: 3,\n            dependent_ids: {},\n          },\n        ],\n      },\n\n      {\n        id: '6978f820-704b-46c7-9f88-110e14e34a8c',\n        name: 'email',\n        label: 'Email',\n        type: 3,\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide an email Id',\n        choices: [],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'date_of_birth',\n        label: 'Date Of Birth',\n        type: 7,\n        position: 11,\n        required: true,\n        Placeholder: 'Enter…',\n        hint: 'Please enter your date of birth',\n        choices: [],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'landmark',\n        label: 'Landmark',\n        type: 6,\n        position: 7,\n        required: true,\n        Placeholder: 'Enter some text…',\n        hint: 'Please enter the nearest landmark',\n        choices: [],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'is_indian_citizen',\n        label: 'Indian Citizen?',\n        type: 5,\n        position: 7,\n        required: true,\n        placeholder: null,\n        hint: 'Check or Uncheck the box',\n        choices: [],\n      },\n\n      {\n        id: '8978f820-704b-46c7-9f88-110e14e34a8c',\n        name: 'phone_number',\n        label: 'Phone number',\n        type: 1,\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide your phone number',\n        choices: [],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'pincode',\n        label: 'Pincode',\n        type: 8,\n        position: 8,\n        required: false,\n        Placeholder: 'Enter…',\n        hint: 'Please enter your Pincode',\n        choices: [],\n      },\n\n      {\n        id: 'ba53775e-2948-4065-8a59-d99d4494e845',\n        name: 'gender',\n        label: 'Gender',\n        type: 12,\n        position: 5,\n        required: true,\n        placeholder: null,\n        hint: 'Please specify your gender',\n        choices: [\n          {\n            id: 1,\n            value: 'Female',\n            position: 1,\n            dependent_ids: {},\n          },\n          {\n            id: 2,\n            value: 'Male',\n            position: 2,\n            dependent_ids: {},\n          },\n        ],\n      },\n\n      {\n        id: '42aecb8f-25cf-47ce-89c6-5410fe3d4315',\n        name: 'order_status',\n        label: 'Order Status',\n        type: 2,\n        position: 4,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Select a value',\n        choices: [\n          {\n            id: 1,\n            value: 'open',\n            position: 1,\n            dependent_ids: {},\n          },\n          {\n            id: 2,\n            value: 'pending',\n            position: 2,\n            dependent_ids: {},\n          },\n          {\n            id: 3,\n            value: 'closed',\n            position: 3,\n            dependent_ids: {},\n          },\n        ],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'amount_paid',\n        label: 'Amount Paid',\n        type: 13,\n        position: 10,\n        required: true,\n        Placeholder: 'Enter…',\n        hint: 'Please enter the amount paid',\n        choices: [],\n      },\n    ],\n  };\n  var initialValues = {\n    is_indian_citizen: true,\n  };\n  formContainerFs.prepend(formFs);\n\n  // set mapperType to `FORMSERV` to support `FORMSERV` types out of the box\n  formFs.mapperType = 'FORMSERV';\n\n  // do any customisation on the field schema to match the props of crayons components.\n  var fieldsFs = formServSchema.fields.map((field) => {\n    // select expects `text` and `value` prop\n    if (field.type === 'DROPDOWN' || field.type === 'MULTI_SELECT') {\n      return {\n        ...field,\n        choices: field.choices?.map((f) => {\n          return {\n            ...f,\n            text: f.value,\n            value: f.id,\n          };\n        }),\n      };\n    } else return field;\n  });\n\n  var formSchemaFs1 = {\n    ...formServSchema,\n    fields: fieldsFs,\n  };\n  formFs.formSchema = formSchemaFs1;\n  formFs.initialValues = initialValues;\n</script>\n```\n\n## Filter Display of Form Fields\n\nInvoke `setFieldSearchText` method on the `form` passing a text that filters the display of the form fields matching the field's label.\n\n```html live\n<fw-input\n  search\n  id=\"form-filter-search\"\n  placeholder=\"Type to filter Form Fields...\"\n></fw-input>\n<div id=\"form-container-search\">\n  <fw-button id=\"submit-search\">Submit</fw-button>\n  <fw-button id=\"reset-search\">Reset</fw-button>\n</div>\n<script type=\"application/javascript\">\n  var formSearch = document.createElement('fw-form');\n  var formContainerSearch = document.querySelector('#form-container-search');\n\n  /**\n   * call setFieldSearchText on the form with the typed text to filter the form fields **/\n  document\n    .querySelector('#form-filter-search')\n    // you can debounce this function if required\n    .addEventListener('fwInput', (e) => {\n      formSearch.setFieldSearchText(e.detail.value);\n    });\n  document\n    .querySelector('#submit-search')\n    .addEventListener('click', async (e) => {\n      const { values, isValid } = await formSearch.doSubmit(e);\n      console.log({ values, isValid });\n\n      if (isValid) {\n        // make ajax post end point with values\n        // fetch(\"/post\",values);\n\n        // if error from backend , set Errors - passing key value pair\n        formSearch.setFieldErrors({\n          first_name: 'First Name must be unique <<Server Error>>',\n        });\n\n        // reset the form if required if success\n        // formRef.current.doReset(e);\n      }\n    });\n  document.querySelector('#reset-search').addEventListener('click', (e) => {\n    formSearch.doReset(e);\n  });\n  var formSchemaSearch = {\n    name: 'Test Form',\n    fields: [\n      {\n        id: '2978f820-704b-46c7-9f88-110e14e34a8c',\n        name: 'first_name',\n        label: 'First Name',\n        type: 'TEXT',\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide a text of at max 100 characters',\n        choices: [],\n      },\n\n      {\n        id: '3978f820-704b-46c7-9f88-110e14e34a8c',\n        name: 'last_name',\n        label: 'Last Name',\n        type: 'TEXT',\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide a text of at max 100 characters',\n        choices: [],\n      },\n\n      {\n        id: '42aecb8f-25cf-47ce-89c6-5410fe3d4315',\n        name: 'languages_known',\n        label: 'Languages Known',\n        type: 'MULTI_SELECT',\n        position: 13,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Select one or more values',\n        choices: [\n          {\n            id: 1,\n            value: 'English',\n            position: 1,\n            dependent_ids: {},\n          },\n          {\n            id: 2,\n            value: 'Hindi',\n            position: 2,\n            dependent_ids: {},\n          },\n          {\n            id: 3,\n            value: 'Tamil',\n            position: 3,\n            dependent_ids: {},\n          },\n        ],\n      },\n\n      {\n        id: '6978f820-704b-46c7-9f88-110e14e34a8c',\n        name: 'email',\n        label: 'Email',\n        type: 'EMAIL',\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide an email Id',\n        choices: [],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'date_of_birth',\n        label: 'Date Of Birth',\n        type: 'DATE',\n        position: 11,\n        required: true,\n        Placeholder: 'Enter…',\n        hint: 'Please enter your date of birth',\n        choices: [],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'landmark',\n        label: 'Landmark',\n        type: 'PARAGRAPH',\n        position: 7,\n        required: true,\n        Placeholder: 'Enter some text…',\n        hint: 'Please enter the nearest landmark',\n        choices: [],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'is_indian_citizen',\n        label: 'Indian Citizen?',\n        type: 'CHECKBOX',\n        position: 7,\n        required: true,\n        placeholder: null,\n        hint: 'Check or Uncheck the box',\n        choices: [],\n      },\n\n      {\n        id: '8978f820-704b-46c7-9f88-110e14e34a8c',\n        name: 'phone_number',\n        label: 'Phone number',\n        type: 'TEXT',\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide your phone number',\n        choices: [],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'pincode',\n        label: 'Pincode',\n        type: 'NUMBER',\n        position: 8,\n        required: false,\n        Placeholder: 'Enter…',\n        hint: 'Please enter your Pincode',\n        choices: [],\n      },\n\n      {\n        id: 'ba53775e-2948-4065-8a59-d99d4494e845',\n        name: 'gender',\n        label: 'Gender',\n        type: 'RADIO',\n        position: 5,\n        required: true,\n        placeholder: null,\n        hint: 'Please specify your gender',\n        choices: [\n          {\n            id: 1,\n            value: 'Female',\n            position: 1,\n            dependent_ids: {},\n          },\n          {\n            id: 2,\n            value: 'Male',\n            position: 2,\n            dependent_ids: {},\n          },\n        ],\n      },\n\n      {\n        id: '42aecb8f-25cf-47ce-89c6-5410fe3d4315',\n        name: 'order_status',\n        label: 'Order Status',\n        type: 'DROPDOWN',\n        position: 4,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Select a value',\n        choices: [\n          {\n            id: 1,\n            value: 'open',\n            position: 1,\n            dependent_ids: {},\n          },\n          {\n            id: 2,\n            value: 'pending',\n            position: 2,\n            dependent_ids: {},\n          },\n          {\n            id: 3,\n            value: 'closed',\n            position: 3,\n            dependent_ids: {},\n          },\n        ],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'amount_paid',\n        label: 'Amount Paid',\n        type: 'DECIMAL',\n        position: 10,\n        required: true,\n        Placeholder: 'Enter…',\n        hint: 'Please enter the amount paid',\n        choices: [],\n      },\n    ],\n  };\n  var initialValues = {\n    is_indian_citizen: true,\n  };\n  formContainerSearch.prepend(formSearch);\n  // do any customisation on the field schema to match the props of crayons components.\n  var fieldsSearch = formSchemaSearch.fields.map((field) => {\n    // select expects `text` and `value` prop\n    if (field.type === 'DROPDOWN' || field.type === 'MULTI_SELECT') {\n      return {\n        ...field,\n        choices: field.choices?.map((f) => {\n          return {\n            ...f,\n            text: f.value,\n            value: f.id,\n          };\n        }),\n      };\n    } else return field;\n  });\n\n  var formSchemaSearch1 = {\n    ...formSchemaSearch,\n    fields: fieldsSearch,\n  };\n  formSearch.formSchema = formSchemaSearch1;\n  formSearch.initialValues = initialValues;\n</script>\n```\n\n## Dynamically Set Field Choices\n\nInvoke `setFieldChoices` method on the `form` passing the `name` of the field and `choices` array to update the choices in the `DROPDOWN/MULTI_SELECT` form's field-control.\n\n```html live\n<div id=\"form-container-fchoices\">\n  <fw-button id=\"submit-fchoices\">Submit</fw-button>\n  <fw-button id=\"reset-fchoices\">Reset</fw-button>\n\n  <fw-button id=\"update-choices\"> Update Choices Of Order Status</fw-button>\n</div>\n<script type=\"application/javascript\">\n  var formFieldChoices = document.createElement('fw-form');\n  var formContainerFieldchoices = document.querySelector(\n    '#form-container-fchoices'\n  );\n\n  document\n    .querySelector('#update-choices')\n    .addEventListener('click', async (e) => {\n      const newChoices = [\n        {\n          id: 1,\n          value: 'idle',\n          position: 1,\n          dependent_ids: {},\n        },\n        {\n          id: 2,\n          value: 'open',\n          position: 2,\n          dependent_ids: {},\n        },\n        {\n          id: 3,\n          value: 'in progress',\n          position: 3,\n          dependent_ids: {},\n        },\n        {\n          id: 4,\n          value: 'failed',\n          position: 4,\n          dependent_ids: {},\n        },\n      ];\n\n      await formFieldChoices.setFieldChoices('order_status', newChoices, {\n        option_label_path: 'value',\n        option_value_path: 'id',\n      });\n    });\n\n  document\n    .querySelector('#submit-fchoices')\n    .addEventListener('click', async (e) => {\n      const { values, isValid } = await formFieldChoices.doSubmit(e);\n      console.log({ values, isValid });\n\n      if (isValid) {\n        // make ajax post end point with values\n        // fetch(\"/post\",values);\n\n        // if error from backend , set Errors - passing key value pair\n        formFieldChoices.setFieldErrors({\n          first_name: 'First Name must be unique <<Server Error>>',\n        });\n\n        // reset the form if required if success\n        // formRef.current.doReset(e);\n      }\n    });\n  document.querySelector('#reset-fchoices').addEventListener('click', (e) => {\n    formFieldChoices.doReset(e);\n  });\n  var formSchemaFieldChoices = {\n    name: 'Test Form',\n    fields: [\n      {\n        id: '2978f820-704b-46c7-9f88-110e14e34a8c',\n        name: 'first_name',\n        label: 'First Name',\n        type: 'TEXT',\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide a text of at max 100 characters',\n        choices: [],\n      },\n\n      {\n        id: '3978f820-704b-46c7-9f88-110e14e34a8c',\n        name: 'last_name',\n        label: 'Last Name',\n        type: 'TEXT',\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide a text of at max 100 characters',\n        choices: [],\n      },\n\n      {\n        id: '42aecb8f-25cf-47ce-89c6-5410fe3d4315',\n        name: 'languages_known',\n        label: 'Languages Known',\n        type: 'MULTI_SELECT',\n        position: 13,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Select one or more values',\n        field_options: {\n          option_label_path: 'value',\n          option_value_path: 'id',\n        },\n        choices: [\n          {\n            id: 1,\n            value: 'English',\n            position: 1,\n            dependent_ids: {},\n          },\n          {\n            id: 2,\n            value: 'Hindi',\n            position: 2,\n            dependent_ids: {},\n          },\n          {\n            id: 3,\n            value: 'Tamil',\n            position: 3,\n            dependent_ids: {},\n          },\n        ],\n      },\n\n      {\n        id: '6978f820-704b-46c7-9f88-110e14e34a8c',\n        name: 'email',\n        label: 'Email',\n        type: 'EMAIL',\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide an email Id',\n        choices: [],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'date_of_birth',\n        label: 'Date Of Birth',\n        type: 'DATE',\n        position: 11,\n        required: true,\n        Placeholder: 'Enter…',\n        hint: 'Please enter your date of birth',\n        choices: [],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'landmark',\n        label: 'Landmark',\n        type: 'PARAGRAPH',\n        position: 7,\n        required: true,\n        Placeholder: 'Enter some text…',\n        hint: 'Please enter the nearest landmark',\n        choices: [],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'is_indian_citizen',\n        label: 'Indian Citizen?',\n        type: 'CHECKBOX',\n        position: 7,\n        required: true,\n        placeholder: null,\n        hint: 'Check or Uncheck the box',\n        choices: [],\n      },\n\n      {\n        id: '8978f820-704b-46c7-9f88-110e14e34a8c',\n        name: 'phone_number',\n        label: 'Phone number',\n        type: 'TEXT',\n        position: 3,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Please provide your phone number',\n        choices: [],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'pincode',\n        label: 'Pincode',\n        type: 'NUMBER',\n        position: 8,\n        required: false,\n        Placeholder: 'Enter…',\n        hint: 'Please enter your Pincode',\n        choices: [],\n      },\n\n      {\n        id: 'ba53775e-2948-4065-8a59-d99d4494e845',\n        name: 'gender',\n        label: 'Gender',\n        type: 'RADIO',\n        position: 5,\n        required: true,\n        placeholder: null,\n        hint: 'Please specify your gender',\n        field_options: {\n          option_label_path: 'value',\n          option_value_path: 'id',\n        },\n        choices: [\n          {\n            id: 1,\n            value: 'Female',\n            position: 1,\n            dependent_ids: {},\n          },\n          {\n            id: 2,\n            value: 'Male',\n            position: 2,\n            dependent_ids: {},\n          },\n        ],\n      },\n\n      {\n        id: '42aecb8f-25cf-47ce-89c6-5410fe3d4315',\n        name: 'order_status',\n        label: 'Order Status',\n        type: 'DROPDOWN',\n        position: 4,\n        required: true,\n        placeholder: 'Enter…',\n        hint: 'Select a value',\n        field_options: {\n          option_label_path: 'value',\n          option_value_path: 'id',\n        },\n        choices: [\n          {\n            id: 1,\n            value: 'open',\n            position: 1,\n            dependent_ids: {},\n          },\n          {\n            id: 2,\n            value: 'pending',\n            position: 2,\n            dependent_ids: {},\n          },\n          {\n            id: 3,\n            value: 'closed',\n            position: 3,\n            dependent_ids: {},\n          },\n        ],\n      },\n\n      {\n        id: 'f319f86f-1b6a-49cb-b4b6-cf487be94595',\n        name: 'amount_paid',\n        label: 'Amount Paid',\n        type: 'DECIMAL',\n        position: 10,\n        required: true,\n        Placeholder: 'Enter…',\n        hint: 'Please enter the amount paid',\n        choices: [],\n      },\n    ],\n  };\n  var initialValuesFchoices = {\n    is_indian_citizen: true,\n  };\n  formContainerFieldchoices.prepend(formFieldChoices);\n\n  var formSchemaFChoices1 = {\n    ...formSchemaFieldChoices,\n  };\n  formFieldChoices.formSchema = formSchemaSearch1;\n  formFieldChoices.initialValues = initialValuesFChoices;\n</script>\n```\n\n## Validations\n\nValidation can be done using [Yup](https://github.com/jquense/yup#yup) based `validationSchema` or `validate` function prop.\n\n### Validations Usage\n\nYou can use `validationSchema` prop to do `Yup` based validation.\n\n```js\nconst validationSchema = Yup.object().shape({\n  first_name: Yup.string()\n    .required('First name is required')\n    .min(5, 'min 5 char')\n    .nullable(),\n});\n// get reference to fw-form and set validationSchema prop.\n```\n\nYou can also use `validate` async funciton prop to do any custom validation.\n\n```js\nconst validate = async (values: any) => {\n  // do custom validation and return error or {}\n  return {\n    // last_name: \"last name is errored\",\n  };\n};\n// get reference to fw-form and set validate function prop.\n```\n\nBoth `validationSchema` and `validate` prop can be used together.\n\n## Interfaces\n\n### FormValues\n\n```javascript\ntype FormValues = {\n  [field: string]: any,\n};\n```\n\n### FormSubmit\n\n```javascript\ntype FormSubmit = {\n  values: FormValues,\n  errors: FormErrors<FormValues>,\n  isValid: boolean,\n};\n```\n\n### FormErrors\n\n```javascript\ntype FormErrors = {\n  [K in keyof FormValues]?: string;\n};\n```\n\n### Form Value Change Event\n\n`fwFormValueChanged` event gets emitted whenever there is a change in the value of any of the form field.\n\n```javascript\nvar form = document.querySelector('fw-form');\nform.addEventListener('fwFormValueChanged', (e) => {\n  console.log('field', e.detail.field);\n  console.log('value', e.detail.value);\n});\n```\n\n### Form Values Change Event\n\n`fwFormValuesChanged` event gets emitted whenever there is a change in the value of any of the form field. Returns the current form state with the value of all the form fields.\n\n```javascript\nvar form = document.querySelector('fw-form');\nform.addEventListener('fwFormValuesChanged', (e) => {\n  console.log('current form value', e.detail.value);\n});\n```\n",
      "docs": "**Dynamic Form** - Render dynamic form based on the schema passed as a prop.\\\n**Static Form** - Render form based on the children passed as slots.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "customTypeMapper",
          "type": "any",
          "mutable": false,
          "attr": "custom-type-mapper",
          "reflectToAttr": false,
          "docs": "A custom type mapper object that maps the type of your fields in the schema to the Internal Field Types.\nInternal Field Types are `TEXT`, `DROPDOWN`, `EMAIL` etc.\nIn the example below, `1` is the type of a field in your schema\nthat needs to correspond to `TEXT` type.\nPlease pass include the mapper for all the field types that you want to support.\nExample typeMapper object : {\n     'CUSTOM_TEXT': { type: 'TEXT' },\n     'SELECT': { type: 'DROPDOWN' },\n     'TEL': { type: 'PHONE_NUMBER' },\n     'CHECKBOX': { type: 'CHECKBOX' },\n     'TEXTAREA': { type: 'PARAGRAPH' },\n     'DATETIME': { type: 'DATE_TIME' },\n     'INTEGER': { type: 'NUMBER' },\n   }",
          "docsTags": [],
          "default": "{}",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "formId",
          "type": "any",
          "mutable": false,
          "attr": "form-id",
          "reflectToAttr": false,
          "docs": "Id to uniquely identify the Form. If not set, a random Id will be generated.",
          "docsTags": [],
          "default": "uuidv4()",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "formSchema",
          "type": "any",
          "mutable": false,
          "attr": "form-schema",
          "reflectToAttr": false,
          "docs": "Schema to render Dynamic Form. Contains an array of fields pointing to each form control.\nPlease see the usage reference for examples.",
          "docsTags": [],
          "default": "{}",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "initialValues",
          "type": "any",
          "mutable": false,
          "attr": "initial-values",
          "reflectToAttr": false,
          "docs": "Initial field values of the form. It is an object with keys pointing to field name",
          "docsTags": [],
          "default": "{}",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mapperType",
          "type": "\"CUSTOM\" | \"FORMSERV\" | \"LEGO\"",
          "mutable": false,
          "attr": "mapper-type",
          "reflectToAttr": false,
          "docs": "Mapper Type - LEGO | FORMSERV | CUSTOM.\nDefaults to `LEGO`.",
          "docsTags": [],
          "default": "LEGO",
          "values": [
            {
              "value": "CUSTOM",
              "type": "string"
            },
            {
              "value": "FORMSERV",
              "type": "string"
            },
            {
              "value": "LEGO",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "validate",
          "type": "any",
          "mutable": false,
          "attr": "validate",
          "reflectToAttr": false,
          "docs": "Validate the form's values with an async function.\nShould return a Promise which resolves to an errors object.\nThe keys in the errors object must match with the field names.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "validateOnBlur",
          "type": "boolean",
          "mutable": false,
          "attr": "validate-on-blur",
          "reflectToAttr": false,
          "docs": "Tells Form to validate the form on each input's onBlur event",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "validateOnInput",
          "type": "boolean",
          "mutable": false,
          "attr": "validate-on-input",
          "reflectToAttr": false,
          "docs": "Tells Form to validate the form on each input's onInput event",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "validationSchema",
          "type": "any",
          "mutable": false,
          "attr": "validation-schema",
          "reflectToAttr": false,
          "docs": "YUP based validation schema for handling validation",
          "docsTags": [],
          "default": "{}",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "wait",
          "type": "number",
          "mutable": false,
          "attr": "wait",
          "reflectToAttr": false,
          "docs": "The number of milliseconds to delay before doing validation on Input",
          "docsTags": [],
          "default": "200",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "doReset",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "doReset(event?: any) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": [
            {
              "name": "param",
              "text": "event - An event which takes place in the DOM\n\nMethod to reset the form"
            }
          ]
        },
        {
          "name": "doSubmit",
          "returns": {
            "type": "Promise<FormSubmit>",
            "docs": ""
          },
          "signature": "doSubmit(event?: any) => Promise<FormSubmit>",
          "parameters": [],
          "docs": "",
          "docsTags": [
            {
              "name": "param",
              "text": "event : An event which takes place in the DOM\n\nMethod to submit the form"
            }
          ]
        },
        {
          "name": "getValues",
          "returns": {
            "type": "Promise<{ values: FormValues; serializedValues: FormValues; }>",
            "docs": "An Object containing values and serializedValues.\nserializedValues are those that contains the transformed values based on field type.\n1. For Number and Decimal: returns floating point number of value or undefined.\n2. For Date: returns value as ${year}-${month}-${date} or undefined.\n3. For Relationship : returns an array of values or value."
          },
          "signature": "getValues() => Promise<{ values: FormValues; serializedValues: FormValues; }>",
          "parameters": [],
          "docs": "getValues",
          "docsTags": [
            {
              "name": "returns",
              "text": "An Object containing values and serializedValues.\nserializedValues are those that contains the transformed values based on field type.\n1. For Number and Decimal: returns floating point number of value or undefined.\n2. For Date: returns value as ${year}-${month}-${date} or undefined.\n3. For Relationship : returns an array of values or value."
            }
          ]
        },
        {
          "name": "setFieldChoices",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFieldChoices(field: string, choices: Array<any>, fieldOptions?: any) => Promise<void>",
          "parameters": [],
          "docs": "setFieldChoices Method to set field choices for a DROPDOWN/MULTI_SELECT/RADIO fields in formschema.\nchoices must be in the form of array with the below format:\n[{\n id: 1,\n value: 'open',\n position: 1,\n dependent_ids: {},\n}].\nfieldOptions is an optional parameter, must be an object with keys being option_label_path and option_value_path.\noption_label_path refers to the key used for displaying the text.\noption_value_path refers to the key which corresponds to the value of item.",
          "docsTags": []
        },
        {
          "name": "setFieldErrors",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFieldErrors(errorObj: FormErrors<FormValues>) => Promise<void>",
          "parameters": [],
          "docs": "Method to set errors on the form fields.",
          "docsTags": [
            {
              "name": "param",
              "text": "errorObj - key value pair of [fieldName]: ErrorMessage"
            }
          ]
        },
        {
          "name": "setFieldSearchText",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFieldSearchText(text: string) => Promise<void>",
          "parameters": [],
          "docs": "\nMethod to filter the display of fields in the form based\non the passed text.",
          "docsTags": [
            {
              "name": "param",
              "text": "text"
            }
          ]
        },
        {
          "name": "setFieldValue",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFieldValue(field: string, value: any, shouldValidate?: boolean) => Promise<void>",
          "parameters": [],
          "docs": "Method to set value on the form field.",
          "docsTags": [
            {
              "name": "param",
              "text": "field - name of the form field"
            },
            {
              "name": "param",
              "text": "value - value of the form field"
            },
            {
              "name": "param",
              "text": "shouldValidate - should this form field be validated with the updated value"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "fwFormValueChanged",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "fwFormValueChanged - event that gets emitted when value in a form field changes.",
          "docsTags": []
        },
        {
          "event": "fwFormValuesChanged",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "fwFormValuesChanged - event that gets emitted when values change.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "fw-form-control"
      ],
      "dependencyGraph": {
        "fw-form": [
          "fw-form-control"
        ],
        "fw-form-control": [
          "fw-input",
          "fw-textarea",
          "fw-datepicker",
          "fw-checkbox",
          "fw-radio-group",
          "fw-radio",
          "fw-select",
          "fw-timepicker"
        ],
        "fw-input": [
          "fw-icon"
        ],
        "fw-datepicker": [
          "fw-select-option",
          "fw-button",
          "fw-input",
          "fw-timepicker",
          "fw-popover",
          "fw-icon",
          "fw-select"
        ],
        "fw-select-option": [
          "fw-icon",
          "fw-checkbox",
          "fw-avatar"
        ],
        "fw-checkbox": [
          "fw-icon"
        ],
        "fw-button": [
          "fw-spinner",
          "fw-icon"
        ],
        "fw-timepicker": [
          "fw-select",
          "fw-select-option"
        ],
        "fw-select": [
          "fw-tag",
          "fw-popover",
          "fw-button",
          "fw-spinner",
          "fw-icon",
          "fw-list-options"
        ],
        "fw-tag": [
          "fw-tooltip",
          "fw-avatar",
          "fw-icon"
        ],
        "fw-tooltip": [
          "fw-popover"
        ],
        "fw-list-options": [
          "fw-select-option",
          "fw-input"
        ]
      }
    },
    {
      "filePath": "./src/components/form-control/form-control.tsx",
      "encapsulation": "shadow",
      "tag": "fw-form-control",
      "readme": "# Form Control (fw-form-control)\n\n`Form Control` component used with `fw-form` component. Please refer [fw-form](../form/#demo-static-form) for usage \n\n",
      "docs": "`Form Control` component used with `fw-form` component. Please refer [fw-form](../form/#demo-static-form) for usage",
      "docsTags": [
        {
          "name": "parent",
          "text": "form"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "choices",
          "type": "any",
          "mutable": false,
          "attr": "choices",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "controlProps",
          "type": "any",
          "mutable": false,
          "attr": "control-props",
          "reflectToAttr": false,
          "docs": "Contains values for crayons components. Useful when rendering crayons components implicitly via form-control.\nNot required when using controls via slots.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disable the field from being editable",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "error",
          "type": "string",
          "mutable": false,
          "attr": "error",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fieldProps",
          "type": "any",
          "mutable": true,
          "attr": "field-props",
          "reflectToAttr": false,
          "docs": "Additional props can be passed here for crayons components. Useful when rendering crayons components implicitly via form-control.",
          "docsTags": [],
          "default": "{}",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "hint",
          "type": "string",
          "mutable": false,
          "attr": "hint",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "any",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "any",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "shouldRender",
          "type": "boolean",
          "mutable": false,
          "attr": "should-render",
          "reflectToAttr": false,
          "docs": "Prop to determine whether to render the form-control or not.\nDefault to true.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "touched",
          "type": "boolean",
          "mutable": false,
          "attr": "touched",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"CHECKBOX\" | \"DATE\" | \"DATE_TIME\" | \"DECIMAL\" | \"DROPDOWN\" | \"EMAIL\" | \"MULTI_SELECT\" | \"NUMBER\" | \"PARAGRAPH\" | \"RADIO\" | \"RELATIONSHIP\" | \"TEL\" | \"TEXT\" | \"TIME\" | \"URL\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'TEXT'",
          "values": [
            {
              "value": "CHECKBOX",
              "type": "string"
            },
            {
              "value": "DATE",
              "type": "string"
            },
            {
              "value": "DATE_TIME",
              "type": "string"
            },
            {
              "value": "DECIMAL",
              "type": "string"
            },
            {
              "value": "DROPDOWN",
              "type": "string"
            },
            {
              "value": "EMAIL",
              "type": "string"
            },
            {
              "value": "MULTI_SELECT",
              "type": "string"
            },
            {
              "value": "NUMBER",
              "type": "string"
            },
            {
              "value": "PARAGRAPH",
              "type": "string"
            },
            {
              "value": "RADIO",
              "type": "string"
            },
            {
              "value": "RELATIONSHIP",
              "type": "string"
            },
            {
              "value": "TEL",
              "type": "string"
            },
            {
              "value": "TEXT",
              "type": "string"
            },
            {
              "value": "TIME",
              "type": "string"
            },
            {
              "value": "URL",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Set Focus on the child",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-form"
      ],
      "dependencies": [
        "fw-input",
        "fw-textarea",
        "fw-datepicker",
        "fw-checkbox",
        "fw-radio-group",
        "fw-radio",
        "fw-select",
        "fw-timepicker"
      ],
      "dependencyGraph": {
        "fw-form-control": [
          "fw-input",
          "fw-textarea",
          "fw-datepicker",
          "fw-checkbox",
          "fw-radio-group",
          "fw-radio",
          "fw-select",
          "fw-timepicker"
        ],
        "fw-input": [
          "fw-icon"
        ],
        "fw-datepicker": [
          "fw-select-option",
          "fw-button",
          "fw-input",
          "fw-timepicker",
          "fw-popover",
          "fw-icon",
          "fw-select"
        ],
        "fw-select-option": [
          "fw-icon",
          "fw-checkbox",
          "fw-avatar"
        ],
        "fw-checkbox": [
          "fw-icon"
        ],
        "fw-button": [
          "fw-spinner",
          "fw-icon"
        ],
        "fw-timepicker": [
          "fw-select",
          "fw-select-option"
        ],
        "fw-select": [
          "fw-tag",
          "fw-popover",
          "fw-button",
          "fw-spinner",
          "fw-icon",
          "fw-list-options"
        ],
        "fw-tag": [
          "fw-tooltip",
          "fw-avatar",
          "fw-icon"
        ],
        "fw-tooltip": [
          "fw-popover"
        ],
        "fw-list-options": [
          "fw-select-option",
          "fw-input"
        ],
        "fw-form": [
          "fw-form-control"
        ]
      }
    },
    {
      "filePath": "./src/components/format-date/format-date.tsx",
      "encapsulation": "shadow",
      "tag": "fw-format-date",
      "readme": "# Format Date (fw-format-date)\n\nFormats a date/time using the specified locale and options.\n\nThe `date` attribute determines the date/time to use when formatting. It must be a string that [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse) can interpret or a [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object set via JavaScript. By default current date/time is used.\n\nWhen using strings, avoid ambiguous dates such as `05/04/2021` which can be interpreted as May 4 or April 5 depending on the user's browser and locale. Instead, always use a valid [ISO 8601 date time string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse#Date_Time_String_Format) to ensure the date will be parsed correctly.\n\n`Localization` is handled by the browser's [`Intl.DateTimeFormat` API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat).\n\n## Demo\n\n```html live\n<fw-format-date date=\"2021-11-30T09:17:00-04:00\"></fw-format-date><br />\n\n<fw-format-date month=\"long\" day=\"numeric\" year=\"numeric\"></fw-format-date>\n```\n\n<strong>Formatting options</strong>\n\n```html live\n<!-- Format Time -->\n<fw-format-date hour=\"numeric\" minute=\"numeric\"></fw-format-date><br />\n\n<!-- Format weekday -->\n<fw-format-date weekday=\"long\"></fw-format-date><br />\n\n<!-- Format month -->\n<fw-format-date month=\"long\"></fw-format-date><br />\n\n<!-- Format year -->\n<fw-format-date year=\"numeric\"></fw-format-date><br />\n\n<!-- No formatting options -->\n<fw-format-date></fw-format-date>\n```\n\n<strong>Hour Format</strong>\n\n```html live\n<div>\n  <strong>12 hour format</strong><br />\n  <fw-format-date\n    hour=\"numeric\"\n    minute=\"numeric\"\n    hour-format=\"12\"\n  ></fw-format-date>\n</div>\n<div>\n  <strong>24 hour format</strong><br />\n  <fw-format-date\n    hour=\"numeric\"\n    minute=\"numeric\"\n    hour-format=\"24\"\n  ></fw-format-date>\n</div>\n```\n\n<strong>Locale</strong>\n\n```html live\n<div>\n  <strong>English</strong><br /><fw-format-date locale=\"en-US\"></fw-format-date>\n</div>\n<div>\n  <strong>Great Britain</strong><br /><fw-format-date\n    locale=\"en-GB\"\n  ></fw-format-date>\n</div>\n```\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html\n<fw-format-date date=\"2021-11-30T09:17:00-04:00\"></fw-format-date><br/>\n \n<fw-format-date month=\"long\" day=\"numeric\" year=\"numeric\"></fw-format-date><br/>\n\n<label>Formatting options</label><br/>\n\n<!-- Format Time -->\n\n<fw-format-date hour=\"numeric\" minute=\"numeric\"></fw-format-date><br/>\n\n<!-- Format weekday -->\n\n<fw-format-date weekday=\"long\"></fw-format-date><br/>\n\n<!-- Format month -->\n\n<fw-format-date month=\"long\"></fw-format-date><br/>\n\n<!-- Format year -->\n\n<fw-format-date year=\"numeric\"></fw-format-date><br/>\n\n<!-- No formatting options -->\n\n<fw-format-date></fw-format-date><br/>\n\n<label>12 Hour Format</label><br/>\n<fw-format-date hour=\"numeric\" minute=\"numeric\" hour-format=\"12\"></fw-format-date><br/>\n<label> 24 Hour Format</label><br/>\n<fw-format-date hour=\"numeric\" minute=\"numeric\" hour-format=\"24\"></fw-format-date><br/>\n\n<label>Locale</label><br/>\nEnglish: <fw-format-date locale=\"en-US\"></fw-format-date><br/>\nGreat Britain: <fw-format-date locale=\"en-GB\"></fw-format-date>\n\n````\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport { FwFormatDate } from \"@freshworks/crayons/react\";\n\nfunction App() {\n\n  return (<div>\n    <FwFormatDate date=\"2021-11-30T09:17:00-04:00\"></FwFormatDate><br/>\n\n    <FwFormatDate month=\"long\" day=\"numeric\" year=\"numeric\"></FwFormatDate><br/>\n\n    <label>Formatting Options</label><br/>\n\n    {/* Format time */}\n    <FwFormatDate hour=\"numeric\" minute=\"numeric\"></FwFormatDate><br/>\n\n    {/* Format weekday */}\n    <FwFormatDate weekday=\"long\"></FwFormatDate><br/>\n\n    {/* Format month */}\n    <FwFormatDate month=\"long\"></FwFormatDate><br/>\n\n    {/* Format year */}\n    <FwFormatDate year=\"numeric\"></FwFormatDate><br/>\n\n    {/* No formatting options */}\n    <FwFormatDate></FwFormatDate><br/>\n\n    <label>12 Hour Format</label><br/>\n    <FwFormatDate hour=\"numeric\" minute=\"numeric\" hour-format=\"12\"></FwFormatDate><br/>\n    <label>24 Hour Format</label><br/>\n    <FwFormatDate hour=\"numeric\" minute=\"numeric\" hour-format=\"24\"></FwFormatDate><br/>\n\n    <label>Locale</label><br/>\n    English: <FwFormatDate locale=\"en-US\"></FwFormatDate><br/>\n    Great Britain: <FwFormatDate locale=\"en-GB\"></FwFormatDate><br/>\n\n  </div >);\n}\n\nexport default App;\n\n````\n\n</code-block>\n</code-group>\n\n### DateFormatController\n\nYou can use `DateFormatController` to format date by passing the below set of [DateFormatOptions](#dateformatoptions).\n\n```js\nJavascript - import { DateFormatController } from \"@freshworks/crayons\"\nReact - import { DateFormatController } from \"@freshworks/crayons/react\"\n\n const formattedDate= DateFormatController({\n     date: // defaults to current date\n     locale: // defaults to browser's default locale\n    //...Date Format Options\n });\n```\n\n#### DateFormatOptions\n\n```js\ninterface dateOptions {\n  weekday?: 'narrow' | 'short' | 'long';\n\n  /** The format for displaying the year. */\n  year?: 'numeric' | '2-digit';\n\n  /** The format for displaying the month. */\n  month?: 'numeric' | '2-digit' | 'narrow' | 'short' | 'long';\n\n  /** The format for displaying the day. */\n  day?: 'numeric' | '2-digit';\n\n  /** The format for displaying the hour. */\n  hour?: 'numeric' | '2-digit';\n\n  /** The format for displaying the minute. */\n  minute?: 'numeric' | '2-digit';\n\n  /** The format for displaying the second. */\n  second?: 'numeric' | '2-digit';\n\n  /** When set, 12 hour time will be used. */\n  hour12?: boolean;\n\n  /** The format for displaying the time. */\n  timeZoneName?: 'short' | 'long';\n\n  /** The time zone to express the time in. */\n  timeZone?: string;\n}\n```\n",
      "docs": "Formats a date/time using the specified locale and options.\n\nThe `date` attribute determines the date/time to use when formatting. It must be a string that [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse) can interpret or a [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object set via JavaScript. By default current date/time is used.\n\nWhen using strings, avoid ambiguous dates such as `05/04/2021` which can be interpreted as May 4 or April 5 depending on the user's browser and locale. Instead, always use a valid [ISO 8601 date time string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse#Date_Time_String_Format) to ensure the date will be parsed correctly.\n\n`Localization` is handled by the browser's [`Intl.DateTimeFormat` API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat).",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "date",
          "type": "Date | number | string",
          "mutable": false,
          "attr": "date",
          "reflectToAttr": false,
          "docs": "The date/time to format. If not set, the current date and time will be used.",
          "docsTags": [],
          "default": "new Date()",
          "values": [
            {
              "type": "Date"
            },
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "day",
          "type": "\"2-digit\" | \"numeric\"",
          "mutable": false,
          "attr": "day",
          "reflectToAttr": false,
          "docs": "The format for displaying the day.",
          "docsTags": [],
          "values": [
            {
              "value": "2-digit",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hour",
          "type": "\"2-digit\" | \"numeric\"",
          "mutable": false,
          "attr": "hour",
          "reflectToAttr": false,
          "docs": "The format for displaying the hour.",
          "docsTags": [],
          "values": [
            {
              "value": "2-digit",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hourFormat",
          "type": "\"12\" | \"24\" | \"auto\"",
          "mutable": false,
          "attr": "hour-format",
          "reflectToAttr": false,
          "docs": "When set, 24 hour time will always be used.",
          "docsTags": [],
          "default": "'auto'",
          "values": [
            {
              "value": "12",
              "type": "string"
            },
            {
              "value": "24",
              "type": "string"
            },
            {
              "value": "auto",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "locale",
          "type": "string",
          "mutable": false,
          "attr": "locale",
          "reflectToAttr": false,
          "docs": "The locale to use when formatting the date/time.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minute",
          "type": "\"2-digit\" | \"numeric\"",
          "mutable": false,
          "attr": "minute",
          "reflectToAttr": false,
          "docs": "The format for displaying the minute.",
          "docsTags": [],
          "values": [
            {
              "value": "2-digit",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "month",
          "type": "\"2-digit\" | \"long\" | \"narrow\" | \"numeric\" | \"short\"",
          "mutable": false,
          "attr": "month",
          "reflectToAttr": false,
          "docs": "The format for displaying the month.",
          "docsTags": [],
          "values": [
            {
              "value": "2-digit",
              "type": "string"
            },
            {
              "value": "long",
              "type": "string"
            },
            {
              "value": "narrow",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            },
            {
              "value": "short",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "second",
          "type": "\"2-digit\" | \"numeric\"",
          "mutable": false,
          "attr": "second",
          "reflectToAttr": false,
          "docs": "The format for displaying the second.",
          "docsTags": [],
          "values": [
            {
              "value": "2-digit",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "timeZone",
          "type": "string",
          "mutable": false,
          "attr": "time-zone",
          "reflectToAttr": false,
          "docs": "The time zone to express the time in.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "timeZoneName",
          "type": "\"long\" | \"short\"",
          "mutable": false,
          "attr": "time-zone-name",
          "reflectToAttr": false,
          "docs": "The format for displaying the time.",
          "docsTags": [],
          "values": [
            {
              "value": "long",
              "type": "string"
            },
            {
              "value": "short",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "weekday",
          "type": "\"long\" | \"narrow\" | \"short\"",
          "mutable": false,
          "attr": "weekday",
          "reflectToAttr": false,
          "docs": "The format for displaying the weekday.",
          "docsTags": [],
          "values": [
            {
              "value": "long",
              "type": "string"
            },
            {
              "value": "narrow",
              "type": "string"
            },
            {
              "value": "short",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "year",
          "type": "\"2-digit\" | \"numeric\"",
          "mutable": false,
          "attr": "year",
          "reflectToAttr": false,
          "docs": "The format for displaying the year.",
          "docsTags": [],
          "values": [
            {
              "value": "2-digit",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/format-number/format-number.tsx",
      "encapsulation": "shadow",
      "tag": "fw-format-number",
      "readme": "# Format Number (fw-format-number)\n\nFormat Number formats a number using the given locale and options.\nLocalization is handled by the `Intl.NumberFormat` API\n\n## Demo\n\nPass `locale` attritube to set the formatting locale for the number.\n\n```html live\n<div>\nEnglish: <fw-format-number value=\"2000\" locale=\"en\" minimum-fraction-digits=\"2\"></fw-format-number><br/>\n</div>\n<div>\nGerman: <fw-format-number value=\"2000\" locale=\"de\" minimum-fraction-digits=\"2\"></fw-format-number><br/>\n</div>\n```\n\nPass type as `percent` to get the value as percentage.\n\n```html live\n<fw-format-number type=\"percent\" value=\"0\"></fw-format-number><br/>\n<fw-format-number type=\"percent\" value=\"0.25\"></fw-format-number><br>\n<fw-format-number type=\"percent\" value=\"0.50\"></fw-format-number><br>\n<fw-format-number type=\"percent\" value=\"0.75\"></fw-format-number><br>\n<fw-format-number type=\"percent\" value=\"1\"></fw-format-number> <br/>\n```\n\nTo format a number as a monetary value, set the type attribute to `currency` and set the currency attribute to the desired `ISO 4217 currency code`.\nYou should also specify `locale` attribute to ensure the the number is formatted correctly for the target locale.\n\n```html live\n\n<div>USD: <fw-format-number type=\"currency\" currency=\"USD\" value=\"5000\" locale=\"en-US\"></fw-format-number><br></div>\n<div>GBP: <fw-format-number type=\"currency\" currency=\"GBP\" value=\"5000\" locale=\"en-GB\"></fw-format-number><br></div>\n<div>EUR: <fw-format-number type=\"currency\" currency=\"EUR\" value=\"5000\" locale=\"de\"></fw-format-number><br></div>\n<div>CNY: <fw-format-number type=\"currency\" currency=\"CNY\" value=\"5000\" locale=\"zh-cn\"></fw-format-number></div>\n  \n```\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html \n\n<label>Pass `locale` attritube to set the formatting locale for the number</label>\nEnglish: <fw-format-number value=\"2000\" locale=\"en\" minimum-fraction-digits=\"2\"></fw-format-number><br/>\nGerman: <fw-format-number value=\"2000\" locale=\"de\" minimum-fraction-digits=\"2\"></fw-format-number><br/>\n\n<label> Pass type as `percent` to get the value as percentage.</label>\n<fw-format-number type=\"percent\" value=\"0\"></fw-format-number><br/>\n<fw-format-number type=\"percent\" value=\"0.25\"></fw-format-number><br/>\n<fw-format-number type=\"percent\" value=\"0.50\"></fw-format-number><br/>\n<fw-format-number type=\"percent\" value=\"0.75\"></fw-format-number><br/>\n<fw-format-number type=\"percent\" value=\"1\"></fw-format-number> <br/>\n\n<label>To format a number as a monetary value, set the type attribute to `currency` and set the currency attribute to the desired `ISO 4217 currency code`.</label>\n\n<label>You should also specify `locale` attribute to ensure the the number is formatted correctly for the target locale.\n  </label>\nUSD: <fw-format-number type=\"currency\" currency=\"USD\" value=\"5000\" locale=\"en-US\"></fw-format-number><br/>\nGBP: <fw-format-number type=\"currency\" currency=\"GBP\" value=\"5000\" locale=\"en-GB\"></fw-format-number><br/>\nEUR: <fw-format-number type=\"currency\" currency=\"EUR\" value=\"5000\" locale=\"de\"></fw-format-number><br/>\nCNY: <fw-format-number type=\"currency\" currency=\"CNY\" value=\"5000\" locale=\"zh-cn\"></fw-format-number>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwFormatNumber } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n                      \n            <label>Pass `locale` attritube to set the formatting locale for the number</label>\n            English: <FwFormatNumber value={2000} locale=\"en\" minimum-fraction-digits={2}></FwFormatNumber><br/>\n            German: <FwFormatNumber value={2000} locale=\"de\" minimum-fraction-digits={2}></FwFormatNumber><br/>\n\n            <label> Pass type as `percent` to get the value as percentage.</label>\n            <FwFormatNumber type=\"percent\" value={0}></FwFormatNumber><br/>\n            <FwFormatNumber type=\"percent\" value={0.25}></FwFormatNumber><br/>\n            <FwFormatNumber type=\"percent\" value={0.50}></FwFormatNumber><br/>\n            <FwFormatNumber type=\"percent\" value={0.75}></FwFormatNumber><br/>\n            <FwFormatNumber type=\"percent\" value={1}></FwFormatNumber> <br/>\n\n            <label>To format a number as a monetary value, set the type attribute to `currency` and set the currency attribute to the desired `ISO 4217 currency code`.</label>\n\n            <label>You should also specify `locale` attribute to ensure the the number is formatted correctly for the target locale.\n              </label>\n            <FwFormatNumber type=\"currency\" currency=\"USD\" value={5000} locale=\"en-US\"></FwFormatNumber><br/>\n            <FwFormatNumber type=\"currency\" currency=\"GBP\" value={5000} locale=\"en-GB\"></FwFormatNumber><br/>\n            <FwFormatNumber type=\"currency\" currency=\"EUR\" value={5000} locale=\"de\"></FwFormatNumber><br/>\n            <FwFormatNumber type=\"currency\" currency=\"CNY\" value={5000} locale=\"zh-cn\"></FwFormatNumber>\n    </div>);\n}\n```\n</code-block>\n</code-group>\n\n",
      "docs": "Format Number formats a number using the given locale and options.\nLocalization is handled by the `Intl.NumberFormat` API",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "currency",
          "type": "string",
          "mutable": false,
          "attr": "currency",
          "reflectToAttr": false,
          "docs": "The currency to use in currency formatting.\nPossible values are the `ISO 4217` currency codes, such as `USD` for the US dollar, `EUR` for the euro.\nIf the style is \"currency\", the currency property must be provided.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "currencyDisplay",
          "type": "\"code\" | \"name\" | \"narrowSymbol\" | \"symbol\"",
          "mutable": false,
          "attr": "currency-display",
          "reflectToAttr": false,
          "docs": "Currency display formatting.",
          "docsTags": [],
          "default": "'symbol'",
          "values": [
            {
              "value": "code",
              "type": "string"
            },
            {
              "value": "name",
              "type": "string"
            },
            {
              "value": "narrowSymbol",
              "type": "string"
            },
            {
              "value": "symbol",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "currencySign",
          "type": "\"accounting\" | \"standard\"",
          "mutable": false,
          "attr": "currency-sign",
          "reflectToAttr": false,
          "docs": "In many locales, accounting format means to wrap the number with parentheses instead of appending a minus sign.\nYou can enable the above by setting the currencySign option to `accounting`.\nThe default value is `standard`",
          "docsTags": [],
          "default": "'standard'",
          "values": [
            {
              "value": "accounting",
              "type": "string"
            },
            {
              "value": "standard",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "locale",
          "type": "string",
          "mutable": false,
          "attr": "locale",
          "reflectToAttr": false,
          "docs": "`Locale` used for formatting the number",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maximumFractionDigits",
          "type": "number",
          "mutable": false,
          "attr": "maximum-fraction-digits",
          "reflectToAttr": false,
          "docs": "The maximum number of fraction digits to use. Possible values are 0 - 20.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maximumSignificantDigits",
          "type": "number",
          "mutable": false,
          "attr": "maximum-significant-digits",
          "reflectToAttr": false,
          "docs": "The maximum number of significant digits to use,. Possible values are 1 - 21.\nDefault is 21",
          "docsTags": [],
          "default": "21",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minimumFractionDigits",
          "type": "number",
          "mutable": false,
          "attr": "minimum-fraction-digits",
          "reflectToAttr": false,
          "docs": "The minimum number of fraction digits to use. Possible values are 0 - 20.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minimumIntegerDigits",
          "type": "number",
          "mutable": false,
          "attr": "minimum-integer-digits",
          "reflectToAttr": false,
          "docs": "The minimum number of integer digits to use. Possible values are 1 - 21.\nDefault is 1",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minimumSignificantDigits",
          "type": "number",
          "mutable": false,
          "attr": "minimum-significant-digits",
          "reflectToAttr": false,
          "docs": "The minimum number of significant digits to use. Possible values are 1 - 21.\nDefault is 1",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"currency\" | \"decimal\" | \"percent\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Formatting style",
          "docsTags": [],
          "default": "'decimal'",
          "values": [
            {
              "value": "currency",
              "type": "string"
            },
            {
              "value": "decimal",
              "type": "string"
            },
            {
              "value": "percent",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "useGrouping",
          "type": "boolean",
          "mutable": false,
          "attr": "use-grouping",
          "reflectToAttr": false,
          "docs": "Turns on/off grouping separators.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Number to format.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/icon/icon.tsx",
      "encapsulation": "shadow",
      "tag": "fw-icon",
      "readme": "# Icon (fw-icon)\n\n**fw-icon/FwIcon** is a renderer of SVG file that displays an icon-sized image that imparts meaning to the HTML component it is associated with.\nFollowing features are available as part of the implementation of the fw-icon.\n\n1. Enable `fw-icon` as an optimized renderer for SVG with built-in functions such as `Intersection-Observer` and `Fetch-API Memoization`.\n   Go through the docs to understand the various props it supports.\n2. Providing icon-support for crayons-system components and also exposing crayons-icon set/tooling for public use.\n3. Icons can convey all sorts of semantic meaningful information rather than just being decorational. In order to keep icons on the` accessibility tree`, just\n   pass the `label` props and fw-icon does the a11y attribute mapping.\n4. Enable `Crayons-Icon` as an iconlib to support external icon libraries. You can register/unregister external icon libraries and also apply mutation to all/selected icons.\n   See usage docs.\n\n## Examples Live\n\n```html live\n<fw-icon name=\"twitter\" size=\"18\" color=\"blue\"></fw-icon>\n<fw-icon\n  name=\"feather\"\n  src=\"https://cdn.jsdelivr.net/npm/feather-icons@4.28.0/dist/icons\"\n  size=\"18\"\n  color=\"blue\"\n></fw-icon>\n```\n\n## Usage in Code\n\n<code-group>\n<code-block title=\"HTML\">\n```html \n<fw-icon name=\"add-contact\" size=18 color=\"green\" ></fw-icon>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwIcon } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n  <FwIcon name=\"add-contact\" size={18} color=\"green\" ></FwIcon>\n </div>);\n}\n```\n</code-block>\n\n<code-block title=\"Using Intersection Observer\">\n```html \nHTML\n<fw-icon name=\"add-contact\" size=18  color=\"green\" x-root-margin = \"80px\" lazy ></fw-icon>\n<fw-icon name=\"add-contact\" size=18  color=\"green\" lazy ></fw-icon>\nReact\n<FwIcon  name=\"add-contact\" size={18}  color=\"green\" xRootMargin = \"80px\" lazy></FwIcon>\n```\n</code-block>\n</code-group>\n\n### Intersection Observer\n\nUse prop `lazy` to enable Intersection-Observer. `By default it is disabled`. You may choose to give the intersection root-margin for icons i.e via prop `x-root-margin` as preloading threshold.Default value is **50px**.\n\n## Crayons Icon Assets\n\nThe following icons are presently part of the Crayons-Icon library. These are optimized using SVGO.\nUse the name of an icon as listed below it.\nIn case you are planning to use `svg+xml` source for `crayons` icons, do remember to import icons from `@freshworks/crayons-icon` and substitute an underscore for any hyphen in icon name. You may click the image to copy the import. See usage in section **Icon Library**.\ne.g. `import { add_contact, alert, add_remove, ... } from '@freshworks/crayons-icon';` where name of icon is `add-contact`,`alert` and `add-remove`.\n\n<IconGallery/>\n\n## FwIcon as a Renderer for external lib icons.\n\n**fw-icon/FwIcon can also render external icons**. You can use any external libraries from cdn after registering them. If you don't pass `library` props,\nit will default to `crayons`. You can even pass the CDN URL of SVG to `src` prop. See the example below on how to use in React App.\n\nThe library registration happens via a `resolver` function. If you wish to apply some mutation to the icons , you may choose to pass the `mutator` function.\n\n### Usage in HTML/React Page\n\n<code-group>\n<code-block title=\"HTML\">\n``` html\n<html>\n<head>\n    <script type=\"module\" src=\"https://unpkg.com/@freshworks/crayons@v4/dist/crayons/crayons.esm.js\" ></script>\n    <script type=\"module\" >\n        import { registerIconLibrary } from 'https://unpkg.com/@freshworks/crayons@v4/dist/crayons/index.esm.js';\n        registerIconLibrary('feather', {\n                resolver: (name) => `https://cdn.jsdelivr.net/npm/feather-icons@4.28.0/dist/icons/${name}.svg`,\n                mutator: (svg,name) => (name==='feather') ? svg.setAttribute('fill', 'currentColor') : false\n        });\n    </script>\n</head>\n<body>\n    <fw-icon name=\"feather\" library=\"feather\" color=\"red\" size=30 ></fw-icon>\n</body>\n</html>\n```\n</code-block>\n\n<code-block title=\"React\">\n``` jsx\nimport React from 'react';\nimport './App.css';\nimport { FwIcon, registerIconLibrary, unregisterIconLibrary } from '@freshworks/crayons/react';\n\nregisterIconLibrary('feather', {\nresolver : ( name ) => `https://cdn.jsdelivr.net/npm/feather-icons@4.28.0/dist/icons/${name}.svg`,\nmutator : (svg,name) => {(name==='feather') ? svg.setAttribute('fill', 'currentColor') : false}\n});\n\nregisterIconLibrary('heroicons', {\nresolver : ( name ) => `https://cdn.jsdelivr.net/npm/heroicons@0.4.2/outline/${name}.svg`\n});\n\nunregisterIconLibrary('heroicons');\n\nfunction App() {\nreturn (\n\n<div >\n<FwIcon name = \"feather\"   library=\"feather\" color = 'red'  label = \"feather\"   />\n<FwIcon name = \"pie-chart\" library=\"feather\" color = 'blue' label = \"pie-chart\" />\n</div>\n);\n}\nexport default App;\n\n````\n</code-block>\n</code-group>\n\n# Icon Library (@freshworks/crayons-icon)[![](https://data.jsdelivr.com/v1/package/npm/@freshworks/crayons-icon/badge)](https://www.jsdelivr.com/package/npm/@freshworks/crayons-icon)\n\n**Freshworks Crayons** publishes `@freshworks/crayons-icon` as an `Icon Library`. Following features are made available to users via the Lib utils.\n\n1. Optimized set of Crayons Icons in `dist/icons` path. You are free to use them for project related purposes.\n2. `Crayons` SVG Icons are also available as an esm module. Supports Tree-Shaking. This is a useful feature especially for customization purposes.\n3. Enables `@freshworks/crayons-icon` CLI Interface via which you can leverage the SVGO Tooling to optimize your project svg-icons.\n4. Crayons Iconlib default `svgo config` (svg compression util) is available as part of `dist` folder. Refer usage docs on how to use it in your project.\n\nSome implementations via Icon Lib are as below:-\n\n## Importing Icons from '@freshworks/crayons-icon'. [ Supports Tree-Shaking ].\n\nYou can also import Crayons Icons as an esm module. In case you wish to use your own `svg+xml` source, please pass the source string to `data-svg` props.\nSee the code below for implementation.\n\n### Usage in HTML/React Page\n<code-group>\n<code-block title=\"HTML\">\n```html\n<html>\n<head>\n   <script type=\"module\" src=\"https://unpkg.com/@freshworks/crayons@v4/dist/crayons/crayons.esm.js\" ></script>\n   <script type=\"module\">\n       import { header, add_contact } from '@freshworks/crayons-icon';\n       const circle = `<svg viewBox='0 0 100 100'><ellipse cx='50' cy='50' rx='50' ry='50'></ellipse></svg>`;\n   </script>\n</head>\n<body>\n      <div>\n        <fw-icon data-svg={ header }  label=\"Crayons Icon Header\" />\n        <fw-icon data-svg={ add_contact }  label=\"Crayons Icon Add Contact\" />\n        <fw-icon data-svg={ circle }  label=\"circle svg\" />\n      </div>\n</body>\n</html>\n````\n\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from 'react';\nimport { FwIcon } from '@freshworks/crayons/react'; \nimport { header, add_contact } from '@freshworks/crayons-icon';\nconst circle = `<svg viewBox='0 0 100 100'><ellipse cx='50' cy='50' rx='50' ry='50'></ellipse></svg>`;\n\nfunction App() {\nreturn (\n\n<div>\n<FwIcon dataSvg={ header } label=\"Crayons Icon Header\" />\n<FwIcon dataSvg={ add_contact } label=\"Crayons Icon Add-Contact\" />\n<FwIcon dataSvg={ circle } />\n</div>\n);\n}\nexport default App;\n\n````\n</code-block>\n</code-group>\n\n### Example: Rendered in Sample Page as Component\n\n<IconJSExportsShowcase/>\n\n## CLI Tool for processing SVGs\n\n`@freshworks/crayons-icon` is also available as a CLI Tool for processing SVGs with a friendlier interface, options and easily customizable config to optimize your SVGs. See the usage below.\nIt comes packed with a ultra tuned svgo-config. We support YML Config convention as its better in readability and easy to modify than a JSON. You may use the in-built CLI command to get the default YML File at your command root/ desired location, which you can further customize and use to optimze your SVGs via this CLI Tool.\n\n`See the usage below :-`\n\n<IconCLIShowcase/>\n",
      "docs": "**fw-icon/FwIcon** is a renderer of SVG file that displays an icon-sized image that imparts meaning to the HTML component it is associated with.\nFollowing features are available as part of the implementation of the fw-icon.\n\n1. Enable `fw-icon` as an optimized renderer for SVG with built-in functions such as `Intersection-Observer` and `Fetch-API Memoization`.\n   Go through the docs to understand the various props it supports.\n2. Providing icon-support for crayons-system components and also exposing crayons-icon set/tooling for public use.\n3. Icons can convey all sorts of semantic meaningful information rather than just being decorational. In order to keep icons on the` accessibility tree`, just\n   pass the `label` props and fw-icon does the a11y attribute mapping.\n4. Enable `Crayons-Icon` as an iconlib to support external icon libraries. You can register/unregister external icon libraries and also apply mutation to all/selected icons.\n   See usage docs.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Color in which the icon is displayed, specified as a standard CSS color or as a HEX code.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dataSvg",
          "type": "string",
          "mutable": false,
          "attr": "data-svg",
          "reflectToAttr": false,
          "docs": "Identifier of the icon. The attribute’s value must be a valid JS Import Name of the svg in the named export from @freshworks/crayons-icon.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "height",
          "type": "number",
          "mutable": false,
          "attr": "height",
          "reflectToAttr": false,
          "docs": "Height of the icon, specified in number of  pixels.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "An alternate description to use for accessibility. If omitted, the icon will be ignored by assistive devices.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "lazy",
          "type": "boolean",
          "mutable": false,
          "attr": "lazy",
          "reflectToAttr": false,
          "docs": "Enable Intersection Observer. Default is false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "library",
          "type": "string",
          "mutable": false,
          "attr": "library",
          "reflectToAttr": false,
          "docs": "Name of External Library to be used",
          "docsTags": [],
          "default": "'crayons'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "Identifier of the icon. The attribute’s value must be a valid svg Name in the Crayons-Icon set.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "number",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Size of the icon, specified in number of  pixels. This will be square coordinates of (w X h) = size X size",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "src",
          "type": "string",
          "mutable": false,
          "attr": "src",
          "reflectToAttr": false,
          "docs": "Identifier of the icon. The attribute’s value must be a valid path to svg file.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "url",
          "type": "string",
          "mutable": false,
          "attr": "url",
          "reflectToAttr": false,
          "docs": "Identifier of the icon. The attribute’s value must be a valid url of the svg icon.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "width",
          "type": "number",
          "mutable": false,
          "attr": "width",
          "reflectToAttr": false,
          "docs": "Width of the icon, specified in number of  pixels.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "xRootMargin",
          "type": "string",
          "mutable": false,
          "attr": "x-root-margin",
          "reflectToAttr": false,
          "docs": "Root Margin in px or percentage for Intersection-Observer. This means from ref to bottom of loaded view , the item loads when it crosses above the negative y margin.",
          "docsTags": [],
          "default": "'50px'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--fw-icon-color",
          "annotation": "prop",
          "docs": "Color of the icon"
        },
        {
          "name": "--fw-icon-size",
          "annotation": "prop",
          "docs": "Size of the icon"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-accordion-title",
        "fw-button",
        "fw-checkbox",
        "fw-custom-cell-icon",
        "fw-data-table",
        "fw-datepicker",
        "fw-drag-item",
        "fw-file-uploader-file",
        "fw-file-uploader-progress",
        "fw-inline-message",
        "fw-input",
        "fw-menu-item",
        "fw-modal",
        "fw-modal-title",
        "fw-pagination",
        "fw-select",
        "fw-select-option",
        "fw-tag",
        "fw-toast-message",
        "fw-toggle",
        "fw-toggle-group-button"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "fw-accordion-title": [
          "fw-icon"
        ],
        "fw-button": [
          "fw-icon"
        ],
        "fw-checkbox": [
          "fw-icon"
        ],
        "fw-custom-cell-icon": [
          "fw-icon"
        ],
        "fw-data-table": [
          "fw-icon"
        ],
        "fw-datepicker": [
          "fw-icon"
        ],
        "fw-drag-item": [
          "fw-icon"
        ],
        "fw-file-uploader-file": [
          "fw-icon"
        ],
        "fw-file-uploader-progress": [
          "fw-icon"
        ],
        "fw-inline-message": [
          "fw-icon"
        ],
        "fw-input": [
          "fw-icon"
        ],
        "fw-menu-item": [
          "fw-icon"
        ],
        "fw-modal": [
          "fw-icon"
        ],
        "fw-modal-title": [
          "fw-icon"
        ],
        "fw-pagination": [
          "fw-icon"
        ],
        "fw-select": [
          "fw-icon"
        ],
        "fw-select-option": [
          "fw-icon"
        ],
        "fw-tag": [
          "fw-icon"
        ],
        "fw-toast-message": [
          "fw-icon"
        ],
        "fw-toggle": [
          "fw-icon"
        ],
        "fw-toggle-group-button": [
          "fw-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/inline-message/inline-message.tsx",
      "encapsulation": "shadow",
      "tag": "fw-inline-message",
      "readme": "# Inline Message (fw-inline-message)\nfw-inline-message displays an alert on the user interface and enables displaying additional information to the context of the page.\n## Demo\n```html live\n<section>\n  <fw-label value=\"Try types\"></fw-label>\n  <fw-inline-message open type=\"error\">This is an error alert message.</fw-inline-message>\n  <fw-inline-message open type=\"info\">This is an info alert message.</fw-inline-message>\n  <fw-inline-message open type=\"warning\">This is a warning alert message.</fw-inline-message>\n  <fw-inline-message open type=\"success\">This is a success alert message.</fw-inline-message>\n</section>\n<br />\n<section>\n  <fw-label value=\"Try types with closable alerts\"></fw-label>\n  <fw-inline-message open closable type=\"error\">This is an error alert message with close option.</fw-inline-message>\n  <fw-inline-message open closable type=\"info\">This is an info alert message with close option.</fw-inline-message>\n  <fw-inline-message open closable type=\"warning\">This is a warning alert message with close option.</fw-inline-message>\n  <fw-inline-message open closable type=\"success\">This is a success alert message with close option.</fw-inline-message>\n</section>\n<br />\n```\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n``` html\n<section>\n  <fw-label value=\"Try types\"></fw-label>\n  <fw-inline-message open type=\"error\">This is an error alert message.</fw-inline-message>\n  <fw-inline-message open type=\"info\">This is an info alert message.</fw-inline-message>\n  <fw-inline-message open type=\"warning\">This is a warning alert message.</fw-inline-message>\n  <fw-inline-message open type=\"success\">This is a success alert message.</fw-inline-message>\n</section>\n<br />\n<section>\n  <fw-label value=\"Try types with closable alerts\"></fw-label>\n  <fw-inline-message open closable type=\"error\">This is an error alert message with close option.</fw-inline-message>\n  <fw-inline-message open closable type=\"info\">This is an info alert message with close option.</fw-inline-message>\n  <fw-inline-message open closable type=\"warning\">This is a warning alert message with close option.</fw-inline-message>\n  <fw-inline-message open closable type=\"success\">This is a success alert message with close option.</fw-inline-message>\n</section>\n<br />\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FWLabel, FwInlineMessage } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n  <section>\n    <FwLabel value=\"Try types\"></FwLabel>\n    <FwInlineMessage open type=\"error\">This is an error alert message.</FwInlineMessage>\n    <FwInlineMessage open type=\"info\">This is an info alert message.</FwInlineMessage>\n    <FwInlineMessage open type=\"warning\">This is a warning alert message.</FwInlineMessage>\n    <FwInlineMessage open type=\"success\">This is a success alert message.</FwInlineMessage>\n  </section>\n  <br />\n  <section>\n    <FwLabel value=\"Try types with closable alerts\"></FwLabel>\n    <FwInlineMessage open closable type=\"error\">This is an error alert message with close option.</FwInlineMessage>\n    <FwInlineMessage open closable type=\"info\">This is an info alert message with close option.</FwInlineMessage>\n    <FwInlineMessage open closable type=\"warning\">This is a warning alert message with close option.</FwInlineMessage>\n    <FwInlineMessage open closable type=\"success\">This is a success alert message with close option.</FwInlineMessage>\n  </section>\n  <br />\n  </div>)\n}\n```\n</code-block>\n</code-group>\n",
      "docs": "fw-inline-message displays an alert on the user interface and enables displaying additional information to the context of the page.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "closable",
          "type": "boolean",
          "mutable": false,
          "attr": "closable",
          "reflectToAttr": false,
          "docs": "Makes the inline message closable.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "duration",
          "type": "number",
          "mutable": false,
          "attr": "duration",
          "reflectToAttr": false,
          "docs": "The duration in milliseconds for which inline message will be shown.",
          "docsTags": [],
          "default": "Infinity",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "Indicates whether the inline message is open or not.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"error\" | \"info\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "The type of inline message to be displayed. Defaults to info.",
          "docsTags": [],
          "default": "'info'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "hide",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "hide() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "show",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "show() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "fwHide",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when inline message is hidden.",
          "docsTags": []
        },
        {
          "event": "fwShow",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when inline message is shown.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "fw-icon"
      ],
      "dependencyGraph": {
        "fw-inline-message": [
          "fw-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/input/input.tsx",
      "encapsulation": "shadow",
      "tag": "fw-input",
      "readme": "# Input (fw-input)\n\nfw-input displays a single-line input box on the user interface and enables assigning a value to it.\n\n## Demo\n\nYou can use Input component for handling `Text`, `Number`, `Decimal` user input.\n\n```html live\n<fw-input\n  label=\"Name\"\n  icon-left=\"add-contact\"\n  hint-text=\"Do not enter your user ID\"\n  warning-text=\"Please use numbers for user ID\"\n  error-text=\"Invalid user ID\"\n  state=\"warning\"\n  placeholder=\"Enter your official name\"\n  required\n  clear-input\n>\n</fw-input>\n<fw-input\n  label=\"Password\"\n  error-text=\"Password is incorrect\"\n  state=\"error\"\n  required\n  clear-input\n>\n</fw-input>\n<h3>`hint-text`, `warning-text`, `error-text` can be passed as slots</h3>\n<fw-input\n  label=\"Verification Code\"\n  placeholder=\"Enter the verification code sent to the registered email address\"\n  state=\"normal\"\n  clear-input\n>\n  <div slot=\"hint-text\">\n    use the verification code sent to your email address\n  </div>\n</fw-input>\n<fw-input label=\"Deprecated Field\" disabled state=\"normal\" clear-input>\n</fw-input>\n<fw-input\n  label=\"Do Not Modify\"\n  value=\"Not applicable\"\n  readonly\n  state=\"normal\"\n  clear-input\n>\n</fw-input>\n<fw-input value=\"123\" type=\"number\" label=\"Number Input\"></fw-input>\n<fw-input\n  type=\"number\"\n  min=\"0\"\n  max=\"10\"\n  label=\"Number Input with min and max\"\n></fw-input>\n<fw-input\n  value=\"3.001\"\n  type=\"number\"\n  step=\"0.1\"\n  max=\"5\"\n  label=\"Decimal Input with step and max\"\n></fw-input>\n\n<h5>You can use group inputs together like below</h5>\n<div\n  style=\"\n        display: flex;\n        --fw-input-border-radius: 4px 0px 0px 4px;\n        --fw-select-border-radius: 0px 4px 4px 0px;\n      \"\n>\n  <fw-input\n    label=\"House Input\"\n    required=\"true\"\n    placeholder=\"Your input\"\n    hint-text=\"enter input\"\n  ></fw-input>\n  <fw-select\n    style=\"margin-left: -1px\"\n    label=\"House Name\"\n    required=\"true\"\n    value=\"1\"\n    placeholder=\"Your choice\"\n    hint-text=\"Select singluar option\"\n  >\n    <fw-select-option value=\"1\">Starks</fw-select-option>\n    <fw-select-option value=\"2\">Lannisters</fw-select-option>\n  </fw-select>\n</div>\n```\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html\n<fw-input\n  label=\"Name\"\n  icon-left=\"add-contact\"\n  hint-text=\"Do not enter your user ID\"\n  warning-text=\"Please use numbers for user ID\"\n  error-text=\"Invalid user ID\"\n  state=\"warning\"\n  placeholder=\"Enter your official name\"\n  required\n  clear-input\n>\n</fw-input>\n<fw-input\n  label=\"Password\"\n  error-text=\"Password is incorrect\"\n  state=\"error\"\n  required\n  clear-input\n>\n</fw-input>\n<h3>`hint-text`, `warning-text`, `error-text` can be passed as slots</h3>\n<fw-input\n  label=\"Verification Code\"\n  placeholder=\"Enter the verification code sent to the registered email address\"\n  state=\"normal\"\n  clear-input\n>\n<div slot=\"hint-text\">use the verification code sent to your email address</div>\n</fw-input>\n<fw-input label=\"Deprecated Field\" disabled state=\"normal\" clear-input>\n</fw-input>\n<fw-input\n  label=\"Do Not Modify\"\n  value=\"Not applicable\"\n  readonly\n  state=\"normal\"\n  clear-input\n>\n</fw-input>\n<fw-input value=\"123\" type=\"number\" label=\"Number Input\"></fw-input>\n<fw-input\n  type=\"number\"\n  min=\"0\"\n  max=\"10\"\n  label=\"Number Input with min and max\"\n></fw-input>\n<fw-input\n  value=\"3.001\"\n  type=\"number\"\n  step=\"0.1\"\n  max=\"5\"\n  label=\"Decimal Input with step and max\"\n></fw-input>\n\n<h5>You can use group inputs together like below</h5>\n<div\n  style=\"\n        display: flex;\n        --fw-input-border-radius: 4px 0px 0px 4px;\n        --fw-select-border-radius: 0px 4px 4px 0px;\n      \"\n>\n  <fw-input\n    label=\"House Input\"\n    required=\"true\"\n    placeholder=\"Your input\"\n    hint-text=\"enter input\"\n  ></fw-input>\n  <fw-select\n    style=\"margin-left: -1px\"\n    label=\"House Name\"\n    required=\"true\"\n    value=\"1\"\n    placeholder=\"Your choice\"\n    hint-text=\"Select singluar option\"\n  >\n    <fw-select-option value=\"1\">Starks</fw-select-option>\n    <fw-select-option value=\"2\">Lannisters</fw-select-option>\n  </fw-select>\n</div>\n\n````\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwInput } from \"@freshworks/crayons/react\";\nfunction App() {\n  const style = {\n        display: \"flex\";\n        --fw-input-border-radius: \"4px 0px 0px 4px\";\n        --fw-select-border-radius: \"0px 4px 4px 0px\";\n      }\n  return (<div>\n      <FwInput\n      label=\"Name\"\n      iconLeft=\"add-contact\"\n      hintText=\"Do not enter your user ID\"\n      warningText=\"Use only numbers for user ID\"\n      errorText=\"Invalid user ID\"\n      state=\"warning\"\n      placeholder=\"Enter your official name\"\n      required\n      clearInput>\n    </FwInput>\n    <FwInput\n      label=\"Password\"\n      errorText=\"Password is incorrect\"\n      state=\"error\"\n      required\n      clearInput>\n    </FwInput>\n    <h3>`hint-text`, `warning-text`, `error-text` can be passed as slots</h3>\n    <FwInput\n      label=\"Verification Code\"\n      placeholder=\"Enter the verification code sent to the registered email address\"\n      state=\"normal\"\n      clearInput>\n      <div slot=\"hint-text\">Please use the code sent to your email address</div>\n    </FwInput>\n    <FwInput\n      label=\"Deprecated Field\"\n      disabled\n      state=\"normal\"\n      clearInput>\n    </FwInput>\n    <FwInput\n      label=\"Do Not Modify\"\n      value=\"Not applicable\"\n      readonly\n      state=\"normal\"\n      clearInput>\n    </FwInput>\n    <FwInput value=\"123\" type=\"number\" label=\"Number Input\"></FwInput>\n    <FwInput type=\"number\" min={0} max={10} label=\"Number Input with min and max\"></FwInput>\n    <FwInput value=\"3.001\" type=\"number\" step=\"0.1\" max={5}\n    label=\"Decimal Input with step and max\"\n    ></FwInput>\n\n    <h5>You can use group inputs together like below</h5>\n<div\n  style={style}\n>\n  <FwInput\n    label=\"House Input\"\n    required={true}\n    placeholder=\"Your input\"\n    hint-text=\"enter input\"\n  ></FwInput>\n  <FwSelect\n    style={{marginLeft: \"-1px\"}}\n    label=\"House Name\"\n    required={true}\n    value=\"1\"\n    placeholder=\"Your choice\"\n    hint-text=\"Select singluar option\"\n  >\n    <FwSelectOption value=\"1\">Starks</FwSelectOption>\n    <FwSelectOption value=\"2\">Lannisters</FwSelectOption>\n  </FwSelect>\n</div>\n </div>);\n````\n\n</code-block>\n</code-group>\n\n### Slots\n\nSlots can be used to create complex use cases.\n\n```html live\n<template>\n  <div>\n    <fw-input value=\"Searching...\" icon-left=\"search\" clear-input>\n      <fw-spinner slot=\"input-suffix\" size=\"small\"></fw-spinner>\n    </fw-input>\n\n    <fw-input placeholder=\"DD/MM/YYYY\">\n      <div slot=\"input-suffix\" class=\"calenderContainer\">\n        <span class=\"separator\"></span>\n        <fw-icon name=\"calendar\" size=\"16\"></fw-icon>\n      </div>\n    </fw-input>\n    <fw-input placeholder=\"Type to search\">\n      <div slot=\"input-prefix\" class=\"tagContainer\">\n        <fw-tag text=\"Option 1\"></fw-tag>\n        <fw-tag text=\"Option 2\"></fw-tag>\n      </div>\n      <fw-icon slot=\"input-suffix\" name=\"chevron-down\" size=\"8\"></fw-icon>\n    </fw-input>\n\n    <h3>\n      `hint-text`, `warning-text`, `error-text` can also be passed as slots\n    </h3>\n    <fw-input\n      label=\"Verification Code\"\n      placeholder=\"Enter the verification code sent to the registered email address\"\n      state=\"normal\"\n      clear-input\n    >\n      <div slot=\"hint-text\">\n        use the verification code sent to your email address\n      </div>\n    </fw-input>\n  </div>\n</template>\n<style>\n  fw-input {\n    margin: 12px;\n  }\n\n  .calenderContainer {\n    display: flex;\n    align-items: center;\n  }\n\n  .separator {\n    background-color: #cfd7df;\n    width: 1px;\n    height: 20px;\n    margin-inline-end: 4px;\n  }\n\n  .tagContainer {\n    display: flex;\n    align-items: center;\n    flex-wrap: wrap;\n    margin: 4px;\n  }\n\n  fw-tag {\n    margin: 0 4px;\n  }\n</style>\n```\n",
      "docs": "fw-input displays a single-line input box on the user interface and enables assigning a value to it.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "autocomplete",
          "type": "\"off\" | \"on\"",
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "Specifies whether the browser can display suggestions to autocomplete the text value.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "on",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "clearInput",
          "type": "boolean",
          "mutable": false,
          "attr": "clear-input",
          "reflectToAttr": false,
          "docs": "Displays a right-justified clear icon in the text box. Clicking the icon clears the input text. If the attribute’s value is undefined, the value is set to false. For a read-only input box, the clear icon is not displayed unless a default value is specified for the input box.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "errorText",
          "type": "string",
          "mutable": false,
          "attr": "error-text",
          "reflectToAttr": false,
          "docs": "Error text displayed below the text box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hintText",
          "type": "string",
          "mutable": false,
          "attr": "hint-text",
          "reflectToAttr": false,
          "docs": "Hint text displayed below the text box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconLeft",
          "type": "string",
          "mutable": false,
          "attr": "icon-left",
          "reflectToAttr": false,
          "docs": "Identifier of the icon that is displayed in the left side of the text box. The attribute’s value must be a valid svg file in the repo of icons (assets/icons).",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "iconRight",
          "type": "string",
          "mutable": false,
          "attr": "icon-right",
          "reflectToAttr": false,
          "docs": "Identifier of the icon that is displayed in the right side of the text box. The attribute’s value must be a valid svg file in the repo of icons (assets/icons).",
          "docsTags": [],
          "default": "undefined",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label displayed on the interface, for the component.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "Specifies a maximum value that can be entered for the number/decimal input.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "number",
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "Maximum number of characters a user can enter in the text box.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "min",
          "type": "number",
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "Specifies a minimum value that can be entered for the number/decimal input.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "minlength",
          "type": "number",
          "mutable": false,
          "attr": "minlength",
          "reflectToAttr": false,
          "docs": "Minimum number of characters a user must enter in the text box for the value to be valid.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Text displayed in the text box before a user enters a value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If true, the user cannot enter a value in the input box. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "\"error\" | \"normal\" | \"warning\"",
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "Theme based on which the text box is styled.",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "normal",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "step",
          "type": "string",
          "mutable": false,
          "attr": "step",
          "reflectToAttr": false,
          "docs": "The step attribute is used when the type is `number`. It specifies the interval between legal numbers in a number/decimal input element.\nWorks with the min and max attributes to limit the increments at which a value can be set.\nPossible values are `any` or a positive floating point number.\nDefault value is `any`",
          "docsTags": [],
          "default": "'any'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"email\" | \"number\" | \"text\" | \"url\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Type of value accepted as the input value. If a user enters a value other than the specified type, the input box is not populated.",
          "docsTags": [],
          "default": "'text'",
          "values": [
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "number",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Default value displayed in the input box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "warningText",
          "type": "string",
          "mutable": false,
          "attr": "warning-text",
          "reflectToAttr": false,
          "docs": "Warning text displayed below the text box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on a specific `fw-input`. Use this method instead of the global `input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "fwBlur",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the input box loses focus.",
          "docsTags": []
        },
        {
          "event": "fwFocus",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the input box comes into focus.",
          "docsTags": []
        },
        {
          "event": "fwInput",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when a value is entered in the input box.",
          "docsTags": []
        },
        {
          "event": "fwInputClear",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when clear icon is clicked.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--fw-error-color",
          "annotation": "prop",
          "docs": "Color of the error text."
        },
        {
          "name": "--fw-hint-color",
          "annotation": "prop",
          "docs": "Color of the hint text."
        },
        {
          "name": "--fw-input-border-radius",
          "annotation": "prop",
          "docs": "Border Radius of the input."
        },
        {
          "name": "--fw-label-color",
          "annotation": "prop",
          "docs": "Color of the label."
        },
        {
          "name": "--fw-warning-color",
          "annotation": "prop",
          "docs": "Color of the warning text."
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-country-phone",
        "fw-data-table",
        "fw-datepicker",
        "fw-form-control",
        "fw-list-options"
      ],
      "dependencies": [
        "fw-icon"
      ],
      "dependencyGraph": {
        "fw-input": [
          "fw-icon"
        ],
        "fw-country-phone": [
          "fw-input"
        ],
        "fw-data-table": [
          "fw-input"
        ],
        "fw-datepicker": [
          "fw-input"
        ],
        "fw-form-control": [
          "fw-input"
        ],
        "fw-list-options": [
          "fw-input"
        ]
      }
    },
    {
      "filePath": "./src/components/label/label.tsx",
      "encapsulation": "shadow",
      "tag": "fw-label",
      "readme": "# Label (fw-label)\nfw-label displays an informational text component that identifies other components on the user interface. \n\n## Demo\n\n```html live\n<fw-label value=\"Meta Information\"></fw-label>\n<fw-label value=\"Response Received\" color=\"blue\"></fw-label>\n<fw-label value=\"Overdue\" color=\"red\"></fw-label>\n<fw-label value=\"New\" color=\"green\"></fw-label>\n<fw-label value=\"Pending\" color=\"yellow\"></fw-label>\n<fw-label value=\"Archived\" color=\"grey\"></fw-label>\n```\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html \n<fw-label value=\"Meta Information\"></fw-label>\n<fw-label value=\"Response Received\" color=\"blue\"></fw-label>\n<fw-label value=\"Overdue\" color=\"red\"></fw-label>\n<fw-label value=\"New\" color=\"green\"></fw-label>\n<fw-label value=\"Pending\" color=\"yellow\"></fw-label>\n<fw-label value=\"Archived\" color=\"grey\"></fw-label>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwLabel } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n    <FwLabel value=\"Meta Information\"></FwLabel>\n    <FwLabel value=\"Response Received\" color=\"blue\"></FwLabel>\n    <FwLabel value=\"Overdue\" color=\"red\"></FwLabel>\n    <FwLabel value=\"New\" color=\"green\"></FwLabel>\n    <FwLabel value=\"Pending\" color=\"yellow\"></FwLabel>\n    <FwLabel value=\"Archived\" color=\"grey\"></FwLabel>\n </div>);\n}\n```\n</code-block>\n</code-group>\n\n\n\n",
      "docs": "fw-label displays an informational text component that identifies other components on the user interface.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"blue\" | \"green\" | \"grey\" | \"normal\" | \"red\" | \"yellow\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Theme based on which the label is styled.",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "blue",
              "type": "string"
            },
            {
              "value": "green",
              "type": "string"
            },
            {
              "value": "grey",
              "type": "string"
            },
            {
              "value": "normal",
              "type": "string"
            },
            {
              "value": "red",
              "type": "string"
            },
            {
              "value": "yellow",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Display text in the label.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--fw-label-padding-horizontal",
          "annotation": "prop",
          "docs": "Left - Right padding if direction is left-to-right, and Right - Left padding if direction is right-to-left for label"
        },
        {
          "name": "--fw-label-padding-vertical",
          "annotation": "prop",
          "docs": "Top - bottom padding for label"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/options-list/list-options.tsx",
      "encapsulation": "shadow",
      "tag": "fw-list-options",
      "readme": "# List Options (fw-list-options)\n\n# Usage\n\nThe data-source and the visual variant for the list options can be altered via the props.\n\n```html live\n<fw-popover>\n  <fw-button slot=\"popover-trigger\">Straw Hats - Click Me!</fw-button>\n  <fw-list-options\n    id=\"standardVariant\"\n    slot=\"popover-content\"\n    searchable=\"true\"\n    not-found-text=\"Pirate not found\"\n    search-text=\"Search Pirate\"\n  ></fw-list-options>\n</fw-popover>\n\n<br />\n\n<fw-popover same-width=\"false\">\n  <fw-button slot=\"popover-trigger\">Click Me!</fw-button>\n  <fw-list-options\n    variant=\"icon\"\n    id=\"iconVariant\"\n    slot=\"popover-content\"\n  ></fw-list-options>\n</fw-popover>\n\n<fw-popover same-width=\"false\">\n  <fw-button slot=\"popover-trigger\">Creatable Select - Click Me!</fw-button>\n  <fw-list-options\n    id=\"creatableVariant\"\n    slot=\"popover-content\"\n    searchable=\"true\"\n    is-creatable=\"true\"\n    variant=\"avatar\"\n  ></fw-list-options>\n</fw-popover>\n\n<script type=\"application/javascript\">\n  var dataSource = [\n    { value: '1', text: 'Luffy' },\n    { value: '2', text: 'Zorro' },\n    { value: '3', text: 'Sanji' },\n  ];\n  var standardVariant = document.getElementById('standardVariant');\n  standardVariant.options = dataSource;\n  standardVariant.value = ['2'];\n  standardVariant.multiple = true;\n\n  var iconDataSource = [\n    {\n      value: '1',\n      text: 'Luffy',\n      subText: 'Pirate King',\n      graphicsProps: { name: 'verified' },\n    },\n    {\n      value: '2',\n      text: 'Zorro',\n      subText: 'Best Swordsman',\n      graphicsProps: { name: 'magic-wand' },\n    },\n    {\n      value: '3',\n      text: 'Sanji',\n      subText: 'Best Chef',\n      graphicsProps: { name: 'ecommerce' },\n    },\n  ];\n  var iconVariant = document.getElementById('iconVariant');\n  iconVariant.options = iconDataSource;\n\n  var creatableDataSource = [\n    {\n      text: 'Angela Smith',\n      subText: 'angela.smith@gmail.com',\n      value: 'angela.smith@gmail.com',\n      graphicsProps: {\n        image:\n          'https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n      },\n    },\n    {\n      text: 'Freshdesk support from India and Berlin',\n      subText: 'support.india@freshdesk.com',\n      value: 'support.india@freshdesk.com',\n      graphicsProps: {\n        image:\n          'https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n      },\n    },\n    {\n      text: 'Angela from Freshdesk',\n      subText: 'angela@freshdesk.in',\n      value: 'angela@freshdesk.in',\n      graphicsProps: {\n        image:\n          'https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n      },\n    },\n  ];\n  const validateEmail = (email) =>\n    String(email)\n      .toLowerCase()\n      .match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n  var creatableVariant = document.getElementById('creatableVariant');\n  creatableVariant.options = creatableDataSource;\n  creatableVariant.formatCreateLabel = (label) =>\n    `Add \"${label}\" as one of the recipients`;\n  creatableVariant.validateNewOption = (value) => validateEmail(value);\n</script>\n```\n\n### Demo with option-label-path and option-value-path\n\n```html live\n<fw-label value=\"With predefined options\" color=\"blue\"></fw-label>\n<fw-popover same-width=\"false\">\n  <fw-button slot=\"popover-trigger\">Click Me!</fw-button>\n  <fw-list-options\n    variant=\"icon\"\n    id=\"predefinedOptions\"\n    slot=\"popover-content\"\n    option-label-path=\"name\"\n    option-value-path=\"id\"\n  ></fw-list-options>\n</fw-popover>\n<br />\n<br />\n<fw-label value=\"With search\" color=\"blue\"></fw-label>\n<fw-popover same-width=\"false\">\n  <fw-button slot=\"popover-trigger\">Click Me!</fw-button>\n  <fw-list-options\n    variant=\"avatar\"\n    searchable=\"true\"\n    id=\"searchVariant\"\n    slot=\"popover-content\"\n    no-data-text=\"Type to search..\"\n    not-found-text=\"Not available in this universe\"\n    search-text=\"Search Pirate\"\n    multiple\n    option-label-path=\"label\"\n    option-value-path=\"id\"\n  ></fw-list-options>\n</fw-popover>\n\n<script type=\"application/javascript\">\n  var iconDataSource = [\n    {\n      id: '1',\n      name: 'Luffy',\n      subText: 'Pirate King',\n      graphicsProps: { name: 'verified' },\n    },\n    {\n      id: '2',\n      name: 'Zorro',\n      subText: 'Best Swordsman',\n      graphicsProps: { name: 'magic-wand' },\n    },\n    {\n      id: '3',\n      name: 'Sanji',\n      subText: 'Best Chef',\n      graphicsProps: { name: 'ecommerce' },\n    },\n  ];\n  var predefinedOptions = document.getElementById('predefinedOptions');\n  predefinedOptions.options = iconDataSource;\n  predefinedOptions.setSelectedOptions([\n    {\n      id: '2',\n      name: 'Zorro',\n      subText: 'Best Swordsman',\n      graphicsProps: { name: 'magic-wand' },\n    },\n  ]);\n  predefinedOptions.addEventListener('fwChange', (e) => {\n    console.log(e.detail);\n  });\n\n  var searchVariant = document.getElementById('searchVariant');\n  baseURL = 'https://api.sampleapis.com/rickandmorty/characters';\n  searchVariant.selectedOptions = [\n    {\n      label: 'Rick Sanchez',\n      subText: 'Human',\n      id: '1',\n      graphicsProps: {\n        image: 'https://rickandmortyapi.com/api/character/avatar/1.jpeg',\n      },\n    },\n  ];\n  searchVariant.search = (value, source) => {\n    // Sample function to mimic the dynamic filter over network\n    return fetch(baseURL)\n      .then((resp) => resp.json())\n      .then((data) => {\n        const result = data.filter((x) =>\n          x.name.toLowerCase().includes(value.toLowerCase())\n        );\n        return result.map((x) => {\n          return {\n            label: x.name,\n            subText: x.type,\n            id: x.id.toString(),\n            graphicsProps: { image: x.image },\n          };\n        });\n      });\n  };\n</script>\n```\n\n### Usage for option-label-path and option-value-path\n\n<code-group>\n<code-block title=\"HTML\">\n\n```html\n<fw-label value=\"With predefined options\" color=\"blue\"></fw-label>\n<fw-popover same-width=\"false\">\n  <fw-button slot=\"popover-trigger\">Click Me!</fw-button>\n  <fw-list-options\n    variant=\"icon\"\n    id=\"predefinedOptions\"\n    slot=\"popover-content\"\n    option-label-path=\"name\"\n    option-value-path=\"id\"\n  ></fw-list-options>\n</fw-popover>\n<br />\n<br />\n<fw-label value=\"With search\" color=\"blue\"></fw-label>\n<fw-popover same-width=\"false\">\n  <fw-button slot=\"popover-trigger\">Click Me!</fw-button>\n  <fw-list-options\n    variant=\"avatar\"\n    searchable=\"true\"\n    id=\"searchVariant\"\n    slot=\"popover-content\"\n    no-data-text=\"Type to search..\"\n    not-found-text=\"Not available in this universe\"\n    search-text=\"Search Pirate\"\n    multiple\n    option-label-path=\"label\"\n    option-value-path=\"id\"\n  ></fw-list-options>\n</fw-popover>\n\n<script type=\"application/javascript\">\n  var iconDataSource = [\n    {\n      id: '1',\n      name: 'Luffy',\n      subText: 'Pirate King',\n      graphicsProps: { name: 'verified' },\n    },\n    {\n      id: '2',\n      name: 'Zorro',\n      subText: 'Best Swordsman',\n      graphicsProps: { name: 'magic-wand' },\n    },\n    {\n      id: '3',\n      name: 'Sanji',\n      subText: 'Best Chef',\n      graphicsProps: { name: 'ecommerce' },\n    },\n  ];\n  var predefinedOptions = document.getElementById('predefinedOptions');\n  predefinedOptions.options = iconDataSource;\n  predefinedOptions.setSelectedOptions([\n    {\n      id: '2',\n      name: 'Zorro',\n      subText: 'Best Swordsman',\n      graphicsProps: { name: 'magic-wand' },\n    },\n  ]);\n  predefinedOptions.addEventListener('fwChange', (e) => {\n    console.log(e.detail);\n  });\n\n  var searchVariant = document.getElementById('searchVariant');\n  baseURL = 'https://api.sampleapis.com/rickandmorty/characters';\n  searchVariant.selectedOptions = [\n    {\n      label: 'Rick Sanchez',\n      subText: 'Human',\n      id: '1',\n      graphicsProps: {\n        image: 'https://rickandmortyapi.com/api/character/avatar/1.jpeg',\n      },\n    },\n  ];\n  searchVariant.search = (value, source) => {\n    // Sample function to mimic the dynamic filter over network\n    return fetch(baseURL)\n      .then((resp) => resp.json())\n      .then((data) => {\n        const result = data.filter((x) =>\n          x.name.toLowerCase().includes(value.toLowerCase())\n        );\n        return result.map((x) => {\n          return {\n            label: x.name,\n            subText: x.type,\n            id: x.id.toString(),\n            graphicsProps: { image: x.image },\n          };\n        });\n      });\n  };\n</script>\n```\n\n</code-block>\n</code-group>\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "allowDeselect",
          "type": "boolean",
          "mutable": false,
          "attr": "allow-deselect",
          "reflectToAttr": false,
          "docs": "Whether clicking on the already selected option disables it.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "allowSelect",
          "type": "boolean",
          "mutable": false,
          "attr": "allow-select",
          "reflectToAttr": false,
          "docs": "Whether clicking on option selects it.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "checkbox",
          "type": "boolean",
          "mutable": false,
          "attr": "checkbox",
          "reflectToAttr": false,
          "docs": "Place a checkbox.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "debounceTimer",
          "type": "number",
          "mutable": false,
          "attr": "debounce-timer",
          "reflectToAttr": false,
          "docs": "Debounce timer for the search promise function.",
          "docsTags": [],
          "default": "300",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "filterText",
          "type": "any",
          "mutable": false,
          "attr": "filter-text",
          "reflectToAttr": false,
          "docs": "The text to filter the options.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "formatCreateLabel",
          "type": "(value: string) => string",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Works only when 'isCreatable' is selected. Function to format the create label displayed as an option.",
          "docsTags": [],
          "values": [
            {
              "type": "(value: string) => string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideTick",
          "type": "boolean",
          "mutable": false,
          "attr": "hide-tick",
          "reflectToAttr": false,
          "docs": "hide tick mark icon on select option",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isCreatable",
          "type": "boolean",
          "mutable": false,
          "attr": "is-creatable",
          "reflectToAttr": false,
          "docs": "Allows user to create the option if the provided input doesn't match with any of the options.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "Works with `multiple` enabled. Configures the maximum number of options that can be selected with a multi-select component.",
          "docsTags": [],
          "default": "Number.MAX_VALUE",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "Enables selection of multiple options. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noDataText",
          "type": "string",
          "mutable": true,
          "attr": "no-data-text",
          "reflectToAttr": false,
          "docs": "Text to be displayed when there is no data available in the select.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "notFoundText",
          "type": "string",
          "mutable": true,
          "attr": "not-found-text",
          "reflectToAttr": false,
          "docs": "Default option to be shown if the option doesn't match the filterText.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionLabelPath",
          "type": "string",
          "mutable": false,
          "attr": "option-label-path",
          "reflectToAttr": false,
          "docs": "Key for determining the label for a given option",
          "docsTags": [],
          "default": "'text'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionValuePath",
          "type": "string",
          "mutable": false,
          "attr": "option-value-path",
          "reflectToAttr": false,
          "docs": "Key for determining the value for a given option",
          "docsTags": [],
          "default": "'value'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "options",
          "type": "any[]",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Value corresponding to the option, that is saved  when the form data is saved.",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "search",
          "type": "(text: string, dataSource: any[]) => Promise<any[]>",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Filter function which takes in filterText and dataSource and return a Promise.\nWhere filter text is the text to filter the value in dataSource array.\nThe returned promise should contain the array of options to be displayed.",
          "docsTags": [],
          "default": "this.defaultSearchFunction",
          "values": [
            {
              "type": "(text: string, dataSource: any[]) => Promise<any[]>"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "searchText",
          "type": "string",
          "mutable": true,
          "attr": "search-text",
          "reflectToAttr": false,
          "docs": "Placeholder to placed on the search text box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "searchable",
          "type": "boolean",
          "mutable": false,
          "attr": "searchable",
          "reflectToAttr": false,
          "docs": "Enables the input with in the popup for filtering the options.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedOptions",
          "type": "any[]",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The option that is displayed as the default selection, in the list box. Must be a valid value corresponding to the fw-select-option components used in Select.",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "validateNewOption",
          "type": "(value: string) => boolean",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Works only when 'isCreatable' is selected. Function to validate the newly created value. Should return true if new option is valid or false if invalid.",
          "docsTags": [],
          "values": [
            {
              "type": "(value: string) => boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Value of the option that is displayed as the default selection, in the list box. Must be a valid value corresponding to the fw-select-option components used in Select.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"avatar\" | \"icon\" | \"standard\"",
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "Standard is the default option without any graphics other options are icon and avatar which places either the icon or avatar at the beginning of the row.\nThe props for the icon or avatar are passed as an object via the graphicsProps.",
          "docsTags": [],
          "default": "'standard'",
          "values": [
            {
              "value": "avatar",
              "type": "string"
            },
            {
              "value": "icon",
              "type": "string"
            },
            {
              "value": "standard",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "clearFilter",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "clearFilter() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "getSelectedOptions",
          "returns": {
            "type": "Promise<any>",
            "docs": ""
          },
          "signature": "getSelectedOptions() => Promise<any>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "scrollToLastSelected",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "scrollToLastSelected() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<any>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<any>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setSelectedOptions",
          "returns": {
            "type": "Promise<any>",
            "docs": ""
          },
          "signature": "setSelectedOptions(options: any[]) => Promise<any>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setSelectedValues",
          "returns": {
            "type": "Promise<any>",
            "docs": ""
          },
          "signature": "setSelectedValues(values: any) => Promise<any>",
          "parameters": [],
          "docs": "Pass an array of string in case of multi-select or string for single-select.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "fwChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when a value is selected or deselected from the list box options.",
          "docsTags": []
        },
        {
          "event": "fwLoading",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the options list is in loading state processing the search function.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "fwSelected",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-select"
      ],
      "dependencies": [
        "fw-select-option",
        "fw-input"
      ],
      "dependencyGraph": {
        "fw-list-options": [
          "fw-select-option",
          "fw-input"
        ],
        "fw-select-option": [
          "fw-icon",
          "fw-checkbox",
          "fw-avatar"
        ],
        "fw-checkbox": [
          "fw-icon"
        ],
        "fw-input": [
          "fw-icon"
        ],
        "fw-select": [
          "fw-list-options"
        ]
      }
    },
    {
      "filePath": "./src/components/menu/menu.tsx",
      "encapsulation": "shadow",
      "tag": "fw-menu",
      "readme": "# Menu (fw-menu)\n\n## Usage\n\nMenu is a container for `fw-menu-item` components.\n\n```html live\n<template>\n  <fw-menu style=\"--fw-menu-max-width: 300px\">\n    <fw-menu-item\n      >Messages\n      <fw-icon name=\"email\" size=\"16\" slot=\"prefix\"></fw-icon>\n      <div class=\"badge\" slot=\"suffix\">10</div>\n    </fw-menu-item>\n\n    <hr class=\"separator\" />\n\n    <fw-menu-item\n      >Help\n      <fw-icon name=\"help\" size=\"16\" slot=\"prefix\"></fw-icon>\n    </fw-menu-item>\n\n    <fw-menu-item\n      >More Information\n      <fw-icon name=\"info\" size=\"16\" slot=\"prefix\"></fw-icon>\n    </fw-menu-item>\n\n    <hr class=\"separator\" />\n\n    <fw-menu-item selectable>First Option</fw-menu-item>\n    <fw-menu-item selectable>Second Option</fw-menu-item>\n    <fw-menu-item selectable>Third Option</fw-menu-item>\n\n    <hr class=\"separator\" />\n\n    <fw-menu-item>\n      <fw-avatar initials=\"PT\" size=\"xsmall\" slot=\"prefix\"></fw-avatar>\n      User name\n      <fw-button slot=\"suffix\" color=\"primary\">Log Out</fw-button>\n    </fw-menu-item>\n  </fw-menu>\n</template>\n<style>\n  .badge {\n    width: 24px;\n    border-radius: 8px;\n    text-align: center;\n    background: dodgerblue;\n  }\n\n  .separator {\n    width: 100%;\n    height: 1px;\n    margin: 0px;\n    border-width: 0;\n    color: #ebeff3;\n    background-color: #ebeff3;\n  }\n</style>\n```\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--fw-menu-border",
          "annotation": "prop",
          "docs": "Border of the menu content."
        },
        {
          "name": "--fw-menu-border-radius",
          "annotation": "prop",
          "docs": "Border radius of the menu content."
        },
        {
          "name": "--fw-menu-box-shadow",
          "annotation": "prop",
          "docs": "Box Shadow of the menu content."
        },
        {
          "name": "--fw-menu-max-height",
          "annotation": "prop",
          "docs": "Maximum height of the menu content."
        },
        {
          "name": "--fw-menu-max-width",
          "annotation": "prop",
          "docs": "Maximum width of the menu content."
        },
        {
          "name": "--fw-menu-min-height",
          "annotation": "prop",
          "docs": "Minimum height of the menu content."
        },
        {
          "name": "--fw-menu-min-width",
          "annotation": "prop",
          "docs": "Minimum width of the menu content."
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/menu-item/menu-item.tsx",
      "encapsulation": "shadow",
      "tag": "fw-menu-item",
      "readme": "# Menu Item (fw-menu-item)\n\n## Usage\n\nMenu item is a component to define each row of a `fw-menu` components. It takes in `prefix`, `suffix` and default slot to place content either at beginning or end or middle of the row respectively.\n\n```html live\n<section>\n  <fw-label value=\"Item with prefix and suffix\"></fw-label>\n  <fw-menu style=\"--fw-menu-max-width: 300px\">\n    <fw-menu-item\n      >Messages\n      <fw-icon name=\"email\" size=\"16\" slot=\"prefix\"></fw-icon>\n      <div class=\"badge\" slot=\"suffix\">10</div>\n    </fw-menu-item>\n\n    <fw-menu-item>\n      <fw-avatar initials=\"PT\" size=\"xsmall\" slot=\"prefix\"></fw-avatar>\n      User name\n      <fw-button slot=\"suffix\" color=\"primary\">Log Out</fw-button>\n    </fw-menu-item>\n  </fw-menu>\n</section>\n\n<br />\n\n<section>\n  <fw-label value=\"Click handler on row\"></fw-label>\n  <fw-menu style=\"--fw-menu-max-width: 200px\">\n    <fw-menu-item onclick=\"showAlert('help!!')\"\n      >Help\n      <fw-icon name=\"help\" size=\"16\" slot=\"prefix\"></fw-icon>\n    </fw-menu-item>\n\n    <fw-menu-item onclick=\"showAlert('info!!!')\"\n      >More Information\n      <fw-icon name=\"info\" size=\"16\" slot=\"prefix\"></fw-icon>\n    </fw-menu-item>\n  </fw-menu>\n</section>\n\n<br />\n\n<section>\n  <fw-label value=\"Selectable Menu item\"></fw-label>\n  <fw-menu style=\"--fw-menu-max-width: 200px\">\n    <fw-menu-item selectable>First Option</fw-menu-item>\n    <fw-menu-item selectable>Second Option</fw-menu-item>\n    <fw-menu-item selectable>Third Option</fw-menu-item>\n  </fw-menu>\n</section>\n\n<script type=\"application/javascript\">\n  function showAlert(x) {\n    alert(x);\n  }\n</script>\n```\n",
      "docs": "",
      "docsTags": [
        {
          "name": "parent",
          "text": "menu"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "selectable",
          "type": "boolean",
          "mutable": true,
          "attr": "selectable",
          "reflectToAttr": true,
          "docs": "Sets the state of the option to selected. The selected option is highlighted and a check mark is displayed next to it. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "Sets the state of the option to selected. The selected option is highlighted and a check mark is displayed next to it. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--fw-menu-item-background",
          "annotation": "prop",
          "docs": "Border of the fw-menu-item popover content."
        },
        {
          "name": "--fw-menu-item-border",
          "annotation": "prop",
          "docs": "Border of the fw-menu-item popover content."
        },
        {
          "name": "--fw-menu-item-border-radius",
          "annotation": "prop",
          "docs": "Border Radius of the fw-menu-item popover content."
        },
        {
          "name": "--fw-menu-item-box-shadow",
          "annotation": "prop",
          "docs": "Box Shadow of the fw-menu-item popover content."
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "fw-icon"
      ],
      "dependencyGraph": {
        "fw-menu-item": [
          "fw-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/modal/modal.tsx",
      "encapsulation": "shadow",
      "tag": "fw-modal",
      "readme": "# Modal (fw-modal)\n\nModals are used as an overlay to display information. It can also be used as confirm boxes to take user inputs.\n\n\n## Demo & Usage\n\n#### Basic demo\n\n```html live\n  <fw-button modal-trigger-id='welcome'> Open Modal </fw-button>\n  <fw-modal id='welcome' title-text=\"Welcome\">\n    Hello, Welcome to Crayons\n  </fw-modal>\n\n  <fw-button modal-trigger-id='welcome-large'> Open Large Modal </fw-button>\n  <fw-modal id='welcome-large' title-text=\"Welcome\" size=\"large\" submit-disabled=\"true\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque nec vulputate erat. Nulla eu sagittis felis. Sed vel porta felis, vitae sollicitudin enim. Mauris id tellus vel elit tincidunt cursus eu eget nisl. Nunc fringilla massa ac magna dapibus accumsan. Aliquam vehicula lacinia ipsum sed vehicula. Aenean pharetra suscipit nibh, ac sollicitudin justo. Suspendisse vulputate nisl auctor ornare mattis. Morbi vitae tellus ac purus faucibus aliquet ac nec purus.\n    Etiam nec dolor vitae mi tincidunt ultricies nec eu augue. Donec eget odio auctor, accumsan eros et, tristique diam. In lacinia neque a laoreet scelerisque. Suspendisse est ipsum, varius eget consequat a, varius vel nunc. Pellentesque posuere ipsum sapien, non consectetur massa pellentesque eu. In hac habitasse platea dictumst. Nulla quis tincidunt arcu, ac lacinia arcu. Donec ac tellus eu velit auctor rhoncus.\n    Aenean at eros nibh. Duis a nibh sed eros elementum sagittis. Sed erat tellus, mattis vitae mi id, condimentum bibendum purus. Nulla eget accumsan ipsum. Aenean dolor odio, tristique vel aliquam vel, faucibus eu ligula. Nulla sodales nisl pretium purus finibus, non ultricies dolor tempus. Cras felis arcu, varius a ipsum sed, laoreet laoreet diam. Donec accumsan tortor sed aliquet tempus. Pellentesque maximus, dolor sed imperdiet faucibus, neque dolor viverra lorem, ac vulputate odio purus vitae erat. Sed mollis ac orci et viverra. Curabitur sagittis, leo placerat vestibulum rutrum, leo diam ornare ligula, id sodales nisi augue vitae sapien. In hac habitasse platea dictumst. Vestibulum suscipit metus sed risus placerat, sit amet pretium lectus malesuada. Pellentesque pellentesque, mi et hendrerit elementum, augue lectus lobortis risus, ornare commodo ex odio vitae lectus.\n    Phasellus ut purus felis. Proin et turpis ac leo lacinia pulvinar ut et diam. Donec elit enim, semper sed maximus non, tristique quis turpis. Donec venenatis ante dapibus elementum sagittis. Maecenas consequat lectus sit amet ipsum tempor tincidunt. Praesent velit est, volutpat sed malesuada sed, molestie efficitur sem. Vivamus tellus risus, feugiat eu sagittis sed, eleifend vel elit. Vivamus semper porta tempor. Maecenas ut nulla mauris.\n    Sed pulvinar orci in lacus semper, nec volutpat lectus pellentesque. Aliquam dictum suscipit tellus, eu rutrum nulla tincidunt vitae. Interdum et malesuada fames ac ante ipsum primis in faucibus. Aliquam egestas, diam eu tincidunt ullamcorper, dui libero lacinia augue, non fermentum augue libero eget diam. Quisque at interdum erat. Sed lobortis sit amet mauris nec rutrum. Aliquam sit amet risus iaculis, tempor lectus commodo, varius ipsum.\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque nec vulputate erat. Nulla eu sagittis felis. Sed vel porta felis, vitae sollicitudin enim. Mauris id tellus vel elit tincidunt cursus eu eget nisl. Nunc fringilla massa ac magna dapibus accumsan. Aliquam vehicula lacinia ipsum sed vehicula. Aenean pharetra suscipit nibh, ac sollicitudin justo. Suspendisse vulputate nisl auctor ornare mattis. Morbi vitae tellus ac purus faucibus aliquet ac nec purus.\n    Etiam nec dolor vitae mi tincidunt ultricies nec eu augue. Donec eget odio auctor, accumsan eros et, tristique diam. In lacinia neque a laoreet scelerisque. Suspendisse est ipsum, varius eget consequat a, varius vel nunc. Pellentesque posuere ipsum sapien, non consectetur massa pellentesque eu. In hac habitasse platea dictumst. Nulla quis tincidunt arcu, ac lacinia arcu. Donec ac tellus eu velit auctor rhoncus.\n    Aenean at eros nibh. Duis a nibh sed eros elementum sagittis. Sed erat tellus, mattis vitae mi id, condimentum bibendum purus. Nulla eget accumsan ipsum. Aenean dolor odio, tristique vel aliquam vel, faucibus eu ligula. Nulla sodales nisl pretium purus finibus, non ultricies dolor tempus. Cras felis arcu, varius a ipsum sed, laoreet laoreet diam. Donec accumsan tortor sed aliquet tempus. Pellentesque maximus, dolor sed imperdiet faucibus, neque dolor viverra lorem, ac vulputate odio purus vitae erat. Sed mollis ac orci et viverra. Curabitur sagittis, leo placerat vestibulum rutrum, leo diam ornare ligula, id sodales nisi augue vitae sapien. In hac habitasse platea dictumst. Vestibulum suscipit metus sed risus placerat, sit amet pretium lectus malesuada. Pellentesque pellentesque, mi et hendrerit elementum, augue lectus lobortis risus, ornare commodo ex odio vitae lectus.\n    Phasellus ut purus felis. Proin et turpis ac leo lacinia pulvinar ut et diam. Donec elit enim, semper sed maximus non, tristique quis turpis. Donec venenatis ante dapibus elementum sagittis. Maecenas consequat lectus sit amet ipsum tempor tincidunt. Praesent velit est, volutpat sed malesuada sed, molestie efficitur sem. Vivamus tellus risus, feugiat eu sagittis sed, eleifend vel elit. Vivamus semper porta tempor. Maecenas ut nulla mauris.\n    Sed pulvinar orci in lacus semper, nec volutpat lectus pellentesque. Aliquam dictum suscipit tellus, eu rutrum nulla tincidunt vitae. Interdum et malesuada fames ac ante ipsum primis in faucibus. Aliquam egestas, diam eu tincidunt ullamcorper, dui libero lacinia augue, non fermentum augue libero eget diam. Quisque at interdum erat. Sed lobortis sit amet mauris nec rutrum. Aliquam sit amet risus iaculis, tempor lectus commodo, varius ipsum.\n  </fw-modal>\n```\n\n#### Basic usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html \n  <fw-button modal-trigger-id='welcome'> Open Modal </fw-button>\n  <fw-modal id='welcome' title-text=\"Welcome\">\n    Hello, Welcome to Crayons\n  </fw-modal>\n\n  <fw-button modal-trigger-id='welcome-large'> Open Large Modal </fw-button>\n  <fw-modal id='welcome-large' title-text=\"Welcome\" size=\"large\" submit-disabled=\"true\">\n    Hello, Welcome to Crayons\n  </fw-modal>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwButton, FwModal } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n    <FwButton modalTriggerId='welcome'> Open Modal </FwButton>\n    <FwModal id='welcome' titleText=\"Welcome\">\n      Hello, Welcome to Crayons\n    </FwModal>\n\n    <FwButton modalTriggerId='welcome-large'> Open Large Modal </FwButton>\n    <FwModal id='welcome-large' titleText=\"Welcome\" size=\"large\" submitDisabled>\n      Hello, Welcome to Crayons\n    </FwModal>\n </div>);\n}\n```\n</code-block>\n</code-group>\n\n#### Simple composition Demo \n```html live \n  <fw-button modal-trigger-id='small'> Open Modal </fw-button>\n  <fw-modal id='small' size=\"small\" submit-color=\"danger\">\n    <fw-modal-title title-text=\"Welcome\"></fw-modal-title>\n    <fw-modal-content><div>Content text</div></fw-modal-content>\n    <fw-modal-footer></fw-modal-footer>\n  </fw-modal>\n```\n\n#### Simple composition Usage \n\n<code-group>\n<code-block title=\"HTML\">\n```html \n  <fw-button modal-trigger-id='small'> Open Modal </fw-button>\n  <fw-modal id='small' size=\"small\" submit-color=\"danger\">\n    <fw-modal-title title-text=\"Welcome\"></fw-modal-title>\n    <fw-modal-content><div>Content text</div></fw-modal-content>\n    <fw-modal-footer></fw-modal-footer>\n  </fw-modal>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwButton, FwModal, FwModalTitle, FwModalContent, FwModalFooter } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n    <FwButton modalTriggerId='small'> Open Modal </FwButton>\n    <FwModal id='small' size=\"small\" submitColor=\"danger\">\n      <FwModalTitle titleText=\"Welcome\"></FwModalTitle>\n      <FwModalContent><div>Content text</div></FwModalContent>\n      <FwModalFooter></FwModalFooter>\n    </FwModal>\n </div>);\n}\n```\n</code-block>\n</code-group>\n\n#### Custom composition Demo\n\n```html live \n  <fw-button modal-trigger-id='composition'> Open confirmation Modal </fw-button>\n  <fw-modal id='composition' size=\"small\" submit-color=\"danger\" submit-text=\"Delete\">\n    <fw-modal-title>\n      <span>Delete message</span>\n    </fw-modal-title>\n    <fw-modal-content>\n      <span>Are you sure you want to delete this Message?</span>\n    </fw-modal-content>\n  </fw-modal>\n```\n\n#### Custom composition Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html \n  <fw-button modal-trigger-id='composition'> Open confirmation Modal </fw-button>\n  <fw-modal id='composition' size=\"small\" submit-color=\"danger\" submit-text=\"Delete\">\n    <fw-modal-title>\n      <span>Delete message</span>\n    </fw-modal-title>\n    <fw-modal-content>\n      <span>Are you sure you want to delete this Message?</span>\n    </fw-modal-content>\n  </fw-modal>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwButton, FwModal, FwModalTitle, FwModalContent, FwModalFooter } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n    <FwButton modal-trigger-id='composition'> Open confirmation Modal </FwButton>\n    <FwModal id='composition' size=\"small\" submit-color=\"danger\" submit-text=\"Delete\">\n      <FwModalTitle>\n        <span>Delete message</span>\n      </FwModalTitle>\n      <FwModalContent>\n        <span>Are you sure you want to delete this Message?</span>\n      </FwModalContent>\n    </FwModal>\n </div>);\n}\n```\n</code-block>\n</code-group>\n\n\n#### Hide footer of the modal Demo\n\n```html live \n  <fw-button modal-trigger-id='large'> Open modal </fw-button>\n  <fw-modal id='large' icon=\"agent\" size=\"large\" hide-footer=\"true\">\n    <fw-modal-title>\n      <span>Header text</span>\n    </fw-modal-title>\n    <fw-modal-content>\n      <div>Content text</div>\n    </fw-modal-content>\n  </fw-modal>\n```\n\n#### Hide footer of the modal Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html \n  <fw-button modal-trigger-id='large'> Open modal </fw-button>\n  <fw-modal id='large' icon=\"agent\" size=\"large\" hide-footer=\"true\">\n    <fw-modal-title>\n      <span>Header text</span>\n    </fw-modal-title>\n    <fw-modal-content>\n      <div>Content text</div>\n    </fw-modal-content>\n  </fw-modal>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwButton, FwModal, FwModalTitle, FwModalContent, FwModalFooter } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n      <FwButton modalTriggerId='large'> Open modal </FwButton>\n      <FwModal id='large' icon=\"agent\" size=\"large\" hideFooter>\n        <FwModalTitle>\n          <span>Header text</span>\n        </FwModalTitle>\n        <FwModalContent>\n          <div>Content text</div>\n        </FwModalContent>\n      </fw-modal>\n </div>);\n}\n```\n</code-block>\n</code-group>\n\n#### Slider\n\nThis is a variation of model that takes the entire viewport as height and slides from right of the screen when entering. Properties and composition are same as modal with the exception of size property. Slider has only one standard size.\n\n```html live \n  <fw-button modal-trigger-id='modal-slider'> Open slider </fw-button>\n  <fw-modal id='modal-slider' slider='true'>\n    <fw-modal-title>\n      <span>Header text</span>\n    </fw-modal-title>\n    <fw-modal-content>\n      <div>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque nec vulputate erat. Nulla eu sagittis felis. Sed vel porta felis, vitae sollicitudin enim. Mauris id tellus vel elit tincidunt cursus eu eget nisl. Nunc fringilla massa ac magna dapibus accumsan. Aliquam vehicula lacinia ipsum sed vehicula. Aenean pharetra suscipit nibh, ac sollicitudin justo. Suspendisse vulputate nisl auctor ornare mattis. Morbi vitae tellus ac purus faucibus aliquet ac nec purus.\n        Etiam nec dolor vitae mi tincidunt ultricies nec eu augue. Donec eget odio auctor, accumsan eros et, tristique diam. In lacinia neque a laoreet scelerisque. Suspendisse est ipsum, varius eget consequat a, varius vel nunc. Pellentesque posuere ipsum sapien, non consectetur massa pellentesque eu. In hac habitasse platea dictumst. Nulla quis tincidunt arcu, ac lacinia arcu. Donec ac tellus eu velit auctor rhoncus.\n        Aenean at eros nibh. Duis a nibh sed eros elementum sagittis. Sed erat tellus, mattis vitae mi id, condimentum bibendum purus. Nulla eget accumsan ipsum. Aenean dolor odio, tristique vel aliquam vel, faucibus eu ligula. Nulla sodales nisl pretium purus finibus, non ultricies dolor tempus. Cras felis arcu, varius a ipsum sed, laoreet laoreet diam. Donec accumsan tortor sed aliquet tempus. Pellentesque maximus, dolor sed imperdiet faucibus, neque dolor viverra lorem, ac vulputate odio purus vitae erat. Sed mollis ac orci et viverra. Curabitur sagittis, leo placerat vestibulum rutrum, leo diam ornare ligula, id sodales nisi augue vitae sapien. In hac habitasse platea dictumst. Vestibulum suscipit metus sed risus placerat, sit amet pretium lectus malesuada. Pellentesque pellentesque, mi et hendrerit elementum, augue lectus lobortis risus, ornare commodo ex odio vitae lectus.\n        Phasellus ut purus felis. Proin et turpis ac leo lacinia pulvinar ut et diam. Donec elit enim, semper sed maximus non, tristique quis turpis. Donec venenatis ante dapibus elementum sagittis. Maecenas consequat lectus sit amet ipsum tempor tincidunt. Praesent velit est, volutpat sed malesuada sed, molestie efficitur sem. Vivamus tellus risus, feugiat eu sagittis sed, eleifend vel elit. Vivamus semper porta tempor. Maecenas ut nulla mauris.\n        Sed pulvinar orci in lacus semper, nec volutpat lectus pellentesque. Aliquam dictum suscipit tellus, eu rutrum nulla tincidunt vitae. Interdum et malesuada fames ac ante ipsum primis in faucibus. Aliquam egestas, diam eu tincidunt ullamcorper, dui libero lacinia augue, non fermentum augue libero eget diam. Quisque at interdum erat. Sed lobortis sit amet mauris nec rutrum. Aliquam sit amet risus iaculis, tempor lectus commodo, varius ipsum.\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque nec vulputate erat. Nulla eu sagittis felis. Sed vel porta felis, vitae sollicitudin enim. Mauris id tellus vel elit tincidunt cursus eu eget nisl. Nunc fringilla massa ac magna dapibus accumsan. Aliquam vehicula lacinia ipsum sed vehicula. Aenean pharetra suscipit nibh, ac sollicitudin justo. Suspendisse vulputate nisl auctor ornare mattis. Morbi vitae tellus ac purus faucibus aliquet ac nec purus.\n        Etiam nec dolor vitae mi tincidunt ultricies nec eu augue. Donec eget odio auctor, accumsan eros et, tristique diam. In lacinia neque a laoreet scelerisque. Suspendisse est ipsum, varius eget consequat a, varius vel nunc. Pellentesque posuere ipsum sapien, non consectetur massa pellentesque eu. In hac habitasse platea dictumst. Nulla quis tincidunt arcu, ac lacinia arcu. Donec ac tellus eu velit auctor rhoncus.\n        Aenean at eros nibh. Duis a nibh sed eros elementum sagittis. Sed erat tellus, mattis vitae mi id, condimentum bibendum purus. Nulla eget accumsan ipsum. Aenean dolor odio, tristique vel aliquam vel, faucibus eu ligula. Nulla sodales nisl pretium purus finibus, non ultricies dolor tempus. Cras felis arcu, varius a ipsum sed, laoreet laoreet diam. Donec accumsan tortor sed aliquet tempus. Pellentesque maximus, dolor sed imperdiet faucibus, neque dolor viverra lorem, ac vulputate odio purus vitae erat. Sed mollis ac orci et viverra. Curabitur sagittis, leo placerat vestibulum rutrum, leo diam ornare ligula, id sodales nisi augue vitae sapien. In hac habitasse platea dictumst. Vestibulum suscipit metus sed risus placerat, sit amet pretium lectus malesuada. Pellentesque pellentesque, mi et hendrerit elementum, augue lectus lobortis risus, ornare commodo ex odio vitae lectus.\n        Phasellus ut purus felis. Proin et turpis ac leo lacinia pulvinar ut et diam. Donec elit enim, semper sed maximus non, tristique quis turpis. Donec venenatis ante dapibus elementum sagittis. Maecenas consequat lectus sit amet ipsum tempor tincidunt. Praesent velit est, volutpat sed malesuada sed, molestie efficitur sem. Vivamus tellus risus, feugiat eu sagittis sed, eleifend vel elit. Vivamus semper porta tempor. Maecenas ut nulla mauris.\n        Sed pulvinar orci in lacus semper, nec volutpat lectus pellentesque. Aliquam dictum suscipit tellus, eu rutrum nulla tincidunt vitae. Interdum et malesuada fames ac ante ipsum primis in faucibus. Aliquam egestas, diam eu tincidunt ullamcorper, dui libero lacinia augue, non fermentum augue libero eget diam. Quisque at interdum erat. Sed lobortis sit amet mauris nec rutrum. Aliquam sit amet risus iaculis, tempor lectus commodo, varius ipsum.\n      </div>\n    </fw-modal-content>\n    <fw-modal-footer>\n      <fw-button>OK</fw-button>\n    </fw-modal-footer>\n  </fw-modal>\n```\n\n#### Slider Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html \n  <fw-button modal-trigger-id='modal-slider'> Open slider </fw-button>\n  <fw-modal id='modal-slider' slider='true'>\n    <fw-modal-title>\n      <span>Header text</span>\n    </fw-modal-title>\n    <fw-modal-content>\n      <div>\n        Context text.\n      </div>\n    </fw-modal-content>\n    <fw-modal-footer>\n      <fw-button>OK</fw-button>\n    </fw-modal-footer>\n  </fw-modal>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwButton, FwModal, FwModalTitle, FwModalContent, FwModalFooter } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n      <FwButton modal-trigger-id='modal-slider'>Hello</FwButton>\n      <FwModal id='modal-slider' slider>\n        <FwModalTitle>\n          <span>Header text</span>\n        </FwModalTitle>\n        <FwModalContent>\n          <div>\n            Context text.\n          </div>\n        </FwModalContent>\n        <FwModalFooter>\n          <FwButton>OK</FwButton>\n        </FwModalFooter>\n      </FwModal>\n </div>);\n}\n```\n</code-block>\n</code-group>\n\n#### Using modal methods \n\n<code-group>\n<code-block title=\"HTML\">\n```html \n  <fw-modal id='modal-slider' slider='true'>\n    <fw-modal-title>\n      <span>Header text</span>\n    </fw-modal-title>\n    <fw-modal-content>\n      <div>\n        Context text.\n      </div>\n    </fw-modal-content>\n    <fw-modal-footer>\n      <fw-button>OK</fw-button>\n    </fw-modal-footer>\n  </fw-modal>\n```\n\n```js\n  document.querySelector('fw-modal#modal-slider').open();\n  document.querySelector('fw-modal#modal-slider').close()\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React, { useRef } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwButton, FwModal, FwModalTitle, FwModalContent, FwModalFooter } from \"@freshworks/crayons/react\";\nfunction App() {\n\n  const modal = useRef(null);\n  return (<div>\n      <FwButton onClick={() => modal.current.open() }>Open Modal using methods</FwButton>\n      <FwModal id='modal-slider' slider ref={modal}>\n        <FwModalTitle>\n          <span>Header text</span>\n        </FwModalTitle>\n        <FwModalContent>\n          <div>\n            Context text.\n          </div>\n        </FwModalContent>\n        <FwModalFooter>\n          <FwButton>OK</FwButton>\n        </FwModalFooter>\n      </FwModal>\n </div>);\n}\n```\n</code-block>\n</code-group>\n",
      "docs": "Modals are used as an overlay to display information. It can also be used as confirm boxes to take user inputs.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "cancelText",
          "type": "string",
          "mutable": true,
          "attr": "cancel-text",
          "reflectToAttr": false,
          "docs": "The text for the cancel button",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "description",
          "type": "string",
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "The description text to be displayed on the modal",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasCloseIconButton",
          "type": "boolean",
          "mutable": false,
          "attr": "has-close-icon-button",
          "reflectToAttr": false,
          "docs": "Property to add or remove the top right close icon button",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideFooter",
          "type": "boolean",
          "mutable": false,
          "attr": "hide-footer",
          "reflectToAttr": false,
          "docs": "Hide footer for the modal",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "The icon to be displayed with the title",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isOpen",
          "type": "boolean",
          "mutable": true,
          "attr": "is-open",
          "reflectToAttr": true,
          "docs": "Toggle the visibility of the modal",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"small\" | \"standard\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Size of the modal",
          "docsTags": [],
          "default": "'standard'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            },
            {
              "value": "standard",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "slider",
          "type": "boolean",
          "mutable": false,
          "attr": "slider",
          "reflectToAttr": false,
          "docs": "Convert modal to slider",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "submitColor",
          "type": "\"danger\" | \"link\" | \"primary\" | \"secondary\" | \"text\"",
          "mutable": false,
          "attr": "submit-color",
          "reflectToAttr": false,
          "docs": "The color of submit button",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "submitDisabled",
          "type": "boolean",
          "mutable": false,
          "attr": "submit-disabled",
          "reflectToAttr": false,
          "docs": "Default state of submit button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "submitText",
          "type": "string",
          "mutable": true,
          "attr": "submit-text",
          "reflectToAttr": false,
          "docs": "The text for the submit button",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "titleText",
          "type": "string",
          "mutable": false,
          "attr": "title-text",
          "reflectToAttr": false,
          "docs": "The title text to be displayed on the modal",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<boolean>",
            "docs": "promise that resolves to true"
          },
          "signature": "close() => Promise<boolean>",
          "parameters": [],
          "docs": "Method available from the component to perform close action on the modal",
          "docsTags": [
            {
              "name": "returns",
              "text": "promise that resolves to true"
            }
          ]
        },
        {
          "name": "open",
          "returns": {
            "type": "Promise<boolean>",
            "docs": "promise that resolves to true"
          },
          "signature": "open() => Promise<boolean>",
          "parameters": [],
          "docs": "Method available from the component to perform open action on the modal",
          "docsTags": [
            {
              "name": "returns",
              "text": "promise that resolves to true"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "fwClose",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when modal is closed.",
          "docsTags": []
        },
        {
          "event": "fwOpen",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when modal is opened.",
          "docsTags": []
        },
        {
          "event": "fwSubmit",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the default action button is clicked.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "fw-icon",
        "fw-modal-title",
        "fw-modal-content",
        "fw-modal-footer"
      ],
      "dependencyGraph": {
        "fw-modal": [
          "fw-icon",
          "fw-modal-title",
          "fw-modal-content",
          "fw-modal-footer"
        ],
        "fw-modal-title": [
          "fw-icon"
        ],
        "fw-modal-footer": [
          "fw-button"
        ],
        "fw-button": [
          "fw-spinner",
          "fw-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/modal-content/modal-content.tsx",
      "encapsulation": "shadow",
      "tag": "fw-modal-content",
      "readme": "# Modal Content (fw-modal-content)\n\nDisplays the content inside the component.\n",
      "docs": "Displays the content inside the component.",
      "docsTags": [
        {
          "name": "parent",
          "text": "modal"
        }
      ],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-modal"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "fw-modal": [
          "fw-modal-content"
        ]
      }
    },
    {
      "filePath": "./src/components/modal-footer/modal-footer.tsx",
      "encapsulation": "shadow",
      "tag": "fw-modal-footer",
      "readme": "# Modal Footer (fw-modal-footer)\n\n",
      "docs": "",
      "docsTags": [
        {
          "name": "parent",
          "text": "modal"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "cancelText",
          "type": "string",
          "mutable": true,
          "attr": "cancel-text",
          "reflectToAttr": false,
          "docs": "The text for the cancel button",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "close",
          "type": "any",
          "mutable": false,
          "attr": "close",
          "reflectToAttr": false,
          "docs": "Function to call on close of modal",
          "docsTags": [],
          "default": "() => {}",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "submit",
          "type": "any",
          "mutable": false,
          "attr": "submit",
          "reflectToAttr": false,
          "docs": "Function to call on submit of modal",
          "docsTags": [],
          "default": "() => {}",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "submitColor",
          "type": "\"danger\" | \"link\" | \"primary\" | \"secondary\" | \"text\"",
          "mutable": false,
          "attr": "submit-color",
          "reflectToAttr": false,
          "docs": "The color of submit button",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "submitDisabled",
          "type": "boolean",
          "mutable": false,
          "attr": "submit-disabled",
          "reflectToAttr": false,
          "docs": "Default state of submit button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "submitText",
          "type": "string",
          "mutable": true,
          "attr": "submit-text",
          "reflectToAttr": false,
          "docs": "The text for the submit button",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-modal"
      ],
      "dependencies": [
        "fw-button"
      ],
      "dependencyGraph": {
        "fw-modal-footer": [
          "fw-button"
        ],
        "fw-button": [
          "fw-spinner",
          "fw-icon"
        ],
        "fw-modal": [
          "fw-modal-footer"
        ]
      }
    },
    {
      "filePath": "./src/components/modal-title/modal-title.tsx",
      "encapsulation": "shadow",
      "tag": "fw-modal-title",
      "readme": "# Modal Title (fw-modal-title)\n",
      "docs": "",
      "docsTags": [
        {
          "name": "parent",
          "text": "modal"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "description",
          "type": "string",
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "The title text to be displayed on the modal",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "The icon to be displayed with the title",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "titleText",
          "type": "string",
          "mutable": false,
          "attr": "title-text",
          "reflectToAttr": false,
          "docs": "The title text to be displayed on the modal",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-modal"
      ],
      "dependencies": [
        "fw-icon"
      ],
      "dependencyGraph": {
        "fw-modal-title": [
          "fw-icon"
        ],
        "fw-modal": [
          "fw-modal-title"
        ]
      }
    },
    {
      "filePath": "./src/components/pagination/pagination.tsx",
      "encapsulation": "shadow",
      "tag": "fw-pagination",
      "readme": "# Pagination (fw-pagination)\n\nfw-pagination displays pagination. The component displays starting and ending record numbers against total number of records.\n\n## Demo\n\n```html live\n<fw-pagination per-page=\"20\" total=\"50\"></fw-pagination><br />\n<fw-pagination total=\"50\"></fw-pagination><br />\n<fw-pagination page=\"2\" per-page=\"10\" total=\"50\"></fw-pagination>\n```\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html\n<fw-pagination per-page=\"20\" total=\"50\"></fw-pagination><br>\n<fw-pagination total=\"50\"></fw-pagination><br />\n<fw-pagination\n  page=\"2\"\n  per-page=\"10\"\n  total=\"50\"\n></fw-pagination>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwPagination } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n    <FwPagination per-page=\"20\" total=\"50\"></FwPagination><br/>\n    <FwPagination total=\"50\"></FwPagination>\n    <FwPagination page=\"2\"\n  per-page=\"10\"\n  total=\"50\"></FwPagination>\n  </div>)\n}\n```\n</code-block>\n</code-group>\n",
      "docs": "fw-pagination displays pagination. The component displays starting and ending record numbers against total number of records.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "buttonGroupLabel",
          "type": "string",
          "mutable": true,
          "attr": "button-group-label",
          "reflectToAttr": false,
          "docs": "Aria Label to be used for the button group.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isLoading",
          "type": "boolean",
          "mutable": false,
          "attr": "is-loading",
          "reflectToAttr": false,
          "docs": "Indicates if the records in current page are being fetched.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "nextButtonLabel",
          "type": "string",
          "mutable": true,
          "attr": "next-button-label",
          "reflectToAttr": false,
          "docs": "Aria Label to be used for next button.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "page",
          "type": "number",
          "mutable": true,
          "attr": "page",
          "reflectToAttr": false,
          "docs": "The current page number.",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "perPage",
          "type": "number",
          "mutable": false,
          "attr": "per-page",
          "reflectToAttr": false,
          "docs": "The number of records to be shown per page. Defaults to 10.",
          "docsTags": [],
          "default": "10",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "previousButtonLabel",
          "type": "string",
          "mutable": true,
          "attr": "previous-button-label",
          "reflectToAttr": false,
          "docs": "Aria Label to be used for previous button.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "total",
          "type": "number",
          "mutable": false,
          "attr": "total",
          "reflectToAttr": false,
          "docs": "The total number of records. This is a mandatory parameter.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "nextPage",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "nextPage() => Promise<void>",
          "parameters": [],
          "docs": "Navigates to next set of records if available.",
          "docsTags": []
        },
        {
          "name": "previousPage",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "previousPage() => Promise<void>",
          "parameters": [],
          "docs": "Navigates to previous set of records if available.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "fwChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when either previous or next button is clicked.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "fw-button-group",
        "fw-button",
        "fw-icon"
      ],
      "dependencyGraph": {
        "fw-pagination": [
          "fw-button-group",
          "fw-button",
          "fw-icon"
        ],
        "fw-button": [
          "fw-spinner",
          "fw-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/pill/pill.tsx",
      "encapsulation": "shadow",
      "tag": "fw-pill",
      "readme": "# Pill (fw-pill)\n\nfw-pill displays an informational text component with icon.\n<br>\nIcon inside the pill must be set with attribute `slot=\"icon\"` and it could either be `fw-icon` or customised with images or SVG icons as required.\n\n## Demo\n\n```html live\n<fw-pill color=\"blue\">\n  <fw-icon name=\"info\" slot=\"icon\"></fw-icon>\n  Response Received\n</fw-pill>\n<fw-pill color=\"red\">\n  <fw-icon name=\"alert\" slot=\"icon\"></fw-icon>\n  Overdue\n</fw-pill>\n<fw-pill color=\"green\">\n  <fw-icon name=\"add-contact\" slot=\"icon\"></fw-icon>\n  New\n</fw-pill>\n<fw-pill color=\"yellow\">\n  <fw-icon name=\"help\" slot=\"icon\"></fw-icon>\n  Pending\n</fw-pill>\n<fw-pill color=\"grey\">\n  <fw-icon name=\"add-note\" slot=\"icon\"></fw-icon>\n  Archived\n</fw-pill>\n```\n\n### Styling Pills with custom icons or images\n\n```html live\n<fw-pill color=\"grey\">\n  <img src=\"/favicon.png\" slot=\"icon\" />\n  Crayons custom icon\n</fw-pill>\n```\n\n### Styling Pills with custom CSS\n\nPill can be customized with custom colors by using custom CSS properties listed further below in the page.\n\n```html live\n<fw-pill\n  style=\"--fw-pill-background-color: #fff;--fw-pill-border: 1px solid gray;--fw-pill-padding: 4px 12px 4px 8px;\"\n>\n  <fw-icon name=\"info\" slot=\"icon\"></fw-icon>\n  Custom Styled Pill\n</fw-pill>\n```\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html\n<fw-pill>\n  <fw-icon name=\"internet\" slot=\"icon\"></fw-icon>\n  Meta Information\n</fw-pill>\n<fw-pill color=\"blue\">\n  <fw-icon name=\"info\" slot=\"icon\"></fw-icon>\n  Response Received\n</fw-pill>\n<fw-pill color=\"red\">\n  <fw-icon name=\"alert\" slot=\"icon\" ></fw-icon>\n  Overdue\n</fw-pill>\n<fw-pill color=\"green\">\n  <fw-icon name=\"add-contact\" slot=\"icon\" ></fw-icon>\n  New\n</fw-pill>\n<fw-pill color=\"yellow\">\n  <fw-icon name=\"help\" slot=\"icon\" ></fw-icon>\n  Pending\n</fw-pill>\n<fw-pill color=\"grey\">\n  <fw-icon name=\"add-note\" slot=\"icon\" ></fw-icon>\n  Archived\n</fw-pill>\n````\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwPill } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n    <FwPill color=\"green\">\n      <FwIcon name=\"internet\" slot=\"icon\"></FwIcon>\n      Meta Information\n    </FwPill>\n </div>);\n}\n````\n\n</code-block>\n</code-group>\n",
      "docs": "fw-pill displays an informational text component with icon.\n<br>\nIcon inside the pill must be set with attribute `slot=\"icon\"` and it could either be `fw-icon` or customised with images or SVG icons as required.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"blue\" | \"green\" | \"grey\" | \"red\" | \"yellow\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Theme based on which the pill is styled.",
          "docsTags": [],
          "values": [
            {
              "value": "blue",
              "type": "string"
            },
            {
              "value": "green",
              "type": "string"
            },
            {
              "value": "grey",
              "type": "string"
            },
            {
              "value": "red",
              "type": "string"
            },
            {
              "value": "yellow",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--fw-pill-background-color",
          "annotation": "prop",
          "docs": "Pill background color"
        },
        {
          "name": "--fw-pill-border",
          "annotation": "prop",
          "docs": "Pill border"
        },
        {
          "name": "--fw-pill-border-radius",
          "annotation": "prop",
          "docs": "Pill border radius"
        },
        {
          "name": "--fw-pill-color",
          "annotation": "prop",
          "docs": "Pill color"
        },
        {
          "name": "--fw-pill-padding",
          "annotation": "prop",
          "docs": "Pill padding"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/popover/popover.tsx",
      "encapsulation": "shadow",
      "tag": "fw-popover",
      "readme": "# Popover (fw-popover)\n\n## Usage\n\nPopover need two slots `popover-trigger` and `popover-content`. By default on clicking the trigger the content will be displayed. The props can be used to change the position of the content, width of the component and the distance between the trigger and the content.\n\n```html live\n<fw-popover>\n  <fw-button slot=\"popover-trigger\">Currency List</fw-button>\n  <fw-list-options id=\"currency\" slot=\"popover-content\"></fw-list-options>\n</fw-popover>\n\n<script type=\"application/javascript\">\n  var rupeeData = [\n    { value: '1', text: 'INR' },\n    { value: '2', text: 'USD' },\n    { value: '3', text: 'AED' },\n    { value: '4', text: 'MYR' },\n    { value: '5', text: 'KWD' },\n    { value: '6', text: 'HKD' },\n    { value: '7', text: 'DMK' },\n    { value: '8', text: 'EUR' },\n  ];\n  var currency = document.getElementById('currency');\n  currency.options = rupeeData;\n</script>\n```\n\n### Controlling the width of the popover-content\n\nIf we want the content width to be different from the trigger then pass the `sameWidth` prop as false.\nAlso the width of the content can be modified via the css variables as shown below.\n\n```html live\n<fw-popover\n  same-width=\"false\"\n  style=\"--fw-popover-min-width: 150px\"\n  placement=\"bottom-start\"\n>\n  <fw-button slot=\"popover-trigger\">Units</fw-button>\n  <fw-list-options id=\"units\" slot=\"popover-content\"></fw-list-options>\n</fw-popover>\n\n<script type=\"application/javascript\">\n  var unitsData = [\n    { value: '1', text: 'Inch' },\n    { value: '2', text: 'Meter' },\n    { value: '3', text: 'Centimeter' },\n    { value: '4', text: 'Foot' },\n    { value: '5', text: 'Yard' },\n    { value: '6', text: 'Mile' },\n  ];\n\n  var units = document.getElementById('units');\n  units.options = unitsData;\n</script>\n```\n\n### Keyboard navigation\n\nSet the `autoFocusOnContent` prop as true to shift the focus to the content on popover open.\n\n> NOTE: Make sure content or trigger is focusable element, Or use the focus() or the setFocus() method on both to handle focus manually.\n\n```html live\n<fw-popover\n  same-width=\"false\"\n  auto-focus-on-content=\"true\"\n  style=\"--fw-popover-min-width: 150px\"\n  placement=\"top-start\"\n>\n  <fw-button slot=\"popover-trigger\">Payment Option</fw-button>\n  <fw-list-options id=\"payment\" slot=\"popover-content\"></fw-list-options>\n</fw-popover>\n\n<script type=\"application/javascript\">\n  var paymentData = [\n    { value: '1', text: 'Cash on delivery' },\n    { value: '2', text: 'Netbanking' },\n    { value: '3', text: 'UPI' },\n    { value: '4', text: 'Credit Card' },\n    { value: '5', text: 'Debit Card' },\n  ];\n\n  var payment = document.getElementById('payment');\n  payment.options = paymentData;\n</script>\n```\n\nThe above event can be handled manually via the listeners.\n\n```html live\n<fw-popover\n  id=\"status-popover\"\n  same-width=\"false\"\n  style=\"--fw-popover-min-width: 150px\"\n  placement=\"top-start\"\n>\n  <fw-button id=\"status-icon\" size=\"icon\" slot=\"popover-trigger\"\n    ><fw-icon name=\"agent\" color=\"white\"></fw-icon>\n  </fw-button>\n  <fw-list-options id=\"status-options\" slot=\"popover-content\"></fw-list-options>\n</fw-popover>\n\n<script type=\"application/javascript\">\n  var statusData = [\n    { value: '1', text: 'Busy' },\n    { value: '2', text: 'InActive' },\n    { value: '3', text: 'Active' },\n  ];\n\n  //Setting data\n  var statusOptions = document.getElementById('status-options');\n  statusOptions.options = statusData;\n\n  // Listening to events and setting focus\n  var statusPopover = document.getElementById('status-popover');\n  var statusIcon = document.getElementById('status-icon');\n  statusPopover.addEventListener('fwShow', () => {\n    statusOptions.setFocus();\n  });\n  statusPopover.addEventListener('fwHide', () => {\n    statusIcon.setFocus();\n  });\n</script>\n```\n\n<code-group>\n<code-block title=\"HTML\">\n\n```html\n<fw-popover\n  id=\"status-popover\"\n  same-width=\"false\"\n  style=\"--fw-popover-min-width: 150px\"\n  placement=\"top-start\"\n>\n  <fw-button id=\"status-icon\" size=\"icon\" slot=\"popover-trigger\"\n    ><fw-icon name=\"agent\" color=\"white\"></fw-icon>\n  </fw-button>\n  <fw-list-options id=\"status-options\" slot=\"popover-content\"></fw-list-options>\n</fw-popover>\n\n<script type=\"application/javascript\">\n  var statusData = [\n    { value: '1', text: 'Busy' },\n    { value: '2', text: 'InActive' },\n    { value: '3', text: 'Active' },\n  ];\n\n  //Setting data\n  var statusOptions = document.getElementById('status-options');\n  statusOptions.options = statusData;\n\n  // Listening to events and setting focus\n  var statusPopover = document.getElementById('status-popover');\n  var statusIcon = document.getElementById('status-icon');\n  statusPopover.addEventListener('fwShow', () => {\n    statusOptions.setFocus();\n  });\n  statusPopover.addEventListener('fwHide', () => {\n    statusIcon.setFocus();\n  });\n</script>\n```\n\n</code-block>\n<code-block title=\"React\">\n\n```jsx\nimport React, { useRef } from 'react';\nimport {\n  FwButton,\n  FwIcon,\n  FwListOptions,\n  FwPopover,\n} from '@freshworks/crayons/react';\n\nconst Popover = () => {\n  const statusIcon = useRef();\n  const statusOptions = useRef();\n\n  const statusData = [\n    { value: '1', text: 'Busy' },\n    { value: '2', text: 'InActive' },\n    { value: '3', text: 'Active' },\n  ];\n\n  return (\n    <div>\n      <FwPopover\n        sameWidth='false'\n        style={{ '--fw-popover-min-width': '150px' }}\n        placement='top-start'\n        onFwShow={() => statusOptions.current.setFocus()}\n        onFwHide={() => statusIcon.current.setFocus()}\n      >\n        <FwButton ref={statusIcon} size='icon' slot='popover-trigger'>\n          <FwIcon name='agent' color='white'></FwIcon>\n        </FwButton>\n        <FwListOptions\n          ref={statusOptions}\n          options={statusData}\n          slot='popover-content'\n        ></FwListOptions>\n      </FwPopover>\n    </div>\n  );\n};\n\nexport default Popover;\n```\n\n</code-block>\n</code-group>\n\nEven a complex dropdown can be created via popover. Below example contains two different fw-list-options inside a single fw-popover.\n\n```html live\n<fw-popover same-width=\"false\" placement=\"bottom-start\">\n  <fw-button slot=\"popover-trigger\" color=\"secondary\" show-caret-icon>\n    <fw-icon\n      id=\"buttonIcon\"\n      slot=\"before-label\"\n      name=\"vertical-align-bottom\"\n    ></fw-icon>\n    <span id=\"buttonContent\">Premier Accounts</span>\n  </fw-button>\n  <div slot=\"popover-content\">\n    <span\n      style=\"font-style: italic;\"\n      class=\"row fw-flex fw-type-xs fw-p-4 fw-type-semibold\"\n      >Sort Customers By</span\n    >\n    <hr style=\"margin: 0px\" />\n    <fw-list-options id=\"sortBy\" variant=\"icon\"> </fw-list-options>\n    <span\n      style=\"font-style: italic;\"\n      class=\"row fw-flex fw-type-xs fw-p-4 fw-type-semibold\"\n      >Sorting Order</span\n    >\n    <hr style=\"margin: 0px\" />\n    <fw-list-options id=\"sortOrder\" variant=\"icon\"> </fw-list-options>\n  </div>\n</fw-popover>\n\n<script type=\"application/javascript\">\n  var sortByData = [\n    {\n      value: '1',\n      text: 'Premier Accounts',\n      graphicsProps: { name: 'verified' },\n    },\n    {\n      value: '2',\n      text: 'Expired Accounts',\n      graphicsProps: { name: 'alert' },\n    },\n    {\n      value: '3',\n      text: 'Freshconect Accounts',\n      graphicsProps: { name: 'freshconnect' },\n    },\n    {\n      value: '4',\n      text: 'Freshchat Accounts',\n      graphicsProps: { name: 'freshchat' },\n    },\n    {\n      value: '5',\n      text: 'Verified Accounts',\n      graphicsProps: { name: 'ticket-primary' },\n    },\n  ];\n  var sortOrderData = [\n    {\n      value: '1',\n      text: 'Ascending',\n      graphicsProps: { name: 'vertical-align-bottom' },\n    },\n    {\n      value: '2',\n      text: 'Descending',\n      graphicsProps: { name: 'vertical-align-top' },\n    },\n  ];\n  var buttonIcon = document.getElementById('buttonIcon');\n  var buttonContent = document.getElementById('buttonContent');\n  var sortBy = document.getElementById('sortBy');\n  sortBy.value = '1';\n  sortBy.options = sortByData;\n  sortBy.addEventListener('fwChange', (e) => {\n    const selectedOptions = e.detail?.meta?.selectedOptions;\n    const text =\n      selectedOptions.length > 0\n        ? e.detail.selectedOptions[0].text\n        : 'Select sort type';\n    buttonContent.removeChild(buttonContent.firstChild);\n    buttonContent.appendChild(document.createTextNode(text));\n  });\n  var sortOrder = document.getElementById('sortOrder');\n  sortOrder.options = sortOrderData;\n  sortOrder.value = '1';\n  sortOrder.addEventListener('fwChange', (e) => {\n    const selectedOptions = e.detail?.meta?.selectedOptions;\n    const iconName =\n      selectedOptions.length > 0\n        ? e.detail.selectedOptions[0].graphicsProps.name\n        : 'vertical-align-bottom';\n    buttonIcon.name = iconName;\n  });\n</script>\n```\n\n<code-group>\n<code-block title='HTML'>\n\n```html\n<fw-popover same-width=\"false\" placement=\"bottom-start\">\n  <fw-button slot=\"popover-trigger\" color=\"secondary\" show-caret-icon>\n    <fw-icon\n      id=\"buttonIcon\"\n      slot=\"before-label\"\n      name=\"vertical-align-bottom\"\n    ></fw-icon>\n    <span id=\"buttonContent\">Premier Accounts</span>\n  </fw-button>\n  <div slot=\"popover-content\">\n    <span\n      style=\"font-style: italic;\"\n      class=\"row fw-flex fw-type-xs fw-p-4 fw-type-semibold\"\n      >Sort Customers By</span\n    >\n    <hr style=\"margin: 0px\" />\n    <fw-list-options id=\"sortBy\" variant=\"icon\"> </fw-list-options>\n    <span\n      style=\"font-style: italic;\"\n      class=\"row fw-flex fw-type-xs fw-p-4 fw-type-semibold\"\n      >Sorting Order</span\n    >\n    <hr style=\"margin: 0px\" />\n    <fw-list-options id=\"sortOrder\" variant=\"icon\"> </fw-list-options>\n  </div>\n</fw-popover>\n\n<script type=\"application/javascript\">\n  var sortByData = [\n    {\n      value: '1',\n      text: 'Premier Accounts',\n      graphicsProps: { name: 'verified' },\n    },\n    {\n      value: '2',\n      text: 'Expired Accounts',\n      graphicsProps: { name: 'alert' },\n    },\n    {\n      value: '3',\n      text: 'Freshconect Accounts',\n      graphicsProps: { name: 'freshconnect' },\n    },\n    {\n      value: '4',\n      text: 'Freshchat Accounts',\n      graphicsProps: { name: 'freshchat' },\n    },\n    {\n      value: '5',\n      text: 'Verified Accounts',\n      graphicsProps: { name: 'ticket-primary' },\n    },\n  ];\n  var sortOrderData = [\n    {\n      value: '1',\n      text: 'Ascending',\n      graphicsProps: { name: 'vertical-align-bottom' },\n    },\n    {\n      value: '2',\n      text: 'Descending',\n      graphicsProps: { name: 'vertical-align-top' },\n    },\n  ];\n  var buttonIcon = document.getElementById('buttonIcon');\n  var buttonContent = document.getElementById('buttonContent');\n  var sortBy = document.getElementById('sortBy');\n  sortBy.value = '1';\n  sortBy.options = sortByData;\n  sortBy.addEventListener('fwChange', (e) => {\n    const selectedOptions = e.detail?.meta?.selectedOptions;\n    const text =\n      selectedOptions.length > 0\n        ? e.detail.selectedOptions[0].text\n        : 'Select sort type';\n    buttonContent.removeChild(buttonContent.firstChild);\n    buttonContent.appendChild(document.createTextNode(text));\n  });\n  var sortOrder = document.getElementById('sortOrder');\n  sortOrder.options = sortOrderData;\n  sortOrder.value = '1';\n  sortOrder.addEventListener('fwChange', (e) => {\n    const selectedOptions = e.detail?.meta?.selectedOptions;\n    const iconName =\n      selectedOptions.length > 0\n        ? e.detail.selectedOptions[0].graphicsProps.name\n        : 'vertical-align-bottom';\n    buttonIcon.name = iconName;\n  });\n</script>\n```\n\n</code-block>\n<code-block title='React'>\n\n```jsx\nimport React, { useState } from 'react';\nimport {\n  FwButton,\n  FwIcon,\n  FwListOptions,\n  FwPopover,\n} from '@freshworks/crayons/react';\n\nconst Popover = () => {\n  var sortByData = [\n    {\n      value: '1',\n      text: 'Premier Accounts',\n      graphicsProps: { name: 'verified' },\n    },\n    {\n      value: '2',\n      text: 'Expired Accounts',\n      graphicsProps: { name: 'alert' },\n    },\n    {\n      value: '3',\n      text: 'Freshconect Accounts',\n      graphicsProps: { name: 'freshconnect' },\n    },\n    {\n      value: '4',\n      text: 'Freshchat Accounts',\n      graphicsProps: { name: 'freshchat' },\n    },\n    {\n      value: '5',\n      text: 'Verified Accounts',\n      graphicsProps: { name: 'ticket-primary' },\n    },\n  ];\n  var sortOrderData = [\n    {\n      value: 'vertical-align-bottom',\n      text: 'Ascending',\n      graphicsProps: { name: 'vertical-align-bottom' },\n    },\n    {\n      value: 'vertical-align-top',\n      text: 'Descending',\n      graphicsProps: { name: 'vertical-align-top' },\n    },\n  ];\n\n  // Setting initial states\n  const [sortBy, setSortBy] = useState(sortByData[0]);\n  const [sortOrder, setSortOrder] = useState(sortOrderData[0]);\n\n  const onSortChange = (event) => {\n    setSortBy(event.detail?.meta?.selectedOptions[0]);\n  };\n\n  const onSortOrderChange = (event) => {\n    setSortOrder(event.detail?.meta?.selectedOptions[0]);\n  };\n\n  return (\n    <div>\n      <FwPopover sameWidth='false' placement='bottom-start'>\n        <FwButton slot='popover-trigger' color='secondary' showCaretIcon>\n          <FwIcon slot='before-label' name={sortOrder.value}></FwIcon>\n          <span id='buttonContent'>{sortBy.text}</span>\n        </FwButton>\n        <div slot='popover-content'>\n          <span\n            style={{ fontStyle: 'italic' }}\n            className='row fw-flex fw-type-xs fw-p-4 fw-type-semibold'\n          >\n            Sort Customers By\n          </span>\n          <hr style={{ margin: '0px' }} />\n          <FwListOptions\n            onFwChange={onSortChange}\n            selectedOptions={[sortByData[0]]}\n            options={sortByData}\n            variant='icon'\n          ></FwListOptions>\n\n          <span\n            style={{ fontStyle: 'italic' }}\n            className='row fw-flex fw-type-xs fw-p-4 fw-type-semibold'\n          >\n            Sort Order\n          </span>\n          <hr style={{ margin: '0px' }} />\n          <FwListOptions\n            onFwChange={onSortOrderChange}\n            selectedOptions={[sortOrderData[0]]}\n            options={sortOrderData}\n            variant='icon'\n          ></FwListOptions>\n        </div>\n      </FwPopover>\n    </div>\n  );\n};\n\nexport default Popover;\n```\n\n</code-block>\n</code-group>\n\nA simple dropdown button can be achieved as shown below.\n\n```html live\n<fw-popover\n  trigger=\"manual\"\n  id=\"sports-dropdown\"\n  same-width=\"false\"\n  placement=\"bottom-start\"\n  auto-focus-on-content\n>\n  <fw-button-group label=\"Test\" slot=\"popover-trigger\">\n    <fw-button>Choose the sport</fw-button>\n    <fw-button id=\"icon-btn\" size=\"icon\">\n      <fw-icon\n        id=\"chevron-icon\"\n        name=\"chevron-down\"\n        slot=\"after-label\"\n      ></fw-icon>\n    </fw-button>\n  </fw-button-group>\n  <fw-list-options\n    id=\"sports\"\n    slot=\"popover-content\"\n    searchable\n  ></fw-list-options>\n</fw-popover>\n<script type=\"application/javascript\">\n  var dropdown = document.getElementById('sports-dropdown');\n  var iconbtn = document.getElementById('icon-btn');\n  var chevron = document.getElementById('chevron-icon');\n  iconbtn.addEventListener('click', () => {\n    if (dropdown.isOpen) {\n      dropdown.hide();\n    } else {\n      dropdown.show();\n    }\n  });\n  dropdown.addEventListener('fwShow', () => {\n    chevron.style.cssText = 'transform: rotate(180deg)';\n  });\n  dropdown.addEventListener('fwHide', () => {\n    chevron.style.cssText = '';\n  });\n  var sports = document.getElementById('sports');\n  sports.options = [\n    { value: 1, text: 'Football' },\n    { value: 2, text: 'Vollyball' },\n    { value: 3, text: 'Cricket' },\n    { value: 4, text: 'Kabadi' },\n  ];\n</script>\n```\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "autoFocusOnContent",
          "type": "boolean",
          "mutable": false,
          "attr": "auto-focus-on-content",
          "reflectToAttr": false,
          "docs": "Whether to focus on the element in popover-content slot on opening the dropdown.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "boundary",
          "type": "HTMLElement",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The area that the popup will be checked for overflow relative to.",
          "docsTags": [],
          "values": [
            {
              "type": "HTMLElement"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableTransition",
          "type": "boolean",
          "mutable": false,
          "attr": "disable-transition",
          "reflectToAttr": false,
          "docs": "Option to disable the popover animation on hide and show.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "distance",
          "type": "string",
          "mutable": false,
          "attr": "distance",
          "reflectToAttr": false,
          "docs": "Distance defines the distance between the popover trigger and the popover content along y-axis.",
          "docsTags": [],
          "default": "'0'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fallbackPlacements",
          "type": "[PopoverPlacementType]",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Alternative placement for popover if the default placement is not possible.",
          "docsTags": [],
          "default": "['top']",
          "values": [
            {
              "type": "[PopoverPlacementType]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hasBorder",
          "type": "boolean",
          "mutable": false,
          "attr": "has-border",
          "reflectToAttr": false,
          "docs": "Option to determine if popover-content has a border.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideAfter",
          "type": "number",
          "mutable": false,
          "attr": "hide-after",
          "reflectToAttr": false,
          "docs": "Indicates the delay after which popover will be hidden.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideOnTab",
          "type": "boolean",
          "mutable": false,
          "attr": "hide-on-tab",
          "reflectToAttr": false,
          "docs": "Indicates whether popover contents should be hidden on pressing Tab.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hoist",
          "type": "boolean",
          "mutable": false,
          "attr": "hoist",
          "reflectToAttr": false,
          "docs": "Option to prevent the tooltip from being clipped when the component is placed inside a container with\n`overflow: auto|hidden|scroll`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placement",
          "type": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": false,
          "docs": "Placement of the popover content with respect to the popover trigger.",
          "docsTags": [],
          "default": "'bottom'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sameWidth",
          "type": "boolean",
          "mutable": false,
          "attr": "same-width",
          "reflectToAttr": false,
          "docs": "Whether the popover-content width to be same as that of the popover-trigger.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showAfter",
          "type": "number",
          "mutable": false,
          "attr": "show-after",
          "reflectToAttr": false,
          "docs": "Indicates the delay after which popover will be shown.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "skidding",
          "type": "string",
          "mutable": false,
          "attr": "skidding",
          "reflectToAttr": false,
          "docs": "Skidding defines the distance between the popover trigger and the popover content along x-axis.",
          "docsTags": [],
          "default": "'0'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trigger",
          "type": "\"click\" | \"hover\" | \"manual\"",
          "mutable": false,
          "attr": "trigger",
          "reflectToAttr": false,
          "docs": "The trigger event on which the popover-content is displayed. The available options are\n'click' | 'manual' | 'hover', in case of 'manual' no trigger event will be set.",
          "docsTags": [],
          "default": "'click'",
          "values": [
            {
              "value": "click",
              "type": "string"
            },
            {
              "value": "hover",
              "type": "string"
            },
            {
              "value": "manual",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"date-picker\" | \"select\"",
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "Variant defines the style of the popover-content.",
          "docsTags": [],
          "default": "'select'",
          "values": [
            {
              "value": "date-picker",
              "type": "string"
            },
            {
              "value": "select",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "hide",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "hide() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "show",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "show() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "fwHide",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered whenever the popover contents is closed/hidden.",
          "docsTags": []
        },
        {
          "event": "fwShow",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered whenever the popover contents is open/displayed.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--fw-popover-border-radius",
          "annotation": "prop",
          "docs": "border radius of the popover content."
        },
        {
          "name": "--fw-popover-max-height",
          "annotation": "prop",
          "docs": "Maximum height of the popover content."
        },
        {
          "name": "--fw-popover-max-width",
          "annotation": "prop",
          "docs": "Maximum width of the popover content."
        },
        {
          "name": "--fw-popover-min-height",
          "annotation": "prop",
          "docs": "Minimum height of the popover content."
        },
        {
          "name": "--fw-popover-min-width",
          "annotation": "prop",
          "docs": "Minimum width of the popover content."
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-datepicker",
        "fw-select",
        "fw-tooltip"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "fw-datepicker": [
          "fw-popover"
        ],
        "fw-select": [
          "fw-popover"
        ],
        "fw-tooltip": [
          "fw-popover"
        ]
      }
    },
    {
      "filePath": "./src/components/progress-loader/progress-loader.tsx",
      "encapsulation": "shadow",
      "tag": "fw-progress-loader",
      "readme": "# Progress Loader (fw-progress-loader)\n\nProgress Loader Component can be used to indicate loading of a Page / Section of a page.\n\n## Demo\n\n```html live\n<fw-progress-loader id=\"root\" show></fw-progress-loader>\n\n<br/><br/><br/>\n<fw-progress-loader parent=\"#container2\" id=\"progress-container\"></fw-progress-loader>\n\n\n<div id=\"container2\"> <p> You can have multiple progress loaders in the page. Pass a `selector` as a `parent` prop to the component. The progress loader will be displayed in the provided selector</p></div>\n\n<br>\n<br/>\n<br/>\n<fw-button onclick=\"document.querySelector('#progress-container').start()\">Start custom selector progress bar</fw-button> <br/><br/>\n<fw-button onclick=\"document.querySelector('#progress-container').done()\">Stop custom selector progress bar</fw-button>\n\n<script type=\"application/javascript\">\n    document.querySelector('#progress-container').start();\n    setTimeout(()=>{\n        document.querySelector('#root').done();\n    },10000)\n</script>\n```\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html \n<fw-progress-loader id=\"root\" show></fw-progress-loader>\n\n<br/><br/><br/>\n<fw-progress-loader parent=\"#container2\" id=\"progress-container\"></fw-progress-loader>\n\n<div id=\"container2\"> <p> You can have multiple progress loaders in the page. Pass a `selector` as a `parent` prop to the component. The progress loader will be displayed in the provided selector</p></div>\n<br>\n<br/>\n<br/>\n<fw-button onclick=\"document.querySelector('#progress-container').start()\">Start custom selector progress bar</fw-button> <br/><br/>\n<fw-button onclick=\"document.querySelector('#progress-container').done()\">Stop custom selector progress bar</fw-button>\n\n<script type=\"application/javascript\">\n    document.querySelector('#progress-container').start();\n    setTimeout(function() {\n        document.querySelector('#root').done();\n    },10000)\n</script>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React, {useRef} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {FwButton,FwProgressLoader,ProgressLoaderController } from \"@freshworks/crayons/react\"\n\nfunction App() {\n  const pl1 = useRef(null)\n  const loaderCustom= ProgressLoaderController({\n    parent:\"#container1\"\n  });\n  return (<div>\n            <FwProgressLoader show ref={pl1}></FwProgressLoader>\n            <br/>\n            <div style={{display:'flex', justifyContent:'space-between'}}>\n                <FwButton onClick={() => pl1.current.show=true}>Show root loader - component - via prop</FwButton>\n                <FwButton onClick={() => pl1.current.show=false}>Hide root loader - component - via prop</FwButton>\n                <FwButton onClick={() => pl1.current.start()}>Start root loader - component - via method</FwButton>\n                <FwButton onClick={() => pl1.current.done()}>Hide root loader - component - via method</FwButton>\n            </div>\n\n          <div id=\"container1\"><p> You can have multiple progress loaders in the page. Pass a `selector` as a `parent` prop to the component. The progress loader will be displayed in the provided selector</p></div>\n          <br/>\n          <br/>\n          <br/>\n\n          <div style={{display:'flex', justifyContent:'space-between'}}>\n                <FwButton onClick={() => loaderCustom.start()}>Show custom loader - via prop</FwButton>\n                <FwButton onClick={() => loaderCustom.done()}>Hide custom loader - via prop</FwButton>\n        </div>\n\n </div>);\n}\n```\n</code-block>\n</code-group>\n\n### Styling Loader \nYou can style progress loader by targetting `class=\"bar\"` selector. \nYou can also use `--progress-loader-color` and `--progress-loader-height` **css variables** to use custom color and height for the progress loader.\n\n### ProgressLoaderController\n\nYou can use `ProgressLoaderController` to create loaders by passing the below set of [ProgressLoaderOptions](#progressloaderoptions).\n\nYou can use the below mentioned [Methods](#methods) to manage loaders \n\n```js\nJavascript - import { ProgressLoaderController } from \"@freshworks/crayons\"\nReact - import { ProgressLoaderController } from \"@freshworks/crayons/react\"\n\n const loaderCustom= ProgressLoaderController({\n    //...Progress Loader Options\n });\n```\n#### ProgressLoaderOptions\n```js\ninterface ProgressLoaderOptions {\n  /**\n   * Changes the minimum percentage used upon starting. Default is `0.08`\n   */\n  minimum?: number;\n  /**\n   * Adjust animation settings using easing (a CSS easing string). Default is `ease`\n   */\n  easing?: string;\n  /**\n   * Add speed (in ms). Default is `200`\n   */\n  speed?: number;\n  /**\n   * Turn on/off the automatic incrementing behavior by setting this to false. Default is `true`\n   */\n  trickle?: boolean;\n  /**\n   * Adjust how often to trickle/increment, in ms. Default is `200`\n   */\n  trickleSpeed?: number;\n  /**\n   * Specify a selector to change the parent container. Default is `body`\n   * Selector is accessed internally via document.querySelector method\n   */\n  parent?: string;\n  /**\n   * Use Custom markup. To keep the progress bar working, keep an element with class='bar' in there\n   */\n  template?: string;\n}\n```\n\n",
      "docs": "Progress Loader Component can be used to indicate loading of a Page / Section of a page.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "easing",
          "type": "string",
          "mutable": false,
          "attr": "easing",
          "reflectToAttr": false,
          "docs": "Adjust animation settings using easing (a CSS easing string). Default is `ease`",
          "docsTags": [],
          "default": "'ease'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minimum",
          "type": "number",
          "mutable": false,
          "attr": "minimum",
          "reflectToAttr": false,
          "docs": "Changes the minimum percentage used upon starting. Default is `0.08`",
          "docsTags": [],
          "default": "0.08",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "parent",
          "type": "string",
          "mutable": false,
          "attr": "parent",
          "reflectToAttr": false,
          "docs": "Specify a selector to change the parent container. Default is `body`\nSelector is accessed internally via document.querySelector method",
          "docsTags": [],
          "default": "'body'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "show",
          "type": "boolean",
          "mutable": false,
          "attr": "show",
          "reflectToAttr": true,
          "docs": "Show progress loader. Default `false`",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "speed",
          "type": "number",
          "mutable": false,
          "attr": "speed",
          "reflectToAttr": false,
          "docs": "Add speed (in ms). Default is `200`",
          "docsTags": [],
          "default": "200",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "template",
          "type": "string",
          "mutable": false,
          "attr": "template",
          "reflectToAttr": false,
          "docs": "Use Custom markup. To keep the progress bar working, keep an element with class='bar' in there",
          "docsTags": [],
          "default": "'<div class=\"bar\" role=\"progressbar\" aria-valuemin=\"0\" aria-valuemax=\"1\"></div>'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trickle",
          "type": "boolean",
          "mutable": false,
          "attr": "trickle",
          "reflectToAttr": false,
          "docs": "Turn on/off the automatic incrementing behavior by setting this to false. Default is `true`",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trickleSpeed",
          "type": "number",
          "mutable": false,
          "attr": "trickle-speed",
          "reflectToAttr": false,
          "docs": "Adjust how often to trickle/increment, in ms. Default is `200`",
          "docsTags": [],
          "default": "200",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "done",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "done() => Promise<void>",
          "parameters": [],
          "docs": "Method to end the progress. This hides the progress loader",
          "docsTags": []
        },
        {
          "name": "inc",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "inc() => Promise<void>",
          "parameters": [],
          "docs": "Increments the progress status by a random amount.",
          "docsTags": []
        },
        {
          "name": "set",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "set(n: number) => Promise<void>",
          "parameters": [],
          "docs": "Sets the progress loader status, where `n` is a number from `0.0` to `1.0`.",
          "docsTags": []
        },
        {
          "name": "start",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "start() => Promise<void>",
          "parameters": [],
          "docs": "Method to start showing the progress loader",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/radio/radio.tsx",
      "encapsulation": "shadow",
      "tag": "fw-radio",
      "readme": "# Radio (fw-radio)\n\nfw-radio displays a radio button on the user interface and enables assigning a state (selected or deselected) to it. In the selected state, the button displayed is highlighted. fw-radio provides child elements for fw-radio-group, to populate the Radio Group component’s list. \n\n## Demo\n\n```html live\n<fw-radio checked description=\"Select to agree\">Agree or Disagree</fw-radio><br><br>\n<fw-radio checked disabled value=\"dr\">Disabled radio</fw-radio>\n```\n\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html \n<fw-radio checked description=\"Select to agree\">Agree or Disagree</fw-radio><br><br>\n<fw-radio checked disabled value=\"dr\">Disabled radio</fw-radio>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwRadio } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n        <FwRadio checked description=\"Select to agree\">Agree or Disagree</FwRadio><br/><br/>\n        <FwRadio checked disabled value=\"dr\">Disabled radio</FwRadio>\n    </div>);\n}\n```\n</code-block>\n</code-group>\n",
      "docs": "fw-radio displays a radio button on the user interface and enables assigning a state (selected or deselected) to it. In the selected state, the button displayed is highlighted. fw-radio provides child elements for fw-radio-group, to populate the Radio Group component’s list.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "Sets the state to selected. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "description",
          "type": "string",
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "Description to be displayed for the checkbox.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "Use `description` instead.\nLabel displayed on the interface, for the check box."
            }
          ],
          "default": "''",
          "deprecation": "Use `description` instead.\nLabel displayed on the interface, for the check box.",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "\"error\" | \"normal\"",
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "Theme based on which the radio button is styled.",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "normal",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Identifier corresponding to the component, that is saved when the form data is saved.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on a specific `fw-radio`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "fwBlur",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the radio button loses focus.",
          "docsTags": []
        },
        {
          "event": "fwChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the radio button is toggled.",
          "docsTags": []
        },
        {
          "event": "fwDeselect",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the radio button in focus is cleared.",
          "docsTags": []
        },
        {
          "event": "fwFocus",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the radio button comes into focus.",
          "docsTags": []
        },
        {
          "event": "fwSelect",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "\n/**\n  Triggered when the radio button in focus is selected.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-form-control"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "fw-form-control": [
          "fw-radio"
        ]
      }
    },
    {
      "filePath": "./src/components/radio-group/radio-group.tsx",
      "encapsulation": "none",
      "tag": "fw-radio-group",
      "readme": "# Radio Group (fw-radio-group)\nfw-radio-group displays a group of options with radio buttons and enables selection of one option from the list. \n\n## Demo\n\n```html live\n<fw-radio-group name=\"Profile\" value=\"au\" allow-empty>\n  <fw-radio value=\"au\">Auditory</fw-radio>\n  <fw-radio value=\"vi\">Visual</fw-radio>\n  <fw-radio value=\"re\">Restless</fw-radio>\n</fw-radio-group>\n```\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html \n<fw-radio-group name=\"Profile\" value=\"au\" allow-empty>\n  <fw-radio value=\"au\">Auditory</fw-radio>\n  <fw-radio value=\"vi\">Visual</fw-radio>\n  <fw-radio value=\"re\">Restless</fw-radio>\n</fw-radio-group>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwRadio, FwRadioGroup } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n        <FwRadioGroup name=\"Profile\" value=\"au\" allowEmpty>\n          <FwRadio value=\"au\">Auditory</FwRadio>\n          <FwRadio value=\"vi\">Visual</FwRadio>\n          <FwRadio value=\"re\">Restless</FwRadio>\n        </FwRadioGroup>\n    </div>);\n}\n```\n</code-block>\n</code-group>\n",
      "docs": "fw-radio-group displays a group of options with radio buttons and enables selection of one option from the list.",
      "docsTags": [
        {
          "name": "parent",
          "text": "radio"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "allowEmpty",
          "type": "boolean",
          "mutable": false,
          "attr": "allow-empty",
          "reflectToAttr": false,
          "docs": "If true, a radio group can be saved without selecting any option. If an option is selected, the selection can be cleared. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "errorText",
          "type": "string",
          "mutable": false,
          "attr": "error-text",
          "reflectToAttr": false,
          "docs": "Error text displayed below the radio group.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hintText",
          "type": "string",
          "mutable": false,
          "attr": "hint-text",
          "reflectToAttr": false,
          "docs": "Hint text displayed below the radio group.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label for the component",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "orientation",
          "type": "\"column\" | \"row\"",
          "mutable": false,
          "attr": "orientation",
          "reflectToAttr": false,
          "docs": "Indicates the direction of the radio buttons alignment, defaults to vertical alignment.",
          "docsTags": [],
          "default": "'column'",
          "values": [
            {
              "value": "column",
              "type": "string"
            },
            {
              "value": "row",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Specifies the input radio group as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "\"error\" | \"normal\" | \"warning\"",
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "Theme based on which the radio group is styled.",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "normal",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Default option that is selected when the radio group is displayed on the interface. Must be a valid value corresponding to the fw-radio components used in the Radio Group.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "warningText",
          "type": "string",
          "mutable": false,
          "attr": "warning-text",
          "reflectToAttr": false,
          "docs": "Warning text displayed below the radio group.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on a specific `fw-radio`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "fwChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when an option in the Radio Group is selected or deselected.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "keyup",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-form-control"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "fw-form-control": [
          "fw-radio-group"
        ]
      }
    },
    {
      "filePath": "./src/components/select/select.tsx",
      "encapsulation": "shadow",
      "tag": "fw-select",
      "readme": "# Select (fw-select)\n\nfw-select displays a list or drop-down box that enables selection of an option or multiple options from an available list of values.\n\n## Demo\n\nThe data for the select can either be passed as a child/slot* or via a datasource which follows the fw-select-option schema.\n\n***Please note that we do not support dynamic updation of options when passed as a child/slot. Kindly utilise the options prop provided for dynamic updation of options.**\n\n```html live\n<fw-select\n  label=\"House Name\"\n  required=\"true\"\n  value=\"1\"\n  placeholder=\"Your choice\"\n  hint-text=\"Select singluar option\"\n>\n  <fw-select-option value=\"1\">Starks</fw-select-option>\n  <fw-select-option value=\"2\">Lannisters</fw-select-option>\n</fw-select>\n<fw-select\n  label=\"Names\"\n  placeholder=\"Your choices\"\n  hint-text=\"Select multiple options\"\n  multiple\n>\n  <fw-select-option value=\"1\" selected>Starks</fw-select-option>\n  <fw-select-option value=\"2\">Lannisters</fw-select-option>\n  <fw-select-option value=\"3\">Sand</fw-select-option>\n  <fw-select-option value=\"4\">Greyjoys</fw-select-option>\n  <fw-select-option value=\"5\">Tyrell</fw-select-option>\n</fw-select>\n\n<fw-select\n  label=\"House Name\"\n  required=\"true\"\n  value=\"1\"\n  placeholder=\"Your choice\"\n  error-text=\"Select singluar option\"\n  state=\"error\"\n>\n  <fw-select-option value=\"1\">Starks</fw-select-option>\n  <fw-select-option value=\"2\">Lannisters</fw-select-option>\n</fw-select>\n<h3>`hint-text`, `warning-text`, `error-text` can be passed as slots</h3>\n<fw-select\n  label=\"House Name\"\n  required=\"true\"\n  value=\"1\"\n  placeholder=\"Your choice\"\n  state=\"error\"\n>\n<div slot=\"error-text\">Select singluar option</div>\n  <fw-select-option value=\"1\">Starks</fw-select-option>\n  <fw-select-option value=\"2\">Lannisters</fw-select-option>\n</fw-select>\n```\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n\n```html\n<fw-select\n  label=\"House Name\"\n  required=\"true\"\n  value=\"1\"\n  placeholder=\"Your choice\"\n  hint-text=\"Select singluar option\"\n>\n  <fw-select-option value=\"1\">Starks</fw-select-option>\n  <fw-select-option value=\"2\">Lannisters</fw-select-option>\n</fw-select>\n<fw-select\n  label=\"Names\"\n  placeholder=\"Your choices\"\n  hint-text=\"Select multiple options\"\n  multiple\n>\n  <fw-select-option value=\"1\" selected>Starks</fw-select-option>\n  <fw-select-option value=\"2\">Lannisters</fw-select-option>\n  <fw-select-option value=\"3\">Sand</fw-select-option>\n  <fw-select-option value=\"4\">Greyjoys</fw-select-option>\n  <fw-select-option value=\"5\">Tyrell</fw-select-option>\n</fw-select>\n<fw-select\n  label=\"House Name\"\n  required=\"true\"\n  value=\"1\"\n  placeholder=\"Your choice\"\n  error-text=\"Select singluar option\"\n  state=\"error\"\n>\n  <fw-select-option value=\"1\">Starks</fw-select-option>\n  <fw-select-option value=\"2\">Lannisters</fw-select-option>\n</fw-select>\n<h3>`hint-text`, `warning-text`, `error-text` can be passed as slots</h3>\n<fw-select\n  label=\"House Name\"\n  required=\"true\"\n  value=\"1\"\n  placeholder=\"Your choice\"\n  state=\"error\"\n>\n<div slot=\"error-text\">Select singluar option</div>\n  <fw-select-option value=\"1\">Starks</fw-select-option>\n  <fw-select-option value=\"2\">Lannisters</fw-select-option>\n</fw-select>\n```\n\n</code-block>\n\n<code-block title=\"React\">\n\n```jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { FwSelect, FwSelectOption } from '@freshworks/crayons/react';\nfunction App() {\n  return (\n    <div>\n      <FwSelect\n        label='House Name'\n        required\n        value='1'\n        placeholder='Your choice'\n        hintText='Select singluar option'\n      >\n        <FwSelectOption value='1'>Starks</FwSelectOption>\n        <FwSelectOption value='2'>Lannisters</FwSelectOption>\n      </FwSelect>\n\n      <FwSelect\n        label='Names'\n        placeholder='Your choices'\n        hintText='Select multiple options'\n        multiple\n      >\n        <FwSelectOption value='1' selected>\n          Starks\n        </FwSelectOption>\n        <FwSelectOption value='2'>Lannisters</FwSelectOption>\n        <FwSelectOption value='3'>Sand</FwSelectOption>\n        <FwSelectOption value='4'>Greyjoys</FwSelectOption>\n        <FwSelectOption value='5'>Tyrell</FwSelectOption>\n      </FwSelect>\n\n      <FwSelect\n        label=\"House Name\"\n        required=\"true\"\n        value=\"1\"\n        placeholder=\"Your choice\"\n        errorText=\"Select singluar option\"\n        state=\"error\"\n      >\n        <FwSelectOption value=\"1\">Starks</FwSelectOption>\n        <FwSelectOption value=\"2\">Lannisters</FwSelectOption>\n      </FwSelect>\n      <h3>`hint-text`, `warning-text`, `error-text` can be passed as slots</h3>\n      <FwSelect\n        label=\"House Name\"\n        required=\"true\"\n        value=\"1\"\n        placeholder=\"Your choice\"\n        state=\"error\"\n      >\n      <div slot=\"error-text\">Select singluar option</div>\n        <FwSelectOption value=\"1\">Starks</FwSelectOption>\n        <FwSelectOption value=\"2\">Lannisters</FwSelectOption>\n      </FwSelect>\n    </div>\n  );\n}\n```\n\n</code-block>\n</code-group>\n\n### Demo with datasource\n\n```html live\n<fw-select\n  label=\"Names\"\n  placeholder=\"Your choices\"\n  hint-text=\"Select multiple options\"\n  multiple\n>\n  <fw-select-option value=\"1\" selected>Starks</fw-select-option>\n  <fw-select-option value=\"2\">Lannisters</fw-select-option>\n  <fw-select-option value=\"3\">Sand</fw-select-option>\n  <fw-select-option value=\"4\">Greyjoys</fw-select-option>\n  <fw-select-option value=\"5\">Tyrell</fw-select-option>\n</fw-select>\n\n<fw-select\n  id=\"complexSelect\"\n  label=\"Strawhat Pirates\"\n  placeholder=\"Your choices\"\n  hint-text=\"Select multiple options\"\n  multiple\n>\n</fw-select>\n\n<script type=\"application/javascript\">\n  var iconDataSource = [\n    {\n      value: '1',\n      text: 'Luffy',\n      subText: 'Pirate King',\n      graphicsProps: { name: 'verified' },\n    },\n    {\n      value: '2',\n      text: 'Zorro',\n      subText: 'Best Swordsman',\n      graphicsProps: { name: 'magic-wand' },\n    },\n    {\n      value: '3',\n      text: 'Sanji',\n      subText: 'Best Chef',\n      graphicsProps: { name: 'ecommerce' },\n    },\n  ];\n  var iconVariant = document.getElementById('complexSelect');\n  iconVariant.options = iconDataSource;\n</script>\n```\n\n### Usage with datasource\n\n<code-group>\n<code-block title=\"HTML\">\n\n```html\n<fw-select\n  label=\"Names\"\n  placeholder=\"Your choices\"\n  hint-text=\"Select multiple options\"\n  multiple\n>\n  <fw-select-option value=\"1\" selected>Starks</fw-select-option>\n  <fw-select-option value=\"2\">Lannisters</fw-select-option>\n  <fw-select-option value=\"3\">Sand</fw-select-option>\n  <fw-select-option value=\"4\">Greyjoys</fw-select-option>\n  <fw-select-option value=\"5\">Tyrell</fw-select-option>\n</fw-select>\n\n<fw-select\n  id=\"complexSelect\"\n  label=\"Strawhat Pirates\"\n  placeholder=\"Your choices\"\n  hint-text=\"Select multiple options\"\n  options-variant=\"icon\"\n  multiple\n>\n</fw-select>\n\n<script type=\"application/javascript\">\n  var iconDataSource = [\n    {\n      value: '1',\n      text: 'Luffy',\n      subText: 'Pirate King',\n      graphicsProps: { name: 'verified' },\n    },\n    {\n      value: '2',\n      text: 'Zorro',\n      subText: 'Best Swordsman',\n      graphicsProps: { name: 'magic-wand' },\n    },\n    {\n      value: '3',\n      text: 'Sanji',\n      subText: 'Best Chef',\n      graphicsProps: { name: 'ecommerce' },\n    },\n  ];\n  var iconVariant = document.getElementById('complexSelect');\n  iconVariant.options = iconDataSource;\n</script>\n```\n\n</code-block>\n\n<code-block title=\"React\">\n\n```jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { FwSelect } from '@freshworks/crayons/react';\nfunction App() {\n  var iconDataSource = [\n    {\n      value: '1',\n      text: 'Luffy',\n      subText: 'Pirate King',\n      graphicsProps: { name: 'verified' },\n    },\n    {\n      value: '2',\n      text: 'Zorro',\n      subText: 'Best Swordsman',\n      graphicsProps: { name: 'magic-wand' },\n    },\n    {\n      value: '3',\n      text: 'Sanji',\n      subText: 'Best Chef',\n      graphicsProps: { name: 'ecommerce' },\n    },\n  ];\n\n  return (\n    <div>\n      <FwSelect\n        label='Names'\n        placeholder='Your choices'\n        hintText='Select multiple options'\n        multiple\n      >\n        <FwSelectOption value='1' selected>\n          Starks\n        </FwSelectOption>\n        <FwSelectOption value='2'>Lannisters</FwSelectOption>\n        <FwSelectOption value='3'>Sand</FwSelectOption>\n        <FwSelectOption value='4'>Greyjoys</FwSelectOption>\n        <FwSelectOption value='5'>Tyrell</FwSelectOption>\n      </FwSelect>\n\n      <FwSelect\n        label='Strawhat Pirates'\n        placeholder='Your choices'\n        hintText='Select multiple options'\n        multiple\n        options={iconDataSource}\n      ></FwSelect>\n    </div>\n  );\n}\n```\n\n</code-block>\n</code-group>\n\n### Demo for setting/getting selected options\n\nTo set the default selected value following methods can be used set `setSelectedOptions` or `setSelectedValues` or by directly modifying the `value` prop.\n\n> NOTE: The value will be of type `string` for single select and `string[]` for multi-select. The params for the function `setSelectedValues` will be of type `string` for single select and `string[]` for multi-select.\n\nTo get the selected values the consuming app can listen to `fwChange` event for `detail` attribute or by calling the method `getSelectedItem` which can be resolved to get the selected value.\n\n```html live\n<fw-select\n  label=\"Pick one character\"\n  placeholder=\"Your choices\"\n  hint-text=\"Select Single options\"\n  value=\"5\"\n>\n  <fw-select-option value=\"1\">Starks</fw-select-option>\n  <fw-select-option value=\"2\">Lannisters</fw-select-option>\n  <fw-select-option value=\"3\">Sand</fw-select-option>\n  <fw-select-option value=\"4\">Greyjoys</fw-select-option>\n  <fw-select-option value=\"5\">Tyrell</fw-select-option>\n</fw-select>\n\n<fw-select\n  label=\"Pick favorite characters\"\n  placeholder=\"Your choices\"\n  hint-text=\"Select multiple options\"\n  id=\"multiSelect\"\n  multiple\n>\n  <fw-select-option value=\"1\">Starks</fw-select-option>\n  <fw-select-option value=\"2\">Lannisters</fw-select-option>\n  <fw-select-option value=\"3\">Sand</fw-select-option>\n  <fw-select-option value=\"4\">Greyjoys</fw-select-option>\n  <fw-select-option value=\"5\">Tyrell</fw-select-option>\n</fw-select>\n\n<fw-select\n  label=\"Names\"\n  placeholder=\"Your choices\"\n  hint-text=\"Select multiple options\"\n  id=\"methodSelect\"\n  multiple\n>\n  <fw-select-option value=\"1\">Starks</fw-select-option>\n  <fw-select-option value=\"2\">Lannisters</fw-select-option>\n  <fw-select-option value=\"3\">Sand</fw-select-option>\n  <fw-select-option value=\"4\">Greyjoys</fw-select-option>\n  <fw-select-option value=\"5\">Tyrell</fw-select-option>\n</fw-select>\n\n<fw-select\n  id=\"methodOptionSelect\"\n  label=\"Strawhat Pirates\"\n  placeholder=\"Your choices\"\n  hint-text=\"Select single option\"\n  options-variant=\"icon\"\n>\n</fw-select>\n\n<script type=\"application/javascript\">\n  var multiSelect = document.getElementById('multiSelect');\n  multiSelect.value = ['2', '3'];\n\n  var methodSelect = document.getElementById('methodSelect');\n  methodSelect.setSelectedValues(['1', '5']);\n\n  var iconDataSource = [\n    {\n      value: '1',\n      text: 'Luffy',\n      subText: 'Pirate King',\n      graphicsProps: { name: 'verified' },\n    },\n    {\n      value: '2',\n      text: 'Zorro',\n      subText: 'Best Swordsman',\n      graphicsProps: { name: 'magic-wand' },\n    },\n    {\n      value: '3',\n      text: 'Sanji',\n      subText: 'Best Chef',\n      graphicsProps: { name: 'ecommerce' },\n    },\n  ];\n  var methodOptionSelect = document.getElementById('methodOptionSelect');\n  methodOptionSelect.options = iconDataSource;\n  methodOptionSelect.setSelectedOptions([\n    {\n      value: '2',\n      text: 'Zorro',\n      subText: 'Best Swordsman',\n      graphicsProps: { name: 'magic-wand' },\n    },\n  ]);\n  methodOptionSelect.addEventListener('fwChange', (e) => {\n    console.log(e.detail);\n  });\n</script>\n```\n\n### Usage for setting/getting selected options\n\n<code-group>\n<code-block title=\"HTML\">\n\n```html\n<fw-select\n  label=\"Pick one character\"\n  placeholder=\"Your choices\"\n  hint-text=\"Select Single options\"\n  value=\"5\"\n>\n  <fw-select-option value=\"1\">Starks</fw-select-option>\n  <fw-select-option value=\"2\">Lannisters</fw-select-option>\n  <fw-select-option value=\"3\">Sand</fw-select-option>\n  <fw-select-option value=\"4\">Greyjoys</fw-select-option>\n  <fw-select-option value=\"5\">Tyrell</fw-select-option>\n</fw-select>\n\n<fw-select\n  label=\"Pick favorite characters\"\n  placeholder=\"Your choices\"\n  hint-text=\"Select multiple options\"\n  id=\"multiSelect\"\n  multiple\n>\n  <fw-select-option value=\"1\">Starks</fw-select-option>\n  <fw-select-option value=\"2\">Lannisters</fw-select-option>\n  <fw-select-option value=\"3\">Sand</fw-select-option>\n  <fw-select-option value=\"4\">Greyjoys</fw-select-option>\n  <fw-select-option value=\"5\">Tyrell</fw-select-option>\n</fw-select>\n\n<fw-select\n  label=\"Names\"\n  placeholder=\"Your choices\"\n  hint-text=\"Select multiple options\"\n  id=\"methodSelect\"\n  multiple\n>\n  <fw-select-option value=\"1\">Starks</fw-select-option>\n  <fw-select-option value=\"2\">Lannisters</fw-select-option>\n  <fw-select-option value=\"3\">Sand</fw-select-option>\n  <fw-select-option value=\"4\">Greyjoys</fw-select-option>\n  <fw-select-option value=\"5\">Tyrell</fw-select-option>\n</fw-select>\n\n<fw-select\n  id=\"methodOptionSelect\"\n  label=\"Strawhat Pirates\"\n  placeholder=\"Your choices\"\n  hint-text=\"Select single option\"\n  options-variant=\"icon\"\n>\n</fw-select>\n\n<script type=\"application/javascript\">\n  var multiSelect = document.getElementById('multiSelect');\n  multiSelect.value = ['2', '3'];\n\n  var methodSelect = document.getElementById('methodSelect');\n  methodSelect.setSelectedValues(['1', '5']);\n\n  var iconDataSource = [\n    {\n      value: '1',\n      text: 'Luffy',\n      subText: 'Pirate King',\n      graphicsProps: { name: 'verified' },\n    },\n    {\n      value: '2',\n      text: 'Zorro',\n      subText: 'Best Swordsman',\n      graphicsProps: { name: 'magic-wand' },\n    },\n    {\n      value: '3',\n      text: 'Sanji',\n      subText: 'Best Chef',\n      graphicsProps: { name: 'ecommerce' },\n    },\n  ];\n  var methodOptionSelect = document.getElementById('methodOptionSelect');\n  methodOptionSelect.options = iconDataSource;\n  methodOptionSelect.setSelectedOptions([\n    {\n      value: '2',\n      text: 'Zorro',\n      subText: 'Best Swordsman',\n      graphicsProps: { name: 'magic-wand' },\n    },\n  ]);\n  methodOptionSelect.addEventListener('fwChange', (e) => {\n    console.log(e.detail);\n  });\n</script>\n```\n\n</code-block>\n\n<code-block title=\"React\">\n\n```jsx\nimport React, { useEffect, useRef } from 'react';\nimport { FwSelect, FwSelectOption } from '@freshworks/crayons/react';\n\nfunction App() {\n  const methodSelect = useRef();\n\n  const iconDataSource = [\n    {\n      value: '1',\n      text: 'Luffy',\n      subText: 'Pirate King',\n      graphicsProps: { name: 'verified' },\n    },\n    {\n      value: '2',\n      text: 'Zorro',\n      subText: 'Best Swordsman',\n      graphicsProps: { name: 'magic-wand' },\n    },\n    {\n      value: '3',\n      text: 'Sanji',\n      subText: 'Best Chef',\n      graphicsProps: { name: 'ecommerce' },\n    },\n  ];\n\n  const onSelectChange = (e) => {\n    console.log(e.detail);\n  };\n\n  useEffect(() => {\n    methodSelect.current.setSelectedValues(['1', '5']);\n  }, []);\n\n  return (\n    <div>\n      <FwSelect\n        label='Pick one character'\n        placeholder='Your choices'\n        hintText='Select Single options'\n        value='5'\n      >\n        <FwSelectOption value='1'>Starks</FwSelectOption>\n        <FwSelectOption value='2'>Lannisters</FwSelectOption>\n        <FwSelectOption value='3'>Sand</FwSelectOption>\n        <FwSelectOption value='4'>Greyjoys</FwSelectOption>\n        <FwSelectOption value='5'>Tyrell</FwSelectOption>\n      </FwSelect>\n\n      <FwSelect\n        label='Pick favorite characters'\n        placeholder='Your choices'\n        hintText='Select multiple options'\n        id='multiSelect'\n        multiple\n        value={['2', '3']}\n      >\n        <FwSelectOption value='1'>Starks </FwSelectOption>\n        <FwSelectOption value='2'>Lannisters </FwSelectOption>\n        <FwSelectOption value='3'>Sand </FwSelectOption>\n        <FwSelectOption value='4'>Greyjoys </FwSelectOption>\n        <FwSelectOption value='5'>Tyrell </FwSelectOption>\n      </FwSelect>\n\n      <FwSelect\n        label='Names'\n        placeholder='Your choices'\n        hintText='Select multiple options'\n        id='methodSelect'\n        ref={methodSelect}\n        multiple\n      >\n        <FwSelectOption value='1'>Starks</FwSelectOption>\n        <FwSelectOption value='2'>Lannisters</FwSelectOption>\n        <FwSelectOption value='3'>Sand</FwSelectOption>\n        <FwSelectOption value='4'>Greyjoys</FwSelectOption>\n        <FwSelectOption value='5'>Tyrell</FwSelectOption>\n      </FwSelect>\n\n      <FwSelect\n        id='methodOptionSelect'\n        onFwChange={onSelectChange}\n        label='Strawhat Pirates'\n        placeholder='Your choices'\n        hintText='Select single option'\n        options={iconDataSource}\n        optionsVariant='icon'\n      ></FwSelect>\n    </div>\n  );\n}\nexport default App;\n```\n\n</code-block>\n</code-group>\n\n### Demo with dynamic filter option\n\n```html live\n<fw-select\n  id=\"dynamicSelect\"\n  label=\"Rick & Morty Characters\"\n  no-data-text=\"Type to search..\"\n  not-found-text=\"Not available in this universe\"\n  placeholder=\"Your choices\"\n  hint-text=\"Select multiple options\"\n  options-variant=\"avatar\"\n  tag-variant=\"avatar\"\n  multiple\n>\n</fw-select>\n\n<script type=\"application/javascript\">\n  var dynamicSelect = document.getElementById('dynamicSelect');\n  baseURL = 'https://api.sampleapis.com/rickandmorty/characters';\n  dynamicSelect.selectedOptions = [\n    {\n      text: 'Rick Sanchez',\n      subText: 'Human',\n      value: '1',\n      graphicsProps: {\n        image: 'https://rickandmortyapi.com/api/character/avatar/1.jpeg',\n      },\n    },\n  ];\n  dynamicSelect.search = (value, source) => {\n    // Sample function to mimic the dynamic filter over network\n    return fetch(baseURL)\n      .then((resp) => resp.json())\n      .then((data) => {\n        const result = data.filter((x) =>\n          x.name.toLowerCase().includes(value.toLowerCase())\n        );\n        return result.map((x) => {\n          return {\n            text: x.name,\n            subText: x.type,\n            value: x.id.toString(),\n            graphicsProps: { image: x.image },\n          };\n        });\n      });\n  };\n</script>\n```\n\n### Usage of dynamic filter option\n\n<code-group>\n<code-block title=\"HTML\">\n\n```html\n<fw-select\n  id=\"dynamicSelect\"\n  label=\"Rick & Morty Characters\"\n  no-data-text=\"Type to search..\"\n  not-found-text=\"Not available in this universe\"\n  placeholder=\"Your choices\"\n  hint-text=\"Select multiple options\"\n  options-variant=\"avatar\"\n  tag-variant=\"avatar\"\n  multiple\n>\n</fw-select>\n\n<script type=\"application/javascript\">\n  var dynamicSelect = document.getElementById('dynamicSelect');\n  baseURL = 'https://api.sampleapis.com/rickandmorty/characters';\n  dynamicSelect.selectedOptions = [\n    {\n      text: 'Rick Sanchez',\n      subText: 'Human',\n      value: '1',\n      graphicsProps: {\n        image: 'https://rickandmortyapi.com/api/character/avatar/1.jpeg',\n      },\n    },\n  ];\n  dynamicSelect.search = (value, source) => {\n    // Sample function to mimic the dynamic filter over network\n    return fetch(baseURL)\n      .then((resp) => resp.json())\n      .then((data) => {\n        const result = data.filter((x) =>\n          x.name.toLowerCase().includes(value.toLowerCase())\n        );\n        return result.map((x) => {\n          return {\n            text: x.name,\n            subText: x.type,\n            value: x.id.toString(),\n            graphicsProps: { image: x.image },\n          };\n        });\n      });\n  };\n</script>\n```\n\n</code-block>\n<code-block title=\"React\">\n\n```jsx\nfunction Select() {\n  var baseURL = 'https://api.sampleapis.com/rickandmorty/characters';\n  const searchFn = (value, source) => {\n    // Sample function to mimic the dynamic filter over network\n    return fetch(baseURL)\n      .then((resp) => resp.json())\n      .then((data) => {\n        const result = data.filter((x) =>\n          x.name.toLowerCase().includes(value.toLowerCase())\n        );\n        return result.map((x) => {\n          return {\n            text: x.name,\n            subText: x.type,\n            value: x.id.toString(),\n            graphicsProps: { image: x.image },\n          };\n        });\n      });\n  };\n  return (\n    <FwSelect\n      id='dynamicSelect'\n      label={'Rick & Morty Characters'}\n      noDataText='Type to search..'\n      notFoundText='Not available in this universe'\n      placeholder='Your choices'\n      hintText='Select multiple options'\n      optionsVariant='avatar'\n      tagVariant='avatar'\n      search={searchFn}\n      multiple\n      selectedOptions={[\n        {\n          text: 'Rick Sanchez',\n          subText: 'Human',\n          value: '1',\n          graphicsProps: {\n            image: 'https://rickandmortyapi.com/api/character/avatar/1.jpeg',\n          },\n        },\n      ]}\n    ></FwSelect>\n  );\n}\nexport default Select;\n```\n\n</code-block>\n</code-group>\n\n### Demo with select variants\n\n```html live\n<fw-label value=\"Mail Variant\" color=\"blue\"></fw-label>\n<fw-select\n  id=\"mailVariant\"\n  variant=\"mail\"\n  label=\"Mail to\"\n  placeholder=\"Recipients\"\n  options-variant=\"avatar\"\n  tag-variant=\"avatar\"\n>\n</fw-select>\n\n<script type=\"application/javascript\">\n  var mailVariant = document.getElementById('mailVariant');\n  baseURL = 'https://api.sampleapis.com/rickandmorty/characters';\n  mailVariant.search = (value, source) => {\n    // Sample function to mimic the dynamic filter over network\n    return fetch(baseURL)\n      .then((resp) => resp.json())\n      .then((data) => {\n        const result = data.filter((x) =>\n          x.name.toLowerCase().includes(value.toLowerCase())\n        );\n        return result.map((x) => {\n          return {\n            text: x.name,\n            subText: x.type,\n            value: x.name,\n            graphicsProps: { image: x.image },\n          };\n        });\n      });\n  };\n</script>\n```\n\n### Usage for select variants\n\n<code-group>\n<code-block title=\"HTML\">\n\n```html\n<fw-label value=\"Mail Variant\" color=\"blue\"></fw-label>\n<fw-select\n  id=\"mailVariant\"\n  variant=\"mail\"\n  label=\"Mail to\"\n  placeholder=\"Recipients\"\n  options-variant=\"avatar\"\n  tag-variant=\"avatar\"\n>\n</fw-select>\n\n<script type=\"application/javascript\">\n  var mailVariant = document.getElementById('mailVariant');\n  baseURL = 'https://api.sampleapis.com/rickandmorty/characters';\n  mailVariant.search = (value, source) => {\n    // Sample function to mimic the dynamic filter over network\n    return fetch(baseURL)\n      .then((resp) => resp.json())\n      .then((data) => {\n        const result = data.filter((x) =>\n          x.name.toLowerCase().includes(value.toLowerCase())\n        );\n        return result.map((x) => {\n          return {\n            text: x.name,\n            subText: x.type,\n            value: x.name,\n            graphicsProps: { image: x.image },\n          };\n        });\n      });\n  };\n</script>\n```\n\n</code-block>\n<code-block title=\"React\">\n\n```jsx\nimport React from 'react';\nimport { FwSelect } from '@freshworks/crayons/react';\n\nfunction Select() {\n  const baseURL = 'https://api.sampleapis.com/rickandmorty/characters';\n  const searchFn = (value, source) => {\n    return fetch(baseURL)\n      .then((resp) => resp.json())\n      .then((data) => {\n        const result = data.filter((x) =>\n          x.name.toLowerCase().includes(value.toLowerCase())\n        );\n        return result.map((x) => {\n          return {\n            text: x.name,\n            subText: x.type,\n            value: x.name,\n            graphicsProps: { image: x.image },\n          };\n        });\n      });\n  };\n  return (\n    <FwSelect\n      id='dynamicSelect'\n      variant='mail'\n      label='Mail to'\n      placeholder='Recipients'\n      optionsVariant='avatar'\n      tagVariant='avatar'\n      search={searchFn}\n    ></FwSelect>\n  );\n}\nexport default Select;\n```\n\n</code-block>\n</code-group>\n\n### Demo with creatable select\n\n```html live\n<fw-label value=\"Creatable Mail Variant\" color=\"blue\"></fw-label>\n<fw-select\n  id=\"creatableVariant\"\n  variant=\"mail\"\n  label=\"Mail to\"\n  placeholder=\"Recipients\"\n  options-variant=\"avatar\"\n  tag-variant=\"avatar\"\n>\n</fw-select>\n\n<script type=\"application/javascript\">\n  var creatableVariant = document.getElementById('creatableVariant');\n  const options = [\n    {\n      text: 'Angela Smith',\n      subText: 'angela.smith@gmail.com',\n      value: 'angela.smith@gmail.com',\n      graphicsProps: {\n        image:\n          'https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n      },\n    },\n    {\n      text: 'Freshdesk support from India and Berlin',\n      subText: 'support.india@freshdesk.com',\n      value: 'support.india@freshdesk.com',\n      graphicsProps: {\n        image:\n          'https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n      },\n    },\n    {\n      text: 'Angela from Freshdesk',\n      subText: 'angela@freshdesk.in',\n      value: 'angela@freshdesk.in',\n      graphicsProps: {\n        image:\n          'https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n      },\n    },\n  ];\n  const validateEmail = (email) =>\n    String(email)\n      .toLowerCase()\n      .match(\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n      );\n  creatableVariant.creatableProps = {\n    isCreatable: true,\n    formatCreateLabel: (label) => `Add \"${label}\" as a recipient`,\n    validateNewOption: (email) => validateEmail(email),\n  };\n  creatableVariant.search = (filterText, source) => {\n    // Sample function to mimic the dynamic filter\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(\n          options.filter(\n            (option) =>\n              option.text.toLowerCase().includes(filterText.toLowerCase()) ||\n              option.subText.toLowerCase().includes(filterText.toLowerCase())\n          )\n        );\n      }, 1000);\n    });\n  };\n</script>\n```\n\n### Usage for select variants\n\n<code-group>\n<code-block title=\"HTML\">\n\n```html\n<fw-label value=\"Creatable Mail Variant\" color=\"blue\"></fw-label>\n<fw-select\n  id=\"creatableVariant\"\n  variant=\"mail\"\n  label=\"Mail to\"\n  placeholder=\"Recipients\"\n  options-variant=\"avatar\"\n  tag-variant=\"avatar\"\n>\n</fw-select>\n\n<script type=\"application/javascript\">\n  var creatableVariant = document.getElementById('creatableVariant');\n  const options = [\n    {\n      text: 'Angela Smith',\n      subText: 'angela.smith@gmail.com',\n      value: 'angela.smith@gmail.com',\n      graphicsProps: {\n        image:\n          'https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n      },\n    },\n    {\n      text: 'Freshdesk support from India and Berlin',\n      subText: 'support.india@freshdesk.com',\n      value: 'support.india@freshdesk.com',\n      graphicsProps: {\n        image:\n          'https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n      },\n    },\n    {\n      text: 'Angela from Freshdesk',\n      subText: 'angela@freshdesk.in',\n      value: 'angela@freshdesk.in',\n      graphicsProps: {\n        image:\n          'https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n      },\n    },\n  ];\n  const validateEmail = (email) =>\n    String(email)\n      .toLowerCase()\n      .match(\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n      );\n  creatableVariant.creatableProps = {\n    isCreatable: true,\n    formatCreateLabel: (label) => `Add \"${label}\" as a recipient`,\n    validateNewOption: (email) => validateEmail(email),\n  };\n  creatableVariant.search = (filterText, source) => {\n    // Sample function to mimic the dynamic filter\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(\n          options.filter(\n            (option) =>\n              option.text.toLowerCase().includes(filterText.toLowerCase()) ||\n              option.subText.toLowerCase().includes(filterText.toLowerCase())\n          )\n        );\n      }, 1000);\n    });\n  };\n</script>\n```\n\n</code-block>\n<code-block title=\"React\">\n\n```jsx\nimport React from 'react';\nimport { FwSelect } from '@freshworks/crayons/react';\n\nfunction Select() {\n  const options = [\n    {\n      text: 'Angela Smith',\n      subText: 'angela.smith@gmail.com',\n      value: 'angela.smith@gmail.com',\n      graphicsProps: {\n        image:\n          'https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n      },\n    },\n    {\n      text: 'Freshdesk support from India and Berlin',\n      subText: 'support.india@freshdesk.com',\n      value: 'support.india@freshdesk.com',\n      graphicsProps: {\n        image:\n          'https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n      },\n    },\n    {\n      text: 'Angela from Freshdesk',\n      subText: 'angela@freshdesk.in',\n      value: 'angela@freshdesk.in',\n      graphicsProps: {\n        image:\n          'https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n      },\n    },\n  ];\n  const searchFn = (filterText, source) => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(\n          options.filter(\n            (option) =>\n              option.text.toLowerCase().includes(filterText.toLowerCase()) ||\n              option.subText.toLowerCase().includes(filterText.toLowerCase())\n          )\n        );\n      }, 1000);\n    });\n  };\n  const validateEmail = (email) =>\n    String(email)\n      .toLowerCase()\n      .match(\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n      );\n  return (\n    <FwSelect\n      id='creatableVariant'\n      variant='mail'\n      label='Mail to'\n      placeholder='Recipients'\n      optionsVariant='avatar'\n      tagVariant='avatar'\n      search={searchFn}\n      creatableProps={{\n        isCreatable: true,\n        formatCreateLabel: (label) => `Add \"${label}\" as a recipient`,\n        validateNewOption: (email) => validateEmail(email),\n      }}\n    ></FwSelect>\n  );\n}\nexport default Select;\n```\n\n</code-block>\n</code-group>\n\n### Navigation Demo with large option\n\n```html live\n<fw-select\n  label=\"Pick one year\"\n  placeholder=\"Your choices\"\n  id=\"longSelect\"\n></fw-select>\n<fw-select\n  label=\"Pick Multiple years\"\n  placeholder=\"Your choices\"\n  id=\"longSelectMulti\"\n  multiple\n></fw-select>\n<script type=\"application/javascript\">\n  var yearsData = Array.from({ length: 101 }, (_, i) => i + 1980).map((x) => {\n    return { value: x.toString(), text: x.toString() };\n  });\n\n  var longSelect = document.getElementById('longSelect');\n  longSelect.options = yearsData;\n  longSelect.value = '2021';\n\n  var longSelectMulti = document.getElementById('longSelectMulti');\n  longSelectMulti.options = yearsData;\n</script>\n```\n\n### Demo with option-label-path and option-value-path\n\n```html live\n<fw-label value=\"With predefined options\" color=\"blue\"></fw-label>\n<fw-select\n  id=\"predefinedOptionsSelect\"\n  label=\"Strawhat Pirates\"\n  placeholder=\"Your choices\"\n  hint-text=\"Select single option\"\n  options-variant=\"icon\"\n  option-label-path=\"name\"\n  option-value-path=\"id\"\n>\n</fw-select>\n\n<fw-label value=\"With search\" color=\"blue\"></fw-label>\n<fw-select\n  id=\"searchVariant\"\n  label=\"Rick & Morty Characters\"\n  no-data-text=\"Type to search..\"\n  not-found-text=\"Not available in this universe\"\n  placeholder=\"Your choices\"\n  hint-text=\"Select multiple options\"\n  options-variant=\"avatar\"\n  tag-variant=\"avatar\"\n  multiple\n  option-label-path=\"label\"\n  option-value-path=\"id\"\n>\n</fw-select>\n\n<script type=\"application/javascript\">\n  var iconDataSource = [\n    {\n      id: '1',\n      name: 'Luffy',\n      subText: 'Pirate King',\n      graphicsProps: { name: 'verified' },\n    },\n    {\n      id: '2',\n      name: 'Zorro',\n      subText: 'Best Swordsman',\n      graphicsProps: { name: 'magic-wand' },\n    },\n    {\n      id: '3',\n      name: 'Sanji',\n      subText: 'Best Chef',\n      graphicsProps: { name: 'ecommerce' },\n    },\n  ];\n  var predefinedOptionsSelect = document.getElementById('predefinedOptionsSelect');\n  predefinedOptionsSelect.options = iconDataSource;\n  predefinedOptionsSelect.setSelectedOptions([\n    {\n      id: '2',\n      name: 'Zorro',\n      subText: 'Best Swordsman',\n      graphicsProps: { name: 'magic-wand' },\n    },\n  ]);\n  predefinedOptionsSelect.addEventListener('fwChange', (e) => {\n    console.log(e.detail);\n  });\n\n  var searchVariant = document.getElementById('searchVariant');\n  baseURL = 'https://api.sampleapis.com/rickandmorty/characters';\n  searchVariant.selectedOptions = [\n    {\n      label: 'Rick Sanchez',\n      subText: 'Human',\n      id: '1',\n      graphicsProps: {\n        image: 'https://rickandmortyapi.com/api/character/avatar/1.jpeg',\n      },\n    },\n  ];\n  searchVariant.search = (value, source) => {\n    // Sample function to mimic the dynamic filter over network\n    return fetch(baseURL)\n      .then((resp) => resp.json())\n      .then((data) => {\n        const result = data.filter((x) =>\n          x.name.toLowerCase().includes(value.toLowerCase())\n        );\n        return result.map((x) => {\n          return {\n            label: x.name,\n            subText: x.type,\n            id: x.id.toString(),\n            graphicsProps: { image: x.image },\n          };\n        });\n      });\n  };\n</script>\n```\n\n### Usage for option-label-path and option-value-path\n\n<code-group>\n<code-block title=\"HTML\">\n\n```html\n<fw-label value=\"With predefined options\" color=\"blue\"></fw-label>\n<fw-select\n  id=\"predefinedOptionsSelect\"\n  label=\"Strawhat Pirates\"\n  placeholder=\"Your choices\"\n  hint-text=\"Select single option\"\n  options-variant=\"icon\"\n  option-label-path=\"name\"\n  option-value-path=\"id\"\n>\n</fw-select>\n\n<fw-label value=\"With search\" color=\"blue\"></fw-label>\n<fw-select\n  id=\"searchVariant\"\n  label=\"Rick & Morty Characters\"\n  no-data-text=\"Type to search..\"\n  not-found-text=\"Not available in this universe\"\n  placeholder=\"Your choices\"\n  hint-text=\"Select multiple options\"\n  options-variant=\"avatar\"\n  tag-variant=\"avatar\"\n  multiple\n  option-label-path=\"label\"\n  option-value-path=\"id\"\n>\n</fw-select>\n\n<script type=\"application/javascript\">\n  var iconDataSource = [\n    {\n      id: '1',\n      name: 'Luffy',\n      subText: 'Pirate King',\n      graphicsProps: { name: 'verified' },\n    },\n    {\n      id: '2',\n      name: 'Zorro',\n      subText: 'Best Swordsman',\n      graphicsProps: { name: 'magic-wand' },\n    },\n    {\n      id: '3',\n      name: 'Sanji',\n      subText: 'Best Chef',\n      graphicsProps: { name: 'ecommerce' },\n    },\n  ];\n  var predefinedOptionsSelect = document.getElementById('predefinedOptionsSelect');\n  predefinedOptionsSelect.options = iconDataSource;\n  predefinedOptionsSelect.setSelectedOptions([\n    {\n      id: '2',\n      name: 'Zorro',\n      subText: 'Best Swordsman',\n      graphicsProps: { name: 'magic-wand' },\n    },\n  ]);\n  predefinedOptionsSelect.addEventListener('fwChange', (e) => {\n    console.log(e.detail);\n  });\n\n  var searchVariant = document.getElementById('searchVariant');\n  baseURL = 'https://api.sampleapis.com/rickandmorty/characters';\n  searchVariant.selectedOptions = [\n    {\n      label: 'Rick Sanchez',\n      subText: 'Human',\n      id: '1',\n      graphicsProps: {\n        image: 'https://rickandmortyapi.com/api/character/avatar/1.jpeg',\n      },\n    },\n  ];\n  searchVariant.search = (value, source) => {\n    // Sample function to mimic the dynamic filter over network\n    return fetch(baseURL)\n      .then((resp) => resp.json())\n      .then((data) => {\n        const result = data.filter((x) =>\n          x.name.toLowerCase().includes(value.toLowerCase())\n        );\n        return result.map((x) => {\n          return {\n            label: x.name,\n            subText: x.type,\n            id: x.id.toString(),\n            graphicsProps: { image: x.image },\n          };\n        });\n      });\n  };\n</script>\n```\n\n</code-block>\n</code-group>\n\n## Styling\n\nRefer the css variables in fw-popover to control the height and width of the select popup.\nRefer the [css variables](#css-custom-properties) for modifying the appearance of the the fw-select.\n",
      "docs": "fw-select displays a list or drop-down box that enables selection of an option or multiple options from an available list of values.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "allowDeselect",
          "type": "boolean",
          "mutable": false,
          "attr": "allow-deselect",
          "reflectToAttr": false,
          "docs": "Whether clicking on the already selected option disables it.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "boundary",
          "type": "HTMLElement",
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Describes the select's boundary HTMLElement",
          "docsTags": [],
          "values": [
            {
              "type": "HTMLElement"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "caret",
          "type": "boolean",
          "mutable": true,
          "attr": "caret",
          "reflectToAttr": false,
          "docs": "Whether the arrow/caret should be shown in the select.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "checkbox",
          "type": "boolean",
          "mutable": false,
          "attr": "checkbox",
          "reflectToAttr": false,
          "docs": "Place a checkbox.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "creatableProps",
          "type": "{ isCreatable: boolean; validateNewOption: (_value: any) => boolean; formatCreateLabel: (label: any) => string; }",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Props to be passed for creatable select\nisCreatable: boolean - If true, select accepts user input that are not present as options and add them as options\nvalidateNewOption: (value) => boolean - If passed, this function will determine the error state for every new option entered. If return value is true, error state of the newly created option will be false and if return value is false, then the error state of the newly created option will be true.\nformatCreateLabel: (label) => string - Gets the label for the \"create new ...\" option in the menu. Current input value is provided as argument.",
          "docsTags": [],
          "default": "{\n    isCreatable: false,\n    validateNewOption: (_value): boolean => true,\n    formatCreateLabel: (label): string => label,\n  }",
          "values": [
            {
              "type": "{ isCreatable: boolean; validateNewOption: (_value: any) => boolean; formatCreateLabel: (label: any) => string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "debounceTimer",
          "type": "number",
          "mutable": false,
          "attr": "debounce-timer",
          "reflectToAttr": false,
          "docs": "Debounce timer for the search promise function.",
          "docsTags": [],
          "default": "300",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "errorText",
          "type": "string",
          "mutable": false,
          "attr": "error-text",
          "reflectToAttr": false,
          "docs": "Error text displayed below the text box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "forceSelect",
          "type": "boolean",
          "mutable": false,
          "attr": "force-select",
          "reflectToAttr": false,
          "docs": "If true, the user must select a value. The default value is not displayed.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hintText",
          "type": "string",
          "mutable": false,
          "attr": "hint-text",
          "reflectToAttr": false,
          "docs": "Hint text displayed below the text box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hoist",
          "type": "boolean",
          "mutable": false,
          "attr": "hoist",
          "reflectToAttr": false,
          "docs": "Option to prevent the select options from being clipped when the component is placed inside a container with\n`overflow: auto|hidden|scroll`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label displayed on the interface, for the component.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelledBy",
          "type": "string",
          "mutable": false,
          "attr": "labelled-by",
          "reflectToAttr": false,
          "docs": "If the default label prop is not used, then use this prop to pass the id of the label.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "Works with `multiple` enabled. Configures the maximum number of options that can be selected with a multi-select component.",
          "docsTags": [],
          "default": "Number.MAX_VALUE",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "mutable": true,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "Enables selection of multiple options. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "noDataText",
          "type": "string",
          "mutable": true,
          "attr": "no-data-text",
          "reflectToAttr": false,
          "docs": "Text to be displayed when there is no data available in the select.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "notFoundText",
          "type": "string",
          "mutable": true,
          "attr": "not-found-text",
          "reflectToAttr": false,
          "docs": "Default option to be shown if the option doesn't match the filterText.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionLabelPath",
          "type": "string",
          "mutable": false,
          "attr": "option-label-path",
          "reflectToAttr": false,
          "docs": "Key for determining the label for a given option",
          "docsTags": [],
          "default": "'text'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionValuePath",
          "type": "string",
          "mutable": false,
          "attr": "option-value-path",
          "reflectToAttr": false,
          "docs": "Key for determining the value for a given option",
          "docsTags": [],
          "default": "'value'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "options",
          "type": "any",
          "mutable": false,
          "attr": "options",
          "reflectToAttr": false,
          "docs": "The data for the select component, the options will be of type array of fw-select-options.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionsPlacement",
          "type": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "mutable": false,
          "attr": "options-placement",
          "reflectToAttr": false,
          "docs": "Placement of the options list with respect to select.",
          "docsTags": [],
          "default": "'bottom'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionsVariant",
          "type": "\"avatar\" | \"icon\" | \"standard\"",
          "mutable": false,
          "attr": "options-variant",
          "reflectToAttr": false,
          "docs": "Standard is the default option without any graphics other options are icon and avatar which places either the icon or avatar at the beginning of the row.\nThe props for the icon or avatar are passed as an object via the graphicsProps.",
          "docsTags": [],
          "default": "'standard'",
          "values": [
            {
              "value": "avatar",
              "type": "string"
            },
            {
              "value": "icon",
              "type": "string"
            },
            {
              "value": "standard",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Text displayed in the list box before an option is selected.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If true, the user cannot modify the default value selected. If the attribute's value is undefined, the value is set to true.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Specifies the select field as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sameWidth",
          "type": "boolean",
          "mutable": false,
          "attr": "same-width",
          "reflectToAttr": false,
          "docs": "Whether the select width to be same as that of the options.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "search",
          "type": "any",
          "mutable": false,
          "attr": "search",
          "reflectToAttr": false,
          "docs": "Filter function which takes in filterText and dataSource and return a Promise.\nWhere filter text is the text to filter the value in dataSource array.\nThe returned promise should contain the array of options to be displayed.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "searchable",
          "type": "boolean",
          "mutable": false,
          "attr": "searchable",
          "reflectToAttr": false,
          "docs": "Allow to search for value. Default is true.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedOptions",
          "type": "any[]",
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Array of the options that is displayed as the default selection, in the list box. Must be a valid option corresponding to the fw-select-option components used in Select.",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "\"error\" | \"normal\" | \"warning\"",
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "Theme based on which the list box is styled.",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "normal",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tagVariant",
          "type": "\"avatar\" | \"standard\"",
          "mutable": false,
          "attr": "tag-variant",
          "reflectToAttr": false,
          "docs": "The variant of tag to be used.",
          "docsTags": [],
          "default": "'standard'",
          "values": [
            {
              "value": "avatar",
              "type": "string"
            },
            {
              "value": "standard",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"number\" | \"text\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Type of option accepted as the input value. If a user tries to enter an option other than the specified type, the list is not populated.",
          "docsTags": [],
          "default": "'text'",
          "values": [
            {
              "value": "number",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Value of the option that is displayed as the default selection, in the list box. Must be a valid value corresponding to the fw-select-option components used in Select.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"button\" | \"mail\" | \"standard\"",
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "The UI variant of the select to be used.",
          "docsTags": [],
          "default": "'standard'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "mail",
              "type": "string"
            },
            {
              "value": "standard",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "warningText",
          "type": "string",
          "mutable": false,
          "attr": "warning-text",
          "reflectToAttr": false,
          "docs": "Warning text displayed below the text box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getSelectedItem",
          "returns": {
            "type": "Promise<any>",
            "docs": ""
          },
          "signature": "getSelectedItem() => Promise<any>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<any>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<any>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setSelectedOptions",
          "returns": {
            "type": "Promise<any>",
            "docs": ""
          },
          "signature": "setSelectedOptions(options: any[]) => Promise<any>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setSelectedValues",
          "returns": {
            "type": "Promise<any>",
            "docs": ""
          },
          "signature": "setSelectedValues(values: string | string[]) => Promise<any>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "fwBlur",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the list box loses focus.",
          "docsTags": []
        },
        {
          "event": "fwChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when a value is selected or deselected from the list box options.",
          "docsTags": []
        },
        {
          "event": "fwFocus",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the list box comes into focus.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "fwHide",
          "capture": false,
          "passive": false
        },
        {
          "event": "fwShow",
          "capture": false,
          "passive": false
        },
        {
          "event": "fwLoading",
          "capture": false,
          "passive": false
        },
        {
          "event": "fwChange",
          "capture": false,
          "passive": false
        },
        {
          "event": "fwClosed",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "fwFocus",
          "capture": false,
          "passive": false
        },
        {
          "event": "fwBlur",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--fw-error-color",
          "annotation": "prop",
          "docs": "Color of the error text."
        },
        {
          "name": "--fw-hint-color",
          "annotation": "prop",
          "docs": "Color of the hint text."
        },
        {
          "name": "--fw-select-border",
          "annotation": "prop",
          "docs": "Border of the select component"
        },
        {
          "name": "--fw-select-border-radius",
          "annotation": "prop",
          "docs": "Border radius of the select component"
        },
        {
          "name": "--fw-select-margin-bottom",
          "annotation": "prop",
          "docs": "Bottom margin of the select component"
        },
        {
          "name": "--fw-warning-color",
          "annotation": "prop",
          "docs": "Color of the warning text."
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-country-phone",
        "fw-datepicker",
        "fw-form-control",
        "fw-timepicker"
      ],
      "dependencies": [
        "fw-tag",
        "fw-popover",
        "fw-button",
        "fw-spinner",
        "fw-icon",
        "fw-list-options"
      ],
      "dependencyGraph": {
        "fw-select": [
          "fw-tag",
          "fw-popover",
          "fw-button",
          "fw-spinner",
          "fw-icon",
          "fw-list-options"
        ],
        "fw-tag": [
          "fw-tooltip",
          "fw-avatar",
          "fw-icon"
        ],
        "fw-tooltip": [
          "fw-popover"
        ],
        "fw-button": [
          "fw-spinner",
          "fw-icon"
        ],
        "fw-list-options": [
          "fw-select-option",
          "fw-input"
        ],
        "fw-select-option": [
          "fw-icon",
          "fw-checkbox",
          "fw-avatar"
        ],
        "fw-checkbox": [
          "fw-icon"
        ],
        "fw-input": [
          "fw-icon"
        ],
        "fw-country-phone": [
          "fw-select"
        ],
        "fw-datepicker": [
          "fw-select"
        ],
        "fw-form-control": [
          "fw-select"
        ],
        "fw-timepicker": [
          "fw-select"
        ]
      }
    },
    {
      "filePath": "./src/components/select-option/select-option.tsx",
      "encapsulation": "shadow",
      "tag": "fw-select-option",
      "readme": "# Select Option (fw-select-option)\n\nfw-select-option provides child elements for fw-select, to populate the Select component’s list or drop-down box with values. If fw-select-option is used without the value attribute, when the form data is saved, the value of fw-select is the selected option’s text.\n\n## Demo\n\n```html live\n<fw-select-option selected=\"true\">I am the chosen one</fw-select-option>\n<fw-select-option html html-content=\"<b>Me, nein</b>\"></fw-select-option>\n<fw-select-option>I am another option</fw-select-option>\n```\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html \n<fw-select-option selected=\"true\">I am the chosen one</fw-select-option>\n<fw-select-option html html-content=\"<b>Me, nein</b>\"></fw-select-option>\n<fw-select-option>I am another option</fw-select-option>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwSelectOption } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n        <FwSelectOption selected>I am the chosen one</FwSelectOption>\n        <FwSelectOption html htmlContent=\"<b>Me, nein</b>\"></FwSelectOption>\n        <FwSelectOption>I am another option</FwSelectOption>\n    </div>);\n}\n```\n</code-block>\n</code-group>\n\n#### Demo - Variants\n\n```html live\n<fw-select-option text=\"Standard Variant\"></fw-select-option>\n<fw-select-option\n  text=\"Standard Variant\"\n  sub-text=\"This is multiline element\"\n></fw-select-option>\n<fw-select-option\n  checkbox\n  text=\"Checkbox Variant\"\n  sub-text=\"This is multiline checkbox element\"\n></fw-select-option>\n<fw-select-option\n  checkbox\n  hide-tick\n  text=\"Checkbox Variant Without Tick Mark\"\n  sub-text=\"This is multiline checkbox element\"\n></fw-select-option>\n```\n\n#### Usage - Variants\n\n<code-group>\n<code-block title=\"HTML\">\n```html \n<fw-select-option text=\"Standard Variant\"></fw-select-option>\n<fw-select-option\n  text=\"Standard Variant\"\n  sub-text=\"This is multiline element\"\n></fw-select-option>\n<fw-select-option\n  checkbox\n  text=\"Checkbox Variant\"\n  sub-text=\"This is multiline checkbox element\"\n></fw-select-option>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwSelectOption } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n        <FwSelectOption text=\"Standard Variant\"></FwSelectOption>\n        <FwSelectOption\n          text=\"Standard Variant\"\n          subText=\"This is multiline element\"\n        ></FwSelectOption>\n        <FwSelectOption\n          checkbox\n          text=\"Checkbox Variant\"\n          subText=\"This is multiline checkbox element\"\n        ></FwSelectOption>\n    </div>);\n}\n```\n</code-block>\n</code-group>\n",
      "docs": "fw-select-option provides child elements for fw-select, to populate the Select component’s list or drop-down box with values. If fw-select-option is used without the value attribute, when the form data is saved, the value of fw-select is the selected option’s text.",
      "docsTags": [
        {
          "name": "parent",
          "text": "select"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "allowDeselect",
          "type": "boolean",
          "mutable": false,
          "attr": "allow-deselect",
          "reflectToAttr": false,
          "docs": "Whether clicking on the already selected option disables it.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "allowSelect",
          "type": "boolean",
          "mutable": false,
          "attr": "allow-select",
          "reflectToAttr": false,
          "docs": "Whether clicking on option selects it.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "checkbox",
          "type": "boolean",
          "mutable": false,
          "attr": "checkbox",
          "reflectToAttr": false,
          "docs": "Place a checkbox.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Sets the state of the option to disabled. The selected option is disabled and greyed out. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "graphicsProps",
          "type": "any",
          "mutable": false,
          "attr": "graphics-props",
          "reflectToAttr": false,
          "docs": "The props for the graphics variant. ex., icon props in case of graphicsType = 'icon'",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "groupName",
          "type": "string",
          "mutable": false,
          "attr": "group-name",
          "reflectToAttr": false,
          "docs": "Used in grouped list, provides the group in which the option belongs",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideTick",
          "type": "boolean",
          "mutable": false,
          "attr": "hide-tick",
          "reflectToAttr": false,
          "docs": "Hide tick mark icon",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "html",
          "type": "boolean",
          "mutable": true,
          "attr": "html",
          "reflectToAttr": true,
          "docs": "States that the option is an HTML value. If the attribute's value is undefined, the value is set to true.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "htmlContent",
          "type": "string",
          "mutable": false,
          "attr": "html-content",
          "reflectToAttr": false,
          "docs": "HTML content that is displayed as the option.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "optionText",
          "type": "string",
          "mutable": false,
          "attr": "option-text",
          "reflectToAttr": true,
          "docs": "Alternate text displayed on the interface, in place of the actual HTML content.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "Sets the state of the option to selected. The selected option is highlighted and a check mark is displayed next to it. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "subText",
          "type": "string",
          "mutable": false,
          "attr": "sub-text",
          "reflectToAttr": true,
          "docs": "Second line text can be description etc.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "The text to be displayed in the option.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Value corresponding to the option, that is saved  when the form data is saved.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"avatar\" | \"icon\" | \"standard\"",
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "Standard is the default option without any graphics other options are icon and avatar which places either the icon or avatar at the beginning of the row.\nThe props for the icon or avatar are passed as an object via the graphicsProps.",
          "docsTags": [],
          "default": "'standard'",
          "values": [
            {
              "value": "avatar",
              "type": "string"
            },
            {
              "value": "icon",
              "type": "string"
            },
            {
              "value": "standard",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<any>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<any>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "fwBlur",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when an option loses focus.",
          "docsTags": []
        },
        {
          "event": "fwFocus",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when an option is focused.",
          "docsTags": []
        },
        {
          "event": "fwSelectAttempted",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when an option is clicked when allowSelect is false.",
          "docsTags": []
        },
        {
          "event": "fwSelected",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when an option is selected.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-country-phone",
        "fw-datepicker",
        "fw-list-options",
        "fw-timepicker"
      ],
      "dependencies": [
        "fw-icon",
        "fw-checkbox",
        "fw-avatar"
      ],
      "dependencyGraph": {
        "fw-select-option": [
          "fw-icon",
          "fw-checkbox",
          "fw-avatar"
        ],
        "fw-checkbox": [
          "fw-icon"
        ],
        "fw-country-phone": [
          "fw-select-option"
        ],
        "fw-datepicker": [
          "fw-select-option"
        ],
        "fw-list-options": [
          "fw-select-option"
        ],
        "fw-timepicker": [
          "fw-select-option"
        ]
      }
    },
    {
      "filePath": "./src/components/skeleton/skeleton.tsx",
      "encapsulation": "shadow",
      "tag": "fw-skeleton",
      "readme": "# Skeleton (fw-skeleton)\n\nfw-skeleton provides a way to render placeholder content until the original content is available. Provides a good UX when dealing with progessive loading of contents.\n\n## Demo\n\nSkeleton with multiple variants\n\n```html live\n<label>Default text variant</label> <fw-skeleton></fw-skeleton> <br />\n<label>Circle variant</label>\n<fw-skeleton variant=\"circle\"></fw-skeleton> <br />\n<label>Rectangle variant with custom height</label>\n<fw-skeleton variant=\"rect\" height=\"200px\"></fw-skeleton> <br />\n<label>Pass count to repeat the item</label>\n<fw-skeleton variant=\"rect\" height=\"30px\" count=\"3\"></fw-skeleton> <br />\n\n<label>Pass Custom styles as props</label>\n<fw-skeleton id=\"custom-skeleton\"></fw-skeleton>\n\n<script type=\"application/javascript\">\n  const el = document.querySelector('#custom-skeleton');\n  el.customStyles = {\n    'display': 'inline-block',\n    'box-shadow': '0 2px 4px #ccc',\n    'background-color': '#1b2b34de',\n    'width': '33%',\n  };\n  el.count = 2;\n</script>\n```\n\nSkeleton with different effects\n\n```html live\n<label>Default Pulse Effect</label> <fw-skeleton></fw-skeleton> <br />\n<label>Sheen Effect</label>\n<fw-skeleton effect=\"sheen\"></fw-skeleton> <br />\n<label>No Effect</label>\n<fw-skeleton effect=\"none\"></fw-skeleton> <br />\n```\n\nSkeleton with custom properties\n\n```html live\n<label>Pass Custom Css Properties</label>\n<fw-skeleton\n  style=\"--fw-skeleton-background:red; --fw-skeleton-height:20px; --fw-skeleton-width:500px\"\n></fw-skeleton>\n<br />\n```\n\nCard Layout\n\n```html live\n<div class=\"card\">\n  <div class=\"card-header\" style=\"display: flex;align-items:center;\">\n    <fw-skeleton variant=\"circle\" height=\"64px\" width=\"64px\"></fw-skeleton>\n    <fw-skeleton style=\"  flex: 0 0 auto;width: 40%;margin-left:1em\">\n    </fw-skeleton>\n  </div>\n\n  <fw-skeleton\n    variant=\"rect\"\n    height=\"180px\"\n    custom-styles='\"margin-top\": \"10px\",\n    \"box-shadow\": \"0px 1px 2px rgba(0,0,0,0.1)\"'\n  ></fw-skeleton>\n  <fw-skeleton count=\"2\"> </fw-skeleton>\n</div>\n```\n\nMulti Para Layout\n\n```html live\n<div class=\"multi-para\">\n  <fw-skeleton> </fw-skeleton>\n  <fw-skeleton width=\"95%\"> </fw-skeleton>\n  <fw-skeleton> </fw-skeleton>\n  <fw-skeleton width=\"55%\"> </fw-skeleton>\n</div>\n```\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html\n\n<label>Default text variant</label>\n<fw-skeleton></fw-skeleton> <br/>\n<label>Circle variant</label>\n<fw-skeleton variant=\"circle\"></fw-skeleton> <br/>\n<label>Rectangle variant</label>\n<fw-skeleton variant=\"rect\"></fw-skeleton> <br/>\n<label>Pass count to repeat the item</label>\n<fw-skeleton variant=\"rect\" height=\"30px\" count=3></fw-skeleton> <br/>\n\n<label>Pass Custom styles as props</label>\n<fw-skeleton id=\"custom-skeleton\"></fw-skeleton>\n\n<script type=\"application/javascript\">\n  const el = document.querySelector('#custom-skeleton');\n     el.customStyles = {\n       display: 'inline-block',\n       'box-shadow': '0 2px 4px #ccc',\n       'background-color': '#1b2b34de',\n       'width':\"33%\"\n     };\n     el.count = 2;\n</script>\n\n````\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React, {useRef, useEffect} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwSkeleton } from \"@freshworks/crayons/react\";\nfunction App() {\n\n    const skeletonCustomRef = useRef(null);\n    const skeletonCardRef = useRef(null);\n    useEffect(() => {\n        skeletonCustomRef.current.customStyles = {\n            margin: 0,\n            \"box-shadow\": \"0px 1px 2px rgba(0,0,0,0.5)\"\n        };\n        skeletonCardRef.current.customStyles = {\n            marginTop: \"10px\",\n            boxShadow: \"0px 1px 2px rgba(0,0,0,0.1)\"\n        }\n    }, []);\n\n\n  return (<div>\n            <label>Default text variant</label>\n            <FwSkeleton></FwSkeleton> <br/>\n            <label>Circle variant</label>\n            <FwSkeleton variant=\"circle\"></FwSkeleton> <br/>\n            <label>Rectangle variant</label>\n            <FwSkeleton variant=\"rect\"></FwSkeleton> <br/>\n            <label>Pass count to repeat the item</label>\n            <FwSkeleton variant=\"rect\" height=\"30px\" count={3}></FwSkeleton> <br/>\n            <label>Sheen Effect</label>\n            <FwSkeleton effect=\"sheen\"></FwSkeleton> <br/>\n            <label>Default Pulse Effect</label>\n            <FwSkeleton></FwSkeleton> <br/>\n            <label>No Effect</label>\n            <FwSkeleton effect=\"none\"></FwSkeleton> <br/>\n\n            <label>Pass Custom styles as props</label>\n            <FwSkeleton id=\"custom-skeleton\" ref={skeletonCustomRef}></FwSkeleton>\n\n            <label>Multi Para Layout</label>\n            <div className=\"multi-para\">\n              <FwSkeleton> </FwSkeleton>\n              <FwSkeleton width=\"95%\"> </FwSkeleton>\n              <FwSkeleton> </FwSkeleton>\n              <FwSkeleton width=\"55%\"> </FwSkeleton>\n            </div>\n\n          <label>Card Layout </label>\n          <div className=\"card\">\n            <div className=\"card-header\" style={{display: \"flex\",alignItems:'center'\n            }}>\n              <FwSkeleton\n                variant=\"circle\"\n                height=\"64px\"\n                width=\"64px\"\n              ></FwSkeleton>\n              <FwSkeleton style={{flex: \"0 0 auto\",width: \"40%\",marginLeft:\"1em\"}}> </FwSkeleton>\n            </div>\n\n            <FwSkeleton\n              variant=\"rect\"\n              height=\"180px\"\n              ref={skeletonCardRef}\n            ></FwSkeleton>\n            <FwSkeleton count={2}> </FwSkeleton>\n          </div>\n\n    </div>);\n}\n````\n\n</code-block>\n</code-group>\n",
      "docs": "fw-skeleton provides a way to render placeholder content until the original content is available. Provides a good UX when dealing with progessive loading of contents.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "count",
          "type": "number",
          "mutable": false,
          "attr": "count",
          "reflectToAttr": false,
          "docs": "Number of rows of current skeleton type",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "customStyles",
          "type": "string | { [key: string]: string; }",
          "mutable": false,
          "attr": "custom-styles",
          "reflectToAttr": false,
          "docs": "Custom css styles (background/margins/width/height etc.)",
          "docsTags": [
            {
              "name": "type",
              "text": "{({[k: string]: string} | string)}"
            }
          ],
          "default": "{}",
          "values": [
            {
              "type": "string"
            },
            {
              "type": "{ [key: string]: string; }"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "effect",
          "type": "\"none\" | \"pulse\" | \"sheen\"",
          "mutable": false,
          "attr": "effect",
          "reflectToAttr": false,
          "docs": "Effect the skeleton will use.",
          "docsTags": [],
          "default": "'pulse'",
          "values": [
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "pulse",
              "type": "string"
            },
            {
              "value": "sheen",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "height",
          "type": "string",
          "mutable": false,
          "attr": "height",
          "reflectToAttr": false,
          "docs": "Height of the skeleton ex. 100px, 100%, auto etc.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "marginBottom",
          "type": "string",
          "mutable": false,
          "attr": "margin-bottom",
          "reflectToAttr": false,
          "docs": "MarginBottom of the skeleton ex. 10px, 0 etc.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"circle\" | \"rect\" | \"text\"",
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "Variant of the skeleton - circle or rectangle or text",
          "docsTags": [],
          "default": "'text'",
          "values": [
            {
              "value": "circle",
              "type": "string"
            },
            {
              "value": "rect",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "width",
          "type": "string",
          "mutable": false,
          "attr": "width",
          "reflectToAttr": false,
          "docs": "Width of the skeleton ex. 100px, 100%, auto etc.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--fw-skeleton-background",
          "annotation": "prop",
          "docs": "Skeleton background: Default: #cfd7df"
        },
        {
          "name": "--fw-skeleton-border-radius",
          "annotation": "prop",
          "docs": "Skeleton border-radius: Default: 999px for the text, 50% for the circle, 0px for the rect"
        },
        {
          "name": "--fw-skeleton-height",
          "annotation": "prop",
          "docs": "Skeleton height: Default: 16px for the text and rect, 32px for the circle"
        },
        {
          "name": "--fw-skeleton-margin-bottom",
          "annotation": "prop",
          "docs": "Skeleton margin-bottom: Default: 8px/0px(when count is 1)"
        },
        {
          "name": "--fw-skeleton-sheen-color",
          "annotation": "prop",
          "docs": "Skeleton Sheen effect color: Default: #b1bdc8"
        },
        {
          "name": "--fw-skeleton-width",
          "annotation": "prop",
          "docs": "Skeleton width: Default: 100% for the text and rect, 32px for the circle"
        }
      ],
      "slots": [],
      "parts": [
        {
          "name": "base",
          "docs": ""
        }
      ],
      "dependents": [
        "fw-data-table"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "fw-data-table": [
          "fw-skeleton"
        ]
      }
    },
    {
      "filePath": "./src/components/spinner/spinner.tsx",
      "encapsulation": "shadow",
      "tag": "fw-spinner",
      "readme": "# Spinner (fw-spinner)\nfw-spinner displays a continuous loader on the user interface, to indicate that a system is processing an entity.\n\n\n## Demo\n\n```html live\n<fw-label value=\"A small loader\" color=\"yellow\"></fw-label><br/>\n<fw-spinner size=\"small\"></fw-spinner><br/><br/>\n<fw-label value=\"A medium sized loader\" color=\"yellow\"></fw-label><br/>\n<fw-spinner size=\"medium\" color=\"green\"></fw-spinner>\n```\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html \n<fw-label value=\"A small loader\" color=\"yellow\"></fw-label><br/>\n<fw-spinner size=\"small\"></fw-spinner><br/><br/>\n<fw-label value=\"A medium sized loader\" color=\"yellow\"></fw-label><br/>\n<fw-spinner size=\"medium\" color=\"green\"></fw-spinner>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwSpinner } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n        <label>A small loader</label><br/>\n        <FwSpinner size=\"small\"></FwSpinner><br/><br/>\n        <label>A medium sized loader</label><br/>\n        <FwSpinner size=\"medium\" color=\"green\"></FwSpinner>\n    </div>);\n}\n```\n</code-block>\n</code-group>\n\n\n",
      "docs": "fw-spinner displays a continuous loader on the user interface, to indicate that a system is processing an entity.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Color in which the loader is displayed, specified as a standard CSS color.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"default\" | \"large\" | \"medium\" | \"micro\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Size of the loader.",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "micro",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--fw-spinner-color",
          "annotation": "prop",
          "docs": "Color of the spinner"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-button",
        "fw-select",
        "fw-toast-message"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "fw-button": [
          "fw-spinner"
        ],
        "fw-select": [
          "fw-spinner"
        ],
        "fw-toast-message": [
          "fw-spinner"
        ]
      }
    },
    {
      "filePath": "./src/components/tab/tab.tsx",
      "encapsulation": "shadow",
      "tag": "fw-tab",
      "readme": "# Tab (fw-tab)\n\nfw-tab provides child elements for fw-tabs, to enable tab style navigation.\n\n\n## Demo\n\n```html live\n  <fw-tab>Personal</fw-tab>\n  <fw-tab>Official</fw-tab>\n```\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html \n  <fw-tab>Personal</fw-tab>\n  <fw-tab>Official</fw-tab>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwTab } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n          <FwTab>Personal</FwTab>\n          <FwTab>Official</FwTab>\n    </div>);\n}\n```\n</code-block>\n</code-group>",
      "docs": "fw-tab provides child elements for fw-tabs, to enable tab style navigation.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": false,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "Determines whether the tab is active.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Disables this tab",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "panel",
          "type": "string",
          "mutable": false,
          "attr": "panel",
          "reflectToAttr": true,
          "docs": "The name of the tab panel which this tab controls.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tabHeader",
          "type": "string",
          "mutable": false,
          "attr": "tab-header",
          "reflectToAttr": false,
          "docs": "Header for the tab to be displayed.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tabName",
          "type": "string",
          "mutable": false,
          "attr": "tab-name",
          "reflectToAttr": false,
          "docs": "Unique name of the tab.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--fw-tab-border-block-end",
          "annotation": "prop",
          "docs": "border bottom style of tab"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/tab-panel/tab-panel.tsx",
      "encapsulation": "shadow",
      "tag": "fw-tab-panel",
      "readme": "# Tab Panel (fw-tab-panel)\n\nfw-tab-panel is used inside fw-tabs to show tabbed content.\n\n\n## Demo\n\n```html live\n  <fw-tab-panel active>This is sample panel content</fw-tab-panel>\n```\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html \n  <fw-tab-panel active>This is sample panel content</fw-tab-panel>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwTabPanel } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n          <FwTabPanel active>This is sample panel content</FwTabPanel>\n    </div>);\n}\n```\n</code-block>\n</code-group>\n",
      "docs": "fw-tab-panel is used inside fw-tabs to show tabbed content.",
      "docsTags": [
        {
          "name": "parent",
          "text": "tab"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": false,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "If true sets the panel display to block, none otherwise.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "The panel name.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--fw-tab-panel-height",
          "annotation": "prop",
          "docs": "height of the tab container."
        },
        {
          "name": "--fw-tab-panel-width",
          "annotation": "prop",
          "docs": "width of the tab container."
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-tabs"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "fw-tabs": [
          "fw-tab-panel"
        ]
      }
    },
    {
      "filePath": "./src/components/tabs/tabs.tsx",
      "encapsulation": "shadow",
      "tag": "fw-tabs",
      "readme": "# Tabs (fw-tabs)\n\nfw-tabs displays a series of tabs on the user interface and enables tab-style navigation. The component doesn’t have any attributes that impart styling, it merely functions as a container for the tabs. It makes use of `fw-tab` and `fw-tab-panel`. Each tab must be slotted into `tab` slot and panel must refer to fw-tab-panel of same name.\n\n## Demo\n\n```html live\n<fw-tabs>\n  <fw-tab slot=\"tab\" panel=\"personal\">Personal</fw-tab>\n  <fw-tab slot=\"tab\" panel=\"official\">Official</fw-tab>\n\n  <fw-tab-panel name=\"personal\">\n    <fw-input\n      label=\"Name\"\n      icon-left=\"add-contact\"\n      warning-text=\"Do not enter your user ID\"\n      state=\"warning\"\n      placeholder=\"Enter your official name\"\n      required\n      clear-input\n    >\n    </fw-input>\n    <fw-button color=\"secondary\">Submit</fw-button>\n    <fw-button color=\"secondary\">Save</fw-button>\n  </fw-tab-panel>\n\n  <fw-tab-panel name=\"official\">\n    <fw-select multiple label=\"Select location of preference\" required=\"true\">\n      <fw-select-option value=\"1\">Chennai</fw-select-option>\n      <fw-select-option value=\"2\">Bangalore</fw-select-option>\n      <fw-select-option value=\"3\">Hyderabad</fw-select-option>\n    </fw-select>\n    <fw-button color=\"secondary\">Submit</fw-button>\n    <fw-button color=\"secondary\">Save</fw-button>\n  </fw-tab-panel>\n</fw-tabs>\n```\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html \n<fw-tabs>\n  <fw-tab slot=\"tab\" panel=\"personal\">Personal</fw-tab>\n  <fw-tab slot=\"tab\" panel=\"official\">Official</fw-tab>\n\n  <fw-tab-panel name=\"personal\">\n    <fw-input\n      label=\"Name\"\n      icon-left=\"add-contact\"\n      warning-text=\"Do not enter your user ID\"\n      state=\"warning\"\n      placeholder=\"Enter your official name\"\n      required\n      clear-input>\n    </fw-input>\n    <fw-button color=\"secondary\">Submit</fw-button>\n    <fw-button color=\"secondary\">Save</fw-button>\n  </fw-tab-panel>\n\n  <fw-tab-panel name=\"official\">\n    <fw-select multiple label=\"Select location of preference\" required=\"true\">\n      <fw-select-option value=\"1\">Chennai</fw-select-option>\n      <fw-select-option value=\"2\">Bangalore</fw-select-option>\n      <fw-select-option value=\"3\">Hyderabad</fw-select-option>\n    </fw-select>\n    <fw-button color=\"secondary\">Submit</fw-button>\n    <fw-button color=\"secondary\">Save</fw-button>\n  </fw-tab-panel>\n</fw-tabs>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwButton, FwSelect, FwSelectOption, FwInput, FwTabs, FwTab, FwTabPanel } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n          <FwTabs>\n            <FwTab slot=\"tab\" panel=\"personal\">Personal</FwTab>\n            <FwTab slot=\"tab\" panel=\"official\">Official</FwTab>\n\n            <FwTabPanel name=\"personal\">\n              <FwInput\n                label=\"Name\"\n                iconLeft=\"add-contact\"\n                warningText=\"Do not enter your user ID\"\n                state=\"warning\"\n                placeholder=\"Enter your official name\"\n                required\n                clearInput>\n              </FwInput>\n              <FwButton color=\"secondary\">Submit</FwButton>\n              <FwButton color=\"secondary\">Save</FwButton>\n            </FwTabPanel>\n\n            <FwTabPanel name=\"official\">\n              <FwSelect multiple label=\"Select location of preference\" required=\"true\">\n                <FwSelectOption value=\"1\">Chennai</FwSelectOption>\n                <FwSelectOption value=\"2\">Bangalore</FwSelectOption>\n                <FwSelectOption value=\"3\">Hyderabad</FwSelectOption>\n              </FwSelect>\n              <FwButton color=\"secondary\">Submit</FwButton>\n              <FwButton color=\"secondary\">Save</FwButton>\n            </FwTabPanel>\n          </FwTabs>\n    </div>);\n\n}\n\n```\n</code-block>\n</code-group>\n\n",
      "docs": "fw-tabs displays a series of tabs on the user interface and enables tab-style navigation. The component doesn’t have any attributes that impart styling, it merely functions as a container for the tabs. It makes use of `fw-tab` and `fw-tab-panel`. Each tab must be slotted into `tab` slot and panel must refer to fw-tab-panel of same name.",
      "docsTags": [
        {
          "name": "parent",
          "text": "tab"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "activeTabIndex",
          "type": "number",
          "mutable": true,
          "attr": "active-tab-index",
          "reflectToAttr": true,
          "docs": "The index of the tab to be activated (Starts from 0)",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "activeTabName",
          "type": "string",
          "mutable": true,
          "attr": "active-tab-name",
          "reflectToAttr": true,
          "docs": "The name of the tab to be activated. If present, will be taken as priority over `activeTabIndex`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Describes the purpose of set of tabs.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"box\" | \"normal\"",
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "The style of tab headers that needs to be displayed, box will display headers in a container.",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "box",
              "type": "string"
            },
            {
              "value": "normal",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "activateTab",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "activateTab(index?: number, name?: string) => Promise<void>",
          "parameters": [],
          "docs": "Activates the tab based based on tabindex or name.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "fwChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when a the view switches to a new tab.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        },
        {
          "event": "keyup",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--fw-tabs-border-block-end",
          "annotation": "prop",
          "docs": "border bottom style of tabs"
        },
        {
          "name": "--fw-tabs-height",
          "annotation": "prop",
          "docs": "height of the tab container."
        },
        {
          "name": "--fw-tabs-margin-inline-end",
          "annotation": "prop",
          "docs": "Right margin if direction is left-to-right, and Left margin if direction is right-to-left for the tab items"
        },
        {
          "name": "--fw-tabs-margin-inline-start",
          "annotation": "prop",
          "docs": "Left margin if direction is left-to-right, and Right margin if direction is right-to-left for the tab items"
        },
        {
          "name": "--fw-tabs-padding-inline-end",
          "annotation": "prop",
          "docs": "Right padding if direction is left-to-right, and Left padding if direction is right-to-left for the tab items"
        },
        {
          "name": "--fw-tabs-padding-inline-start",
          "annotation": "prop",
          "docs": "Left padding if direction is left-to-right, and Right padding if direction is right-to-left for the tab items"
        },
        {
          "name": "--fw-tabs-width",
          "annotation": "prop",
          "docs": "width of the tab container."
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "fw-tab-panel"
      ],
      "dependencyGraph": {
        "fw-tabs": [
          "fw-tab-panel"
        ]
      }
    },
    {
      "filePath": "./src/components/tag/tag.tsx",
      "encapsulation": "shadow",
      "tag": "fw-tag",
      "readme": "# Tag (fw-tag)\n\nfw-tag provides a child component that is used to enable selecting multiple options in the Select component.\n\n## Demo\n\n```html live\n<fw-tag text=\"Option\"></fw-tag>\n\n<fw-tag id=\"avatarTag\" variant=\"avatar\" text=\"Option\"></fw-tag>\n\n<fw-tag id=\"avatarTagError\" variant=\"avatar\" text=\"Option\" state=\"error\"></fw-tag>\n\n<fw-tag id=\"avatarTagFocused\" variant=\"avatar\" text=\"Option\" is-focused></fw-tag>\n\n<fw-tag id=\"avatarTagWithSubText\" variant=\"avatar\" text=\"Option\" sub-text='<sub-text>'></fw-tag>\n\n<fw-tag id=\"avatarTagTransparent\" variant=\"avatar\" text=\"Option\" state=\"transparent\"></fw-tag>\n\n<div style=\"max-width: 200px; padding-top: 10px\">\n  <fw-tag id=\"avatarTagWithEllipsis\" variant=\"avatar\" text=\"Option With Longest Text\" sub-text='<sub-text>' show-ellipsis-on-overflow></fw-tag>\n</div>\n\n<script type=\"application/javascript\">\n  avatarTag = document.getElementById('avatarTag');\n  avatarTagError = document.getElementById('avatarTagError');\n  avatarTagFocused = document.getElementById('avatarTagFocused');\n  avatarTagWithSubText = document.getElementById('avatarTagWithSubText');\n  avatarTagWithEllipsis = document.getElementById('avatarTagWithEllipsis');\n  avatarTag.graphicsProps = {\n    image:\n      'https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n  };\n  avatarTagError.graphicsProps = {\n    image:\n      'https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n  };\n  avatarTagFocused.graphicsProps = {\n    image:\n      'https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n  };\n  avatarTagWithSubText.graphicsProps = {\n    image:\n      'https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n  };\n  avatarTagTransparent.graphicsProps = {\n    image:\n      'https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n  };\n  avatarTagWithEllipsis.graphicsProps = {\n    image:\n      'https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n  };\n</script>\n```\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html \n<fw-tag text=\"Option\"></fw-tag>\n\n<fw-tag id=\"avatarTag\" variant=\"avatar\" text=\"Option\"></fw-tag>\n\n<fw-tag id=\"avatarTagError\" variant=\"avatar\" text=\"Option\" state=\"error\"></fw-tag>\n\n<fw-tag id=\"avatarTagFocused\" variant=\"avatar\" text=\"Option\" is-focused></fw-tag>\n\n<fw-tag id=\"avatarTagWithSubText\" variant=\"avatar\" text=\"Option\" sub-text='<sub-text>'></fw-tag>\n\n<fw-tag id=\"avatarTagTransparent\" variant=\"avatar\" text=\"Option\" state=\"transparent\"></fw-tag>\n\n<div style=\"max-width: 200px; padding-top: 10px\">\n  <fw-tag id=\"avatarTagWithEllipsis\" variant=\"avatar\" text=\"Option With Longest Text\" sub-text='<sub-text>' show-ellipsis-on-overflow></fw-tag>\n</div>\n\n<script type=\"application/javascript\">\n  avatarTag = document.getElementById('avatarTag');\n  avatarTagError = document.getElementById('avatarTagError');\n  avatarTagFocused = document.getElementById('avatarTagFocused');\n  avatarTagWithSubText = document.getElementById('avatarTagWithSubText');\n  avatarTagWithEllipsis = document.getElementById('avatarTagWithEllipsis');\n  avatarTag.graphicsProps = {\n    image:\n      'https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n  };\n  avatarTagError.graphicsProps = {\n    image:\n      'https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n  };\n  avatarTagFocused.graphicsProps = {\n    image:\n      'https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n  };\n  avatarTagWithSubText.graphicsProps = {\n    image:\n      'https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n  };\n  avatarTagTransparent.graphicsProps = {\n    image:\n      'https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n  };\n  avatarTagWithEllipsis.graphicsProps = {\n    image:\n      'https://images.unsplash.com/photo-1529778873920-4da4926a72c2?ixlib=rb-1.2.1&auto=format&fit=crop&w=300&q=80',\n  };\n</script>\n\n````\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport { FwTag } from \"@freshworks/crayons/react\";\n\nfunction App() {\n\n  return (<div>\n    <FwTag text=\"Option\"></FwTag>\n\n    <FwTag variant=\"avatar\" graphicsProps={{\n      image:\n        'https://images.dog.ceo/breeds/chow/n02112137_8862.jpg'\n    }} text=\"Chow Wolowitz\"></FwTag>\n\n    <FwTag variant=\"avatar\" graphicsProps={{\n      image:\n        'https://images.dog.ceo/breeds/chow/n02112137_8862.jpg'\n    }} text=\"Chow Wolowitz\" state=\"error\"></FwTag>\n\n    <FwTag variant=\"avatar\" graphicsProps={{\n      image:\n        'https://images.dog.ceo/breeds/chow/n02112137_8862.jpg'\n    }} text=\"Chow Wolowitz\" isFocused></FwTag>\n\n    <FwTag variant=\"avatar\" graphicsProps={{\n      image:\n        'https://images.dog.ceo/breeds/chow/n02112137_8862.jpg'\n    }} text=\"Chow Wolowitz\" subText=\"Best Pet\"></FwTag>\n\n     <FwTag variant=\"avatar\" graphicsProps={{\n      image:\n        'https://images.dog.ceo/breeds/chow/n02112137_8862.jpg'\n    }} text=\"Chow Wolowitz\" state=\"transparent\"></FwTag>\n    \n    <div style={{ maxWidth: '250px' }}>\n      <FwTag variant=\"avatar\" graphicsProps={{\n        image:\n          'https://images.dog.ceo/breeds/chow/n02112137_8862.jpg'\n      }} text=\"Chow Wolowitz\" subText='<sub-text>' showEllipsisOnOverflow></FwTag>\n    </div>\n\n  </div >);\n}\n\nexport default App;\n\n````\n\n</code-block>\n</code-group>\n",
      "docs": "fw-tag provides a child component that is used to enable selecting multiple options in the Select component.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "closable",
          "type": "boolean",
          "mutable": false,
          "attr": "closable",
          "reflectToAttr": false,
          "docs": "Whether the Tag can be closed.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Sets the state of the tag to disabled. The close button is disabled. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "focusable",
          "type": "boolean",
          "mutable": false,
          "attr": "focusable",
          "reflectToAttr": false,
          "docs": "Whether the Tag is focusable.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "graphicsProps",
          "type": "{}",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The props need to be passed for the variant. If the variant is avatar then use this prop to send the props for the fw-avatar component.",
          "docsTags": [],
          "default": "{}",
          "values": [
            {
              "type": "{}"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "index",
          "type": "number | string",
          "mutable": false,
          "attr": "index",
          "reflectToAttr": false,
          "docs": "Index of tag in a group of tags",
          "docsTags": [],
          "default": "'-1'",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isFocused",
          "type": "boolean",
          "mutable": false,
          "attr": "is-focused",
          "reflectToAttr": false,
          "docs": "If true, tag will be focused",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showEllipsisOnOverflow",
          "type": "boolean",
          "mutable": false,
          "attr": "show-ellipsis-on-overflow",
          "reflectToAttr": false,
          "docs": "Truncate text with ellipsis when text overflows",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "\"error\" | \"normal\" | \"transparent\"",
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "Theme based on which the tag is styled.",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "normal",
              "type": "string"
            },
            {
              "value": "transparent",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "subText",
          "type": "string",
          "mutable": false,
          "attr": "sub-text",
          "reflectToAttr": false,
          "docs": "Display sub text in the tag component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "Display text in the tag component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Value associated with the tag component, that is saved when the form data is saved.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"avatar\" | \"standard\"",
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "The variant of tag to be displayed.",
          "docsTags": [],
          "default": "'standard'",
          "values": [
            {
              "value": "avatar",
              "type": "string"
            },
            {
              "value": "standard",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<any>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<any>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "fwClosed",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the tag is deselected.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-select"
      ],
      "dependencies": [
        "fw-tooltip",
        "fw-avatar",
        "fw-icon"
      ],
      "dependencyGraph": {
        "fw-tag": [
          "fw-tooltip",
          "fw-avatar",
          "fw-icon"
        ],
        "fw-tooltip": [
          "fw-popover"
        ],
        "fw-select": [
          "fw-tag"
        ]
      }
    },
    {
      "filePath": "./src/components/textarea/textarea.tsx",
      "encapsulation": "shadow",
      "tag": "fw-textarea",
      "readme": "# Textarea (fw-textarea)\n\nfw-textarea displays an input box on the user interface and enables assigning multi-line text value to it. The size of the input box is based on the cols and rows attributes.\n\n## Demo\n\n```html live\n<fw-textarea\n  cols=\"75\"\n  rows=\"5\"\n  maxlength=\"190\"\n  minlength=\"5\"\n  label=\"Address\"\n  warning-text=\"Do not enter your temporary address\"\n  state=\"warning\"\n  placeholder=\"Enter your permanent address\"\n  required\n>\n</fw-textarea>\n<fw-textarea\n  cols=\"75\"\n  rows=\"5\"\n  label=\"Passcode\"\n  error-text=\"Passcode is incorrect\"\n  state=\"error\"\n  required\n>\n</fw-textarea>\n<h3>`hint-text`, `warning-text`, `error-text` can be passed as slots</h3>\n<fw-textarea\n  cols=\"75\"\n  rows=\"5\"\n  label=\"Location identifier\"\n  placeholder=\"Enter landmark details\"\n  state=\"normal\"\n>\n  <div slot=\"hint-text\">Enter location details</div>\n</fw-textarea>\n<fw-textarea\n  cols=\"75\"\n  rows=\"1\"\n  label=\"Plot number\"\n  value=\"not applicable\"\n  disabled\n  state=\"normal\"\n>\n</fw-textarea>\n```\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html \n<fw-textarea cols=75 rows=5 maxlength=190 minlength=5\n  label=\"Address\"\n  warning-text=\"Do not enter your temporary address\"\n  state=\"warning\"\n  placeholder=\"Enter your permanent address\"\n  required>\n</fw-textarea>\n<fw-textarea cols=75 rows=5\n  label=\"Passcode\"\n  error-text=\"Passcode is incorrect\"\n  state=\"error\"\n  required>\n</fw-textarea>\n<h3>`hint-text`, `warning-text`, `error-text` can be passed as slots</h3>\n<fw-textarea cols=75 rows=5\n  label=\"Location identifier\"\nplaceholder=\"Enter landmark details\"\n  state=\"normal\">\n  <div slot=\"hint-text\">Enter location details</div>\n</fw-textarea>\n<fw-textarea cols=75 rows=1\n  label=\"Plot number\"\n  value=\"not applicable\"\n   disabled\n  state=\"normal\">\n</fw-textarea>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwTextarea } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n            <FwTextarea cols={75} rows={5} maxlength={190} minlength={5}\n              label=\"Address\"\n              warningText=\"Do not enter your temporary address\"\n              state=\"warning\"\n              placeholder=\"Enter your permanent address\"\n              required>\n            </FwTextarea>\n            <FwTextarea cols={75} rows={5}\n              label=\"Passcode\"\n              errorText=\"Passcode is incorrect\"\n              state=\"error\"\n              required>\n            </FwTextarea>\n            <h3>`hint-text`, `warning-text`, `error-text` can be passed as slots</h3>\n            <FwTextarea cols={75} rows={5}\n              label=\"Location identifier\"\n              placeholder=\"Enter landmark details\"\n              state=\"normal\">\n              <div slot=\"hint-text\">Enter location details</div>\n            </FwTextarea>\n            <FwTextarea cols={75} rows={1}\n              label=\"Plot number\"\n              value=\"not applicable\"\n              disabled\n              state=\"normal\">\n            </FwTextarea>\n    </div>);\n}\n```\n</code-block>\n</code-group>\n",
      "docs": "fw-textarea displays an input box on the user interface and enables assigning multi-line text value to it. The size of the input box is based on the cols and rows attributes.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "cols",
          "type": "number",
          "mutable": false,
          "attr": "cols",
          "reflectToAttr": false,
          "docs": "Width of the input box, specified as number of columns.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables the text area on the interface. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "errorText",
          "type": "string",
          "mutable": false,
          "attr": "error-text",
          "reflectToAttr": false,
          "docs": "Error text displayed below the text box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hintText",
          "type": "string",
          "mutable": false,
          "attr": "hint-text",
          "reflectToAttr": false,
          "docs": "Hint text displayed below the text box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label displayed on the interface, for the component.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "number",
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "Maximum number of characters a user can enter in the input box.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "minlength",
          "type": "number",
          "mutable": false,
          "attr": "minlength",
          "reflectToAttr": false,
          "docs": "Minimum number of characters a user must enter in the input box for the value to be valid.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Text displayed in the input box before a user enters a value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If true, the user cannot enter a value in the input box. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "resize",
          "type": "\"both\" | \"horizontal\" | \"none\" | \"vertical\"",
          "mutable": false,
          "attr": "resize",
          "reflectToAttr": false,
          "docs": "Specifies the way in which the text area can be resized",
          "docsTags": [],
          "default": "'both'",
          "values": [
            {
              "value": "both",
              "type": "string"
            },
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rows",
          "type": "number",
          "mutable": false,
          "attr": "rows",
          "reflectToAttr": false,
          "docs": "Height of the input box, specified as number of rows.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "state",
          "type": "\"error\" | \"normal\" | \"warning\"",
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "Theme based on which the input box is styled.",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "normal",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Default value displayed in the input box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "warningText",
          "type": "string",
          "mutable": false,
          "attr": "warning-text",
          "reflectToAttr": false,
          "docs": "Warning text displayed below the text box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "wrap",
          "type": "\"hard\" | \"soft\"",
          "mutable": false,
          "attr": "wrap",
          "reflectToAttr": false,
          "docs": "Type of text wrapping used by the input box. If the value is hard, the text in the textarea is wrapped (contains line breaks) when the form data is saved. If the value is soft, the text in the textarea is saved as a single line, when the form data is saved.",
          "docsTags": [],
          "default": "'soft'",
          "values": [
            {
              "value": "hard",
              "type": "string"
            },
            {
              "value": "soft",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on a specific `fw-textarea`. Use this method instead of the global `input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "fwBlur",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the input box loses focus.",
          "docsTags": []
        },
        {
          "event": "fwFocus",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the input box comes into focus.",
          "docsTags": []
        },
        {
          "event": "fwInput",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when a value is entered in the input box.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--fw-error-color",
          "annotation": "prop",
          "docs": "Color of the error text."
        },
        {
          "name": "--fw-hint-color",
          "annotation": "prop",
          "docs": "Color of the hint text."
        },
        {
          "name": "--fw-textarea-input-color",
          "annotation": "prop",
          "docs": "Color of the textarea input"
        },
        {
          "name": "--fw-textarea-margin-bottom",
          "annotation": "prop",
          "docs": "Bottom margin for the textarea"
        },
        {
          "name": "--fw-textarea-min-height",
          "annotation": "prop",
          "docs": "Min-Height of the textarea."
        },
        {
          "name": "--fw-textarea-width",
          "annotation": "prop",
          "docs": "Width of the textarea."
        },
        {
          "name": "--fw-warning-color",
          "annotation": "prop",
          "docs": "Color of the warning text."
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-form-control"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "fw-form-control": [
          "fw-textarea"
        ]
      }
    },
    {
      "filePath": "./src/components/timepicker/timepicker.tsx",
      "encapsulation": "shadow",
      "tag": "fw-timepicker",
      "readme": "# Timepicker (fw-timepicker)\n\nfw-timepicker displays a list or drop-down box with prepopulated time values and enables picking a time. The time values displayed in the list box are based on the fw-timepicker attribute values.\n\n## Demo\n\n```html live\n<fw-label value=\"An interval based picker\" color=\"yellow\"></fw-label><br />\n<fw-timepicker interval=\"45\" format=\"hh:mm a\"></fw-timepicker>\n<fw-label value=\"A range based picker\" color=\"yellow\"></fw-label><br />\n<fw-timepicker min-time=\"04:30 PM\" max-time=\"08:30 PM\"></fw-timepicker>\n<fw-label value=\"Time picker with locale support\" color=\"yellow\"></fw-label\n><br />\n<fw-timepicker locale=\"ar\"></fw-timepicker>\n```\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html \n<fw-label value=\"An interval based picker\" color=\"yellow\"></fw-label><br/> \n<fw-timepicker interval=45 format=\"hh:mm a\"></fw-timepicker>\n<fw-label value=\"A range based picker\" color=\"yellow\"></fw-label><br/>\n<fw-timepicker min-time=\"04:30 PM\" max-time=\"08:30 PM\"></fw-timepicker>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwTimepicker } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n          <label>An interval based picker</label><br/> \n          <FwTimepicker interval={45} format=\"hh:mm a\"></FwTimepicker>\n          <label>A range based picker</label><br/>\n          <FwTimepicker minTime=\"04:30 PM\" maxTime=\"08:30 PM\"></FwTimepicker>\n    </div>);\n}\n```\n</code-block>\n</code-group>\n",
      "docs": "fw-timepicker displays a list or drop-down box with prepopulated time values and enables picking a time. The time values displayed in the list box are based on the fw-timepicker attribute values.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "allowDeselect",
          "type": "boolean",
          "mutable": false,
          "attr": "allow-deselect",
          "reflectToAttr": false,
          "docs": "Whether clicking on the already selected option disables it.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "caret",
          "type": "boolean",
          "mutable": false,
          "attr": "caret",
          "reflectToAttr": false,
          "docs": "Whether the arrow/caret should be shown in the timepicker.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Set true to disable the element",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "errorText",
          "type": "string",
          "mutable": false,
          "attr": "error-text",
          "reflectToAttr": false,
          "docs": "Error text displayed below the text box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "format",
          "type": "string",
          "mutable": true,
          "attr": "format",
          "reflectToAttr": false,
          "docs": "Format in which time values are populated in the list box. If the value is hh:mm a, the time values are in the 12-hour format. If the value is hh:mm, the time values are in the 24-hr format.\nThe default value will be set based on the locale time format.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hintText",
          "type": "string",
          "mutable": false,
          "attr": "hint-text",
          "reflectToAttr": false,
          "docs": "Hint text displayed below the text box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "interval",
          "type": "number",
          "mutable": false,
          "attr": "interval",
          "reflectToAttr": false,
          "docs": "Time interval between the values displayed in the list, specified in minutes.",
          "docsTags": [],
          "default": "30",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label displayed on the interface, for the component.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "locale",
          "type": "string",
          "mutable": true,
          "attr": "locale",
          "reflectToAttr": false,
          "docs": "Locale for which timePicker needs to be shown. Defaults to browser's current locale.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxTime",
          "type": "string",
          "mutable": true,
          "attr": "max-time",
          "reflectToAttr": false,
          "docs": "Upper time-limit for the values displayed in the list. The default value will be set based on the locale time format.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "minTime",
          "type": "string",
          "mutable": true,
          "attr": "min-time",
          "reflectToAttr": false,
          "docs": "Lower time-limit for the values displayed in the list. The default value will be set based on the locale time format.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "optionsPlacement",
          "type": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "mutable": false,
          "attr": "options-placement",
          "reflectToAttr": true,
          "docs": "Placement of the options list with respect to timepicker.",
          "docsTags": [],
          "default": "'bottom'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Text displayed in the select before an option is selected.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If true, the user cannot type in the text input",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Specifies the input box as a mandatory field and displays an asterisk next to the label. If the attribute's value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sameWidth",
          "type": "boolean",
          "mutable": false,
          "attr": "same-width",
          "reflectToAttr": false,
          "docs": "Whether the dropdown should be same width as that of the input.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "\"error\" | \"normal\" | \"warning\"",
          "mutable": false,
          "attr": "state",
          "reflectToAttr": false,
          "docs": "Theme based on which the input of the timepicker is styled.",
          "docsTags": [],
          "default": "'normal'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "normal",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The Time value. The value is always in the non meridian format i.e., HH:mm",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "warningText",
          "type": "string",
          "mutable": false,
          "attr": "warning-text",
          "reflectToAttr": false,
          "docs": "Warning text displayed below the text box.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on a specific `fw-timepicker`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "fwBlur",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the list box loses focus.",
          "docsTags": []
        },
        {
          "event": "fwChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when a value is selected or deselected from the list box options.",
          "docsTags": []
        },
        {
          "event": "fwFocus",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the list box comes into focus.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-datepicker",
        "fw-form-control"
      ],
      "dependencies": [
        "fw-select",
        "fw-select-option"
      ],
      "dependencyGraph": {
        "fw-timepicker": [
          "fw-select",
          "fw-select-option"
        ],
        "fw-select": [
          "fw-tag",
          "fw-popover",
          "fw-button",
          "fw-spinner",
          "fw-icon",
          "fw-list-options"
        ],
        "fw-tag": [
          "fw-tooltip",
          "fw-avatar",
          "fw-icon"
        ],
        "fw-tooltip": [
          "fw-popover"
        ],
        "fw-button": [
          "fw-spinner",
          "fw-icon"
        ],
        "fw-list-options": [
          "fw-select-option",
          "fw-input"
        ],
        "fw-select-option": [
          "fw-icon",
          "fw-checkbox",
          "fw-avatar"
        ],
        "fw-checkbox": [
          "fw-icon"
        ],
        "fw-input": [
          "fw-icon"
        ],
        "fw-datepicker": [
          "fw-timepicker"
        ],
        "fw-form-control": [
          "fw-timepicker"
        ]
      }
    },
    {
      "filePath": "./src/components/toast/toast.tsx",
      "encapsulation": "shadow",
      "tag": "fw-toast",
      "readme": "# Toast (fw-toast)\n\nToasts are used to show pop-up messages that lasts on the screen for a while. Use them to show users alerts or messages. You can also use custom HTML content with in toast\n\n## Demo\n\n```html live\n<fw-toast id=\"type_toast\"></fw-toast>\n<fw-toast id=\"type_toast_right\" position=\"top-right\"></fw-toast>\n<fw-toast id=\"type_toast_left\" position=\"top-left\"></fw-toast>\n\n<fw-toast-message type=\"success\" id=\"custom-toast\" timeout=\"6000\">\n  <div>\n    <span class=\"custom-text\">Custom content</span>\n    <h4>custom html contents can be added</h4>\n    <button onclick=\"alert('clicked')\">custom btn</button>\n  </div>\n</fw-toast-message>\n\n<fw-toast-message\n  type=\"success\"\n  id=\"custom-toast1\"\n  sticky\n  action-link-text=\"Click me\"\n>\n  <div\n    style=\"display: flex;\n    flex-direction: column;\n    gap: 4px;\"\n  >\n    <span\n      style=\"font-style: normal;\n    font-weight: 700;\n    font-size: 14px;\n    line-height: 20px;\n    color: #12344D;\"\n      >Test content</span\n    >\n    <span\n      style=\"font-style: normal;\n    font-weight: 400;\n    font-size: 12px;\n    line-height: 16px;\"\n      >custom html contents can be added</span\n    >\n  </div>\n</fw-toast-message>\n\n<fw-button\n  onclick=\"document.querySelector('#type_toast').trigger({type:'success', content: 'Successfullly triggered'})\"\n  >Success</fw-button\n>\n<fw-button\n  onclick=\"document.querySelector('#type_toast_right').trigger({type:'error', content:'something went wrong!'})\"\n  >Error</fw-button\n>\n<fw-button\n  onclick=\"document.querySelector('#type_toast_left').trigger({type:'warning', content:'This is a warning!'})\"\n  >Warning</fw-button\n>\n<fw-button\n  onclick=\"document.querySelector('#type_toast').trigger({type:'inprogress', content:'Request is in progress'})\"\n  >Inprogress</fw-button\n>\n<fw-button\n  onclick=\"document.querySelector('#type_toast').trigger({type:'success', contentref:'#custom-toast'})\"\n  >Custom Toast Content</fw-button\n>\n\n<fw-button\n  onclick=\"document.querySelector('#type_toast').trigger({type:'success', contentref:'#custom-toast1'})\"\n  >Custom Toast Content 1</fw-button\n>\n```\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html \n<fw-toast id=\"type_toast\"></fw-toast>\n<fw-toast id=\"type_toast_right\" position=\"top-right\"></fw-toast>\n<fw-toast id=\"type_toast_left\" position=\"top-left\"></fw-toast>\n\n<fw-toast-message type='success' id=\"custom-toast\" timeout=\"6000\">\n  <div>\n    <span class=\"custom-text\">Custom content</span>\n    <h4>custom html contents can be added</h4>\n    <button onclick=\"alert('clicked')\">custom btn</button>\n  </div>\n</fw-toast-message>\n\n<fw-toast-message type=\"success\" id=\"custom-toast1\" sticky action-link-text=\"Click me\">\n  <div\n    style=\"display: flex;\n    flex-direction: column;\n    gap: 4px;\"\n  >\n    <span\n      style=\"font-style: normal;\n    font-weight: 700;\n    font-size: 14px;\n    line-height: 20px;\n    color: #12344D;\"\n      >Test content</span\n    >\n    <span\n      style=\"font-style: normal;\n    font-weight: 400;\n    font-size: 12px;\n    line-height: 16px;\"\n      >custom html contents can be added</span\n    >\n  </div>\n</fw-toast-message>\n\n<fw-button onclick=\"document.querySelector('#type_toast').trigger({type:'success', content: 'Successfullly triggered'})\">Success</fw-button>\n<fw-button onclick=\"document.querySelector('#type_toast_right').trigger({type:'error', content:'something went wrong!'})\">Error</fw-button>\n<fw-button onclick=\"document.querySelector('#type_toast_left').trigger({type:'warning', content:'This is a warning!'})\">Warning</fw-button>\n<fw-button onclick=\"document.querySelector('#type_toast').trigger({type:'inprogress', content:'Request is in progress'})\">Inprogress</fw-button>\n<fw-button onclick=\"document.querySelector('#type_toast').trigger({type:'success', contentref:'#custom-toast'})\">Custom Toast Content</fw-button>\n<fw-button onclick=\"document.querySelector('#type_toast').trigger({type:'success', contentref:'#custom-toast1'})\">Custom Toast Content1</fw-button>\n\n````\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React, {useRef, useEffect} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwButton, ToastController, FwToast, FwToastMessage } from \"@freshworks/crayons/react\";\nfunction App() {\n  const el = useRef(null);\n  const el1 = useRef(null);\n  const toast = ToastController({ position:'top-right'})\n\n  useEffect(() => {\n   el1.current.onclick = function() {\n     console.log(\"custom action handled here\");\n   }\n  },[])\n\n  return (<div>\n\n          <FwToastMessage type='success' id=\"custom-temp\">\n            <div>\n              <FwButton onclick={()=> console.log(\"custom action here\")}>custom action element</FwButton>\n              <FwButton ref={el1}>custom action element in Typescript apps</FwButton>\n              <p> Please make sure here in the above element, the event handler name is in lowercase. use `onclick` instead of `onClick`. </p>\n              <p className=\"cus-style\">custom style element</p>\n            </div>\n          </FwToastMessage>\n\n          <FwToastMessage\n          type='success'\n          id='custom-toast1'\n          sticky\n          action-link-text='Click me'\n        >\n          <div style={{ display: 'flex', flexDirection: 'column', gap: '4px' }}>\n            <span\n              style={{\n                fontStyle: 'normal',\n                fontWeight: '700',\n                fontSize: '14px',\n                lineHeight: '20px',\n                color: '#12344D',\n              }}\n            >\n              Test content\n            </span>\n            <span\n              style={{\n                fontStyle: 'normal',\n                fontWeight: '400',\n                fontSize: '12px',\n                lineHeight: '16px',\n              }}\n            >\n              custom html contents can be added\n            </span>\n          </div>\n        </FwToastMessage>\n\n          <FwToast id=\"type_toast\" ref={el} timeout={5000}></FwToast>\n\n          <FwButton onClick={()=> toast.trigger({type:'success', content: 'Successfullly triggered'})}>Success</FwButton>\n          <FwButton onClick={()=> el.current.trigger({type:'error', content:'something went wrong!'})}>Error</FwButton>\n          <FwButton onClick={()=> el.current.trigger({type:'warning', content:'This is a warning!'})}>Warning</FwButton>\n          <FwButton onClick={()=> el.current.trigger({type:'inprogress', content:'Request is in progress'})}>Inprogress</FwButton>\n          <FwButton onClick={() => toast.trigger({contentref:'#custom-temp'})}>trigger custom </FwButton>\n\n          <FwButton onClick={() => toast.trigger({contentref:'#custom-toast1'})}>trigger custom 1 </FwButton>\n    </div>);\n}\n````\n\n</code-block>\n</code-group>\n\n## ToastController\n\nYou can also use `ToastController` to create Toast like below:\n\n```js\nJavascript - import {  ToastController } from \"@freshworks/crayons\"\nReact - import {  ToastController } from \"@freshworks/crayons/react\"\n```\n\nCreate an instance of `ToastController` by passing [ToastOptions](#toastoptions) (optional) and use [Methods](#methods) to manage toast\n\n```js\nconst toast = ToastController({ position: 'top-right' });\ntoast.trigger({ type: 'success', content: 'Successfullly triggered' });\n```\n\n## ToastOptions\n\nBelow is the interface for `ToastOptions` that can be used for creating the toast\n\n```js\ninterface ToastOptions {\n  /**\n   * The Content of the action link\n   */\n  actionLinkText?: string;\n  /**\n   * The content to be displayed in toast\n   */\n  content?: string;\n  /**\n   * The document selector for the toast-message component\n   * which can be used to embed custom html content in the toast message\n   */\n  contentref?: string;\n  /**\n   * Pause the toast from hiding on mouse hover\n   */\n  pauseOnHover?: boolean;\n  /**\n   * won't close automatically\n   * Default is `false`\n   */\n  sticky?: boolean;\n  /**\n   * Time duration of the toast visibility\n   * Default is `4000`\n   */\n  timeout?: number;\n  /**\n   * Type of the toast - success,failure, warning, inprogress\n   * Default is `warning`\n   */\n  type?: 'success' | 'error' | 'warning' | 'inprogress';\n  /**\n   *  position of the toast notification in screen\n   *  Default is `top-center`\n   */\n  position?: 'top-center' | 'top-left' | 'top-right';\n}\n```\n\n### Custom template event naming\n\nPlease make sure when using event handler inside `custom template` in a `React app`, the event handler name is in `lowercase`. For example use `onclick` instead of `onClick`. This helps in cloning the event handlers used in the template when displaying multiple toast messages.\nRefer [usage](#usage)\n\n```js\n useEffect(() => {\n   el1.current.onclick = function() {\n     console.log(\"custom action handled here\");\n   }\n  },[])\n <FwButton onclick={()=> console.log(\"custom action here\")}>Action button</FwButton>\n <FwButton ref={el1}>In Typescript apps</FwButton>\n```\n",
      "docs": "Toasts are used to show pop-up messages that lasts on the screen for a while. Use them to show users alerts or messages. You can also use custom HTML content with in toast",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "actionLinkText",
          "type": "string",
          "mutable": false,
          "attr": "action-link-text",
          "reflectToAttr": false,
          "docs": "The Content of the action link",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "content",
          "type": "string",
          "mutable": false,
          "attr": "content",
          "reflectToAttr": false,
          "docs": "The content to be displayed in toast",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pauseOnHover",
          "type": "boolean",
          "mutable": false,
          "attr": "pause-on-hover",
          "reflectToAttr": false,
          "docs": "Pause the toast from hiding on mouse hover",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "\"top-center\" | \"top-left\" | \"top-right\"",
          "mutable": false,
          "attr": "position",
          "reflectToAttr": false,
          "docs": "position of the toast notification in screen",
          "docsTags": [],
          "default": "'top-center'",
          "values": [
            {
              "value": "top-center",
              "type": "string"
            },
            {
              "value": "top-left",
              "type": "string"
            },
            {
              "value": "top-right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sticky",
          "type": "boolean",
          "mutable": false,
          "attr": "sticky",
          "reflectToAttr": false,
          "docs": "won't close automatically",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "timeout",
          "type": "number",
          "mutable": false,
          "attr": "timeout",
          "reflectToAttr": false,
          "docs": "Time duration of the toast visibility",
          "docsTags": [],
          "default": "4000",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"error\" | \"inprogress\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Type of the toast - success,failure, warning, inprogress",
          "docsTags": [],
          "default": "'warning'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "inprogress",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "trigger",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "trigger(opts: ToastOptions) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "fw-toast-message"
      ],
      "dependencyGraph": {
        "fw-toast": [
          "fw-toast-message"
        ],
        "fw-toast-message": [
          "fw-spinner",
          "fw-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/toast-message/toast-message.tsx",
      "encapsulation": "shadow",
      "tag": "fw-toast-message",
      "readme": "# Toast Message (fw-toast-message)\n\nToast Message used internally by Toast component to render toast message.\n\n## Demo\n\n```html live\n<fw-toast-message\n  open\n  id=\"type_toast\"\n  sticky=\"true\"\n  type=\"success\"\n  content=\"success\"\n></fw-toast-message>\n<fw-toast-message\n  open\n  id=\"type_toast\"\n  sticky=\"true\"\n  type=\"error\"\n  content=\"error\"\n></fw-toast-message>\n<fw-toast-message\n  open\n  id=\"type_toast\"\n  type=\"warning\"\n  content=\"warning\"\n></fw-toast-message>\n<fw-toast-message\n  open\n  id=\"type_toast\"\n  type=\"inprogress\"\n  content=\"inprogress\"\n></fw-toast-message>\n<fw-toast-message\n  type=\"success\"\n  id=\"custom-toast\"\n  sticky\n  open\n  action-link-text=\"Click me\"\n>\n  <div\n    style=\"display: flex;\n    flex-direction: column;\n    gap: 4px;\"\n  >\n    <span\n      style=\"font-style: normal;\n    font-weight: 700;\n    font-size: 14px;\n    line-height: 20px;\n    color: #12344D;\"\n      >Test content</span\n    >\n    <span\n      style=\"font-style: normal;\n    font-weight: 400;\n    font-size: 12px;\n    line-height: 16px;\"\n      >custom html contents can be added</span\n    >\n  </div>\n</fw-toast-message>\n```\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html\n <fw-toast-message open id=\"type_toast\" sticky=true type=\"success\" content=\"success\"></fw-toast-message>\n <fw-toast-message open id=\"type_toast\" sticky=true type=\"error\" content=\"error\"></fw-toast-message>\n <fw-toast-message open id=\"type_toast\" type=\"warning\" content=\"warning\"></fw-toast-message>\n <fw-toast-message open id=\"type_toast\" type=\"inprogress\" content=\"inprogress\"></fw-toast-message>\n <fw-toast-message\n  type=\"success\"\n  id=\"custom-toast\"\n  sticky\n  show\n  action-link-text=\"Click me\"\n>\n  <div\n    style=\"display: flex;\n    flex-direction: column;\n    gap: 4px;\"\n  >\n    <span\n      style=\"font-style: normal;\n    font-weight: 700;\n    font-size: 14px;\n    line-height: 20px;\n    color: #12344D;\"\n      >Test content</span\n    >\n    <span\n      style=\"font-style: normal;\n    font-weight: 400;\n    font-size: 12px;\n    line-height: 16px;\"\n      >custom html contents can be added</span\n    >\n  </div>\n</fw-toast-message>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwToastMessage } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n        <FwToastMessage open id=\"type_toast\" sticky type=\"success\" content=\"success\"></FwToastMessage>\n        <FwToastMessage open id=\"type_toast\" sticky type=\"error\" content=\"error\"></FwToastMessage>\n        <FwToastMessage open id=\"type_toast\" type=\"warning\" content=\"warning\"></FwToastMessage>\n        <FwToastMessage open id=\"type_toast\" type=\"inprogress\" content=\"inprogress\"></FwToastMessage>\n        <FwToastMessage\n          type='success'\n          id='custom-toast'\n          sticky\n          action-link-text='Click me'\n        >\n          <div style={{ display: 'flex', flexDirection: 'column', gap: '4px' }}>\n            <span\n              style={{\n                fontStyle: 'normal',\n                fontWeight: '700',\n                fontSize: '14px',\n                lineHeight: '20px',\n                color: '#12344D',\n              }}\n            >\n              Test content\n            </span>\n            <span\n              style={{\n                fontStyle: 'normal',\n                fontWeight: '400',\n                fontSize: '12px',\n                lineHeight: '16px',\n              }}\n            >\n              custom html contents can be added\n            </span>\n          </div>\n        </FwToastMessage>  \n    </div>);\n}\n```\n</code-block>\n</code-group>\n",
      "docs": "Toast Message used internally by Toast component to render toast message.",
      "docsTags": [
        {
          "name": "parent",
          "text": "toast"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "actionLinkText",
          "type": "string",
          "mutable": false,
          "attr": "action-link-text",
          "reflectToAttr": false,
          "docs": "The Content of the action link",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "content",
          "type": "string",
          "mutable": false,
          "attr": "content",
          "reflectToAttr": false,
          "docs": "The content to be displayed in toast",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "visibility prop of toast message",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pauseOnHover",
          "type": "boolean",
          "mutable": false,
          "attr": "pause-on-hover",
          "reflectToAttr": false,
          "docs": "Pause the toast from hiding on mouse hover",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sticky",
          "type": "boolean",
          "mutable": false,
          "attr": "sticky",
          "reflectToAttr": false,
          "docs": "won't close automatically",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "timeout",
          "type": "number",
          "mutable": false,
          "attr": "timeout",
          "reflectToAttr": false,
          "docs": "Time duration of the toast visibility",
          "docsTags": [],
          "default": "4000",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"error\" | \"inprogress\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Type of the toast - success,failure, warning, inprogress",
          "docsTags": [],
          "default": "'warning'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "inprogress",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "fwLinkClick",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the action link clicked.",
          "docsTags": []
        },
        {
          "event": "fwRemoveToast",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered on closing the toast message.\nThis event gets used by the parent container to remove the toast message from itself",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-toast"
      ],
      "dependencies": [
        "fw-spinner",
        "fw-icon"
      ],
      "dependencyGraph": {
        "fw-toast-message": [
          "fw-spinner",
          "fw-icon"
        ],
        "fw-toast": [
          "fw-toast-message"
        ]
      }
    },
    {
      "filePath": "./src/components/toggle/toggle.tsx",
      "encapsulation": "shadow",
      "tag": "fw-toggle",
      "readme": "# Toggle (fw-toggle)\n\nfw-toggle displays an input control that enables modifying an element’s state between two settings. \n\n## Demo\n\n```html live\n<fw-toggle size=\"small\"></fw-toggle><br><br>\n<fw-toggle size=\"medium\" checked></fw-toggle>\n```\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html \n<fw-toggle size=\"small\"></fw-toggle><br><br>\n<fw-toggle size=\"medium\" checked></fw-toggle>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwToggle } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n          <FwToggle size=\"small\"></FwToggle><br/><br/>\n          <FwToggle size=\"medium\" checked></FwToggle>\n    </div>);\n}\n```\n</code-block>\n</code-group>",
      "docs": "fw-toggle displays an input control that enables modifying an element’s state between two settings.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": false,
          "docs": "Sets the selected state as the default state. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Specifies whether to disable the control on the interface. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label for the component, that can be used by screen readers.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of the form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showIcon",
          "type": "boolean",
          "mutable": false,
          "attr": "show-icon",
          "reflectToAttr": false,
          "docs": "Specifies whether to show the check and cancel icons on toggle button. If the attribute’s value is undefined, the value is set to true.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"large\" | \"medium\" | \"small\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Size of the input control.",
          "docsTags": [],
          "default": "'medium'",
          "values": [
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "medium",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "fwChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the input control is selected or deselected.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keyup",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "fw-icon"
      ],
      "dependencyGraph": {
        "fw-toggle": [
          "fw-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/toggle-group/toggle-group.tsx",
      "encapsulation": "shadow",
      "tag": "fw-toggle-group",
      "readme": "# Toggle Group (fw-toggle-group)\n\nfw-toggle-group displays a group of components like card button/icon button and enables to select either one option or select/deselect multiple options.\n\n## Demo\n\n```html live\n<fw-toggle-group\n  name=\"Test toggle group\"\n  selected-values=\"bb,cc\"\n  multiple=\"true\"\n>\n  <fw-toggle-group-button\n    header=\"Header A\"\n    description=\"This is a sample description of the card component.\"\n    value=\"aa\"\n  ></fw-toggle-group-button>\n  <fw-toggle-group-button\n    header=\"Header B\"\n    description=\"This is a sample description of the card component.\"\n    value=\"bb\"\n  ></fw-toggle-group-button>\n  <fw-toggle-group-button\n    header=\"Header C\"\n    description=\"This is a sample description of the card component.\"\n    value=\"cc\"\n  ></fw-toggle-group-button>\n  <fw-toggle-group-button header=\"Header D\" value=\"dd\"></fw-toggle-group-button>\n  <fw-toggle-group-button header=\"Header E\" value=\"ee\"></fw-toggle-group-button>\n  <fw-toggle-group-button header=\"Header F\" value=\"ff\"></fw-toggle-group-button>\n</fw-toggle-group>\n```\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html \n    <fw-toggle-group\n        name=\"Test toggle group\"\n        selected-values=\"bb,cc\">\n        <fw-toggle-group-button\n          header=\"Header A\"\n          description=\"This is a sample description of the card component.\"\n          value=\"aa\"></fw-toggle-group-button>\n        <fw-toggle-group-button\n          header=\"Header B\"\n          description=\"This is a sample description of the card component.\"\n          value=\"bb\"></fw-toggle-group-button>\n        <fw-toggle-group-button\n          header=\"Header C\"\n          description=\"This is a sample description of the card component.\"\n          value=\"cc\"></fw-toggle-group-button>\n        <fw-toggle-group-button\n          header=\"Header D\"\n          value=\"dd\"></fw-toggle-group-button>\n        <fw-toggle-group-button\n          header=\"Header E\"\n          value=\"ee\"></fw-toggle-group-button>\n    </fw-toggle-group>\n    <fw-toggle-group\n          name=\"Test icon toggle group\"\n          selected-values=\"gg\">\n          <fw-toggle-group-button\n            icon-name=\"phone\"\n            value=\"aa\"\n            type=\"icon\"></fw-toggle-group-button>\n          <fw-toggle-group-button\n            icon-name=\"agent\"\n            value=\"bb\"\n            type=\"icon\"></fw-toggle-group-button>\n          <fw-toggle-group-button\n            icon-name=\"delete\"\n            value=\"cc\"\n            type=\"icon\"></fw-toggle-group-button>\n          <fw-toggle-group-button\n            icon-name=\"check\"\n            value=\"dd\"\n            type=\"icon\"></fw-toggle-group-button>\n    </fw-toggle-group>\n````\n</code-block>\n\n<code-block title=\"React\">\n```jsx\n    import React from \"react\";\n    import ReactDOM from \"react-dom\";\n    import { FWToggleGroupButton, FwToggleGroup } from '@Freshworks/crayons/react'\n    function App() {\n    return (<div>\n            <FwToggleGroup selectedValues=\"bb\" multiple={true} onFwChange={toggleChangeHandler}>\n            <FWToggleGroupButton key=\"aa\" value=\"aa\" header=\"Header 1\" description=\"This is a sample description 1\"/>\n            <FWToggleGroupButton key=\"bb\" value=\"bb\" header=\"Header 2\" description=\"This is a sample description 2\"/>\n            <FWToggleGroupButton key=\"cc\" value=\"cc\" header=\"Header 2\" description=\"This is a sample description 2\"/>\n            </FwToggleGroup>\n        </div>);\n    }\n````\n</code-block>\n</code-group>\n",
      "docs": "fw-toggle-group displays a group of components like card button/icon button and enables to select either one option or select/deselect multiple options.",
      "docsTags": [
        {
          "name": "parent",
          "text": "toggle"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label for the component, that can be used by screen readers.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "Boolean value to allow multiple selection or single child selection",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Selected items to be shown - stored in array format - if property \"multiple\" is set to false, this will always be a single value array",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setSelectedValues",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setSelectedValues(values: string | string[]) => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "fwChange",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when an option in the Toggle Group is selected or deselected.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keyup",
          "capture": false,
          "passive": false
        },
        {
          "event": "fwToggled",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/toggle-group-button/toggle-group-button.tsx",
      "encapsulation": "shadow",
      "tag": "fw-toggle-group-button",
      "readme": "# Toggle Group Button (fw-toggle-group-button)\n\nfw-toggle-group-button displays a button on the user interface and enables performing specific actions based on the button type. This button can be used as a card or an icon button\n\n## Demo\n\n```html live\n<section>\n  <fw-label value=\"Icon button\"></fw-label>\n  <fw-toggle-group-button value=\"aa\" type=\"icon\">\n    <fw-icon slot=\"toggle-icon\" size=\"16\" name=\"phone\" />\n  </fw-toggle-group-button>\n  <fw-toggle-group-button value=\"dd\" type=\"icon\">\n    <fw-icon slot=\"toggle-icon\" size=\"16\" name=\"delete\" />\n  </fw-toggle-group-button>\n</section>\n\n<br />\n\n<section>\n  <fw-label value=\"Card button\"></fw-label>\n  <fw-toggle-group-button\n    header=\"Header A\"\n    description=\"This is a sample description of the card component.\"\n    value=\"aa\"\n    is-checkbox\n  ></fw-toggle-group-button>\n</section>\n```\n\n## Usage\n\n<code-group>\n<code-block title=\"HTML\">\n```html \n        <fw-toggle-group-button\n          header=\"Header A\"\n          description=\"This is a sample description of the card component.\"\n          value=\"aa\">\n        </fw-toggle-group-button>\n        <fw-toggle-group-button value=\"bb\" type=\"icon\">\n          <fw-icon slot=\"toggle-icon\" size=\"16\" name=\"agent\" />\n        </fw-toggle-group-button>\n````\n</code-block>\n\n<code-block title=\"React\">\n```jsx\n    import React from \"react\";\n    import ReactDOM from \"react-dom\";\n    import { FWToggleGroupButton } from '@Freshworks/crayons/react'\n    function App() {\n    return (<div>\n            <FWToggleGroupButton key=\"aa\" value=\"aa\" header=\"Header 1\" description=\"This is a sample description 1\" isCheckbox={true}/>\n            <FWToggleGroupButton key=\"cc\" value=\"cc\" type=\"icon\"><FwIcon slot=\"toggle-icon\" size={16} name=\"agent\" /></FWToggleGroupButton>\n        </div>);\n    }\n````\n</code-block>\n</code-group>\n",
      "docs": "fw-toggle-group-button displays a button on the user interface and enables performing specific actions based on the button type. This button can be used as a card or an icon button",
      "docsTags": [
        {
          "name": "parent",
          "text": "toggle"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "baseClassName",
          "type": "string",
          "mutable": true,
          "attr": "base-class-name",
          "reflectToAttr": false,
          "docs": "sets the default base class name and the rest of the class names for the other states are automatically appended to this",
          "docsTags": [],
          "default": "'fw-card-radio'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "description",
          "type": "string",
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "Label displayed as description in the card.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "header",
          "type": "string",
          "mutable": false,
          "attr": "header",
          "reflectToAttr": false,
          "docs": "Label displayed as header in the card.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "index",
          "type": "number",
          "mutable": false,
          "attr": "index",
          "reflectToAttr": false,
          "docs": "index attached inside the parent group component",
          "docsTags": [],
          "default": "-1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isCheckbox",
          "type": "boolean",
          "mutable": false,
          "attr": "is-checkbox",
          "reflectToAttr": false,
          "docs": "Enables the component to be used as a part of multi selection group",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the component, saved as part of the form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectable",
          "type": "boolean",
          "mutable": false,
          "attr": "selectable",
          "reflectToAttr": false,
          "docs": "Enables the component to be used as a toggle button or just to be used as a normal button",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "mutable": true,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "Sets the state to selected. If the attribute’s value is undefined, the value is set to false.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"card\" | \"custom\" | \"icon\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "sets the type of the button",
          "docsTags": [],
          "default": "'card'",
          "values": [
            {
              "value": "card",
              "type": "string"
            },
            {
              "value": "custom",
              "type": "string"
            },
            {
              "value": "icon",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Identifier corresponding to the component, that is saved when the form data is saved.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Public method exposed to set the focus for the button component - to be used for accessibility",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "fwToggled",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the card in focus is selected.",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--fw-toggle-group-button-card-description-max-height",
          "annotation": "prop",
          "docs": "maximum height for the description text."
        },
        {
          "name": "--fw-toggle-group-button-card-description-max-lines",
          "annotation": "prop",
          "docs": "maximum lines that can be displayed for description text."
        },
        {
          "name": "--fw-toggle-group-button-card-height",
          "annotation": "prop",
          "docs": "height of the content."
        },
        {
          "name": "--fw-toggle-group-button-card-width",
          "annotation": "prop",
          "docs": "width of the card."
        },
        {
          "name": "--fw-toggle-group-button-icon-button-height",
          "annotation": "prop",
          "docs": "defines the height of the icon toggle button - default is 36px"
        },
        {
          "name": "--fw-toggle-group-button-icon-button-width",
          "annotation": "prop",
          "docs": "defines the width of the icon toggle button - default is 42px"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "fw-icon"
      ],
      "dependencyGraph": {
        "fw-toggle-group-button": [
          "fw-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/tooltip/tooltip.tsx",
      "encapsulation": "shadow",
      "tag": "fw-tooltip",
      "readme": "# Tooltip (fw-tooltip)\n\nTooltips are used to show additional information on a target during hover interactions.\n\n## Demo & Usage\n\n#### Basic demo\n\n```html live\n<fw-tooltip content=\"This is the first tooltip example\">\n  <fw-button> Show tooltip </fw-button>\n</fw-tooltip>\n```\n\n#### Basic usage\n<code-group>\n<code-block title=\"HTML\">\n```html \n  <fw-tooltip content=\"This is the first tooltip example\">\n    <fw-button> Show tooltip </fw-button>\n  </fw-tooltip>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwButton, FwTooltip } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n    <FwTooltip content=\"This is the first tooltip example\">\n      <FwButton> Show tooltip </FwButton>\n    </FwTooltip>\n </div>);\n}\n```\n</code-block>\n</code-group>\n\n#### Placement demo\n\n```html live\n<template>\n  <div>\n    <div>\n      Hover over the tiles:\n      <br /><br /><br />\n    </div>\n    <div class=\"tooltip-placement-example\">\n      <div class=\"tooltip-placement-example-row\">\n        <fw-tooltip content=\"top-start\" placement=\"top-start\">\n          <button></button>\n        </fw-tooltip>\n\n        <fw-tooltip content=\"top\" placement=\"top\">\n          <button></button>\n        </fw-tooltip>\n\n        <fw-tooltip content=\"top-end\" placement=\"top-end\">\n          <button></button>\n        </fw-tooltip>\n      </div>\n\n      <div class=\"tooltip-placement-example-row\">\n        <fw-tooltip content=\"left-start\" placement=\"left-start\">\n          <button></button>\n        </fw-tooltip>\n\n        <fw-tooltip content=\"right-start\" placement=\"right-start\">\n          <button></button>\n        </fw-tooltip>\n      </div>\n\n      <div class=\"tooltip-placement-example-row\">\n        <fw-tooltip content=\"left\" placement=\"left\">\n          <button></button>\n        </fw-tooltip>\n\n        <fw-tooltip content=\"right\" placement=\"right\">\n          <button></button>\n        </fw-tooltip>\n      </div>\n\n      <div class=\"tooltip-placement-example-row\">\n        <fw-tooltip content=\"left-end\" placement=\"left-end\">\n          <button></button>\n        </fw-tooltip>\n\n        <fw-tooltip content=\"right-end\" placement=\"right-end\">\n          <button></button>\n        </fw-tooltip>\n      </div>\n\n      <div class=\"tooltip-placement-example-row\">\n        <fw-tooltip content=\"bottom-start\" placement=\"bottom-start\">\n          <button></button>\n        </fw-tooltip>\n\n        <fw-tooltip content=\"bottom\" placement=\"bottom\">\n          <button></button>\n        </fw-tooltip>\n\n        <fw-tooltip content=\"bottom-end\" placement=\"bottom-end\">\n          <button></button>\n        </fw-tooltip>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style>\n  .tooltip-placement-example {\n    width: 270px;\n    margin-left: calc(50% - 135px);\n  }\n\n  .tooltip-placement-example-row {\n    display: flex;\n    justify-content: space-between;\n  }\n\n  .tooltip-placement-example button {\n    display: block;\n    height: 50px;\n    width: 50px;\n    border: 0px;\n    background-color: rgb(38, 73, 102);\n    background-image: linear-gradient(rgb(38, 73, 102), rgb(18, 52, 77));\n    border-radius: 4px;\n    margin: 2px;\n  }\n\n  .tooltip-placement-example-row:first-child, .tooltip-placement-example-row:last-child {\n    justify-content: center;\n  }\n</style>\n```\n\n#### Triggers demo\n\n```html live \n<div>\n  Activating through click:\n  <br /><br />\n</div>\n<fw-tooltip placement=\"right\" trigger=\"click\" content=\"This is the tooltip that activates on click\">\n  <fw-button> Click </fw-button>\n</fw-tooltip>\n<div>\n  <br /><br />\n  Activating through hover:\n  <br /><br />\n</div>\n<fw-tooltip placement=\"right\" trigger=\"hover\" content=\"This is the tooltip that activates on hover\">\n  <fw-button> Hover </fw-button>\n</fw-tooltip>\n<div>\n  <br /><br />\n  Activating through manual trigger outside tooltip:\n  <br /><br />\n</div>\n<fw-tooltip placement=\"right\" id=\"tooltip\" trigger=\"manual\" content=\"Alice Schneier\">\n  <fw-avatar initials=\"AS\"></fw-avatar>\n</fw-tooltip>\n<div><br /><fw-button id=\"trigger\"> Show Name </fw-button></div>\n<script type=\"application/javascript\">\n  document.getElementById(\"trigger\").addEventListener(\"click\", function () {\n    document.getElementById(\"tooltip\").show();\n  })\n</script>\n```\n\n#### Triggers usage\n<code-group>\n<code-block title=\"HTML\">\n```html \n  <div>\n    Activating through click:\n    <br /><br />\n  </div>\n  <fw-tooltip placement=\"right\" trigger=\"click\" content=\"This is the tooltip that activates on click\">\n    <fw-button> Click </fw-button>\n  </fw-tooltip>\n  <div>\n    <br /><br />\n    Activating through hover:\n    <br /><br />\n  </div>\n  <fw-tooltip placement=\"right\" trigger=\"hover\" content=\"This is the tooltip that activates on hover\">\n    <fw-button> Hover </fw-button>\n  </fw-tooltip>\n  <div>\n    <br /><br />\n    Activating through manual trigger outside tooltip:\n    <br /><br />\n  </div>\n  <fw-tooltip placement=\"right\" id=\"tooltip\" trigger=\"manual\" content=\"Alice Schneier\">\n    <fw-avatar initials=\"AS\"></fw-avatar>\n  </fw-tooltip>\n  <div><br /><fw-button id=\"trigger\"> Show Name </fw-button></div>\n  <script type=\"application/javascript\">\n    document.getElementById(\"trigger\").addEventListener(\"click\", function () {\n      document.getElementById(\"tooltip\").show();\n    })\n  </script>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwButton, FwTooltip, FwAvatar } from \"@freshworks/crayons/react\";\nfunction App() {\n  const triggerRef = useRef(null);\n  const tooltipRef = useRef(null);\n  return (<div>\n      <div>\n        Activating through click:\n        <br /><br />\n      </div>\n      <FwTooltip placement=\"right\" trigger=\"click\" content=\"This is the tooltip that activates on click\">\n        <FwButton> Click </FwButton>\n      </FwTooltip>\n      <div>\n        <br /><br />\n        Activating through hover:\n        <br /><br />\n      </div>\n      <FwTooltip placement=\"right\" trigger=\"hover\" content=\"This is the tooltip that activates on hover\">\n        <FwButton> Hover </FwButton>\n      </FwTooltip>\n      <div>\n        <br /><br />\n        Activating through manual trigger outside tooltip:\n        <br /><br />\n      </div>\n      <FwTooltip placement=\"right\" id=\"tooltip\" trigger=\"manual\" content=\"Alice Schneier\" ref={tooltipRef}>\n        <FwAvatar initials=\"AS\"></FwAvatar>\n      </FwTooltip>\n      <div><br /><FwButton ref={triggerRef} onClick={() => tooltipRef.current.show()}> Show Name </FwButton></div>\n    </div>);\n}\n```\n</code-block>\n</code-group>\n\n#### HTML in Tooltip\n\n```html live\n<fw-tooltip>\n  <fw-button> Show tooltip </fw-button>\n  <div slot=\"tooltip-content\">\n    This tooltip has <b>HTML</b> content.\n  </div>\n</fw-tooltip>\n```\n\n#### HTML in tooltip Usage\n<code-group>\n<code-block title=\"HTML\">\n```html \n  <fw-tooltip>\n    <fw-button> Show tooltip </fw-button>\n    <div slot=\"tooltip-content\">\n      This tooltip has <b>HTML</b> content.\n    </div>\n  </fw-tooltip>\n```\n</code-block>\n\n<code-block title=\"React\">\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FwButton, FwTooltip } from \"@freshworks/crayons/react\";\nfunction App() {\n  return (<div>\n    <FwTooltip>\n      <FwButton> Show tooltip </FwButton>\n      <div slot=\"tooltip-content\">\n        This tooltip has <b>HTML</b> content.\n      </div>\n    </FwTooltip>\n </div>);\n}\n```\n</code-block>\n</code-group>\n\n\n#### Hoisting\n\n```html live\n<template>\n  <div class=\"limit\">\n    <fw-tooltip content=\"This is a tooltip\">\n      <fw-button> No hoist </fw-button>\n    </fw-tooltip>\n    <fw-tooltip content=\"This is a hoisted tooltip\" hoist>\n      <fw-button> Hoist </fw-button>\n    </fw-tooltip>\n  </div>\n</template>\n<style>\n  .limit {\n    position: relative;\n    display: inline-block;\n    overflow: hidden;\n    padding: 15px 0px;\n  }\n</style>\n```\n\n#### Hoisting usage\n<code-group>\n<code-block title=\"HTML\">\n```html \n  <template>\n    <div class=\"limit\">\n      <fw-tooltip content=\"This is a tooltip\">\n        <fw-button> No hoist </fw-button>\n      </fw-tooltip>\n      <fw-tooltip content=\"This is a hoisted tooltip\" hoist>\n        <fw-button> Hoist </fw-button>\n      </fw-tooltip>\n    </div>\n  </template>\n  <style>\n    .limit {\n      position: relative;\n      display: inline-block;\n      overflow: hidden;\n      padding: 15px 0px;\n    }\n  </style>\n```\n</code-block>\n</code-group>\n\n",
      "docs": "Tooltips are used to show additional information on a target during hover interactions.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "content",
          "type": "string",
          "mutable": false,
          "attr": "content",
          "reflectToAttr": false,
          "docs": "Content of the tooltip.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "distance",
          "type": "string",
          "mutable": false,
          "attr": "distance",
          "reflectToAttr": false,
          "docs": "Distance defines the distance between the popover trigger and the popover content along y-axis.",
          "docsTags": [],
          "default": "'10'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fallbackPlacements",
          "type": "[PopoverPlacementType]",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Alternative placement for popover if the default placement is not possible.",
          "docsTags": [],
          "default": "['top']",
          "values": [
            {
              "type": "[PopoverPlacementType]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hoist",
          "type": "boolean",
          "mutable": false,
          "attr": "hoist",
          "reflectToAttr": false,
          "docs": "Option to prevent the tooltip from being clipped when the component is placed inside a container with\n`overflow: auto|hidden|scroll`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placement",
          "type": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": false,
          "docs": "Placement of the popover content with respect to the popover trigger.",
          "docsTags": [],
          "default": "'top'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trigger",
          "type": "\"click\" | \"hover\" | \"manual\"",
          "mutable": false,
          "attr": "trigger",
          "reflectToAttr": false,
          "docs": "The trigger event on which the popover-content is displayed. The available options are\n'click' | 'manual' | 'hover', in case of 'manual' no trigger event will be set.",
          "docsTags": [],
          "default": "'hover'",
          "values": [
            {
              "value": "click",
              "type": "string"
            },
            {
              "value": "hover",
              "type": "string"
            },
            {
              "value": "manual",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "hide",
          "returns": {
            "type": "Promise<boolean>",
            "docs": "promise that resolves to true"
          },
          "signature": "hide() => Promise<boolean>",
          "parameters": [],
          "docs": "Hides the tooltip.",
          "docsTags": [
            {
              "name": "returns",
              "text": "promise that resolves to true"
            }
          ]
        },
        {
          "name": "show",
          "returns": {
            "type": "Promise<boolean>",
            "docs": "promise that resolves to true"
          },
          "signature": "show() => Promise<boolean>",
          "parameters": [],
          "docs": "Shows the tooltip.",
          "docsTags": [
            {
              "name": "returns",
              "text": "promise that resolves to true"
            }
          ]
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "fw-custom-cell-paragraph",
        "fw-data-table",
        "fw-tag"
      ],
      "dependencies": [
        "fw-popover"
      ],
      "dependencyGraph": {
        "fw-tooltip": [
          "fw-popover"
        ],
        "fw-custom-cell-paragraph": [
          "fw-tooltip"
        ],
        "fw-data-table": [
          "fw-tooltip"
        ],
        "fw-tag": [
          "fw-tooltip"
        ]
      }
    }
  ]
}